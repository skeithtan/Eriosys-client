{"version":3,"sources":["../main.js"],"names":["require","app","BrowserWindow","ipcMain","Menu","path","url","menu","default","toggleMenus","mainWindow","createWindow","width","height","minWidth","minHeight","frame","process","platform","titleBarStyle","loadURL","format","pathname","join","__dirname","protocol","slashes","on","setApplicationMenu","event","isSignedIn","installExtension","REACT_DEVELOPER_TOOLS","then","name","console","log","catch","err","quit"],"mappings":";;eAA8CA,QAAQ,UAAR,C;IAAtCC,G,YAAAA,G;IAAKC,a,YAAAA,a;IAAeC,O,YAAAA,O;IAASC,I,YAAAA,I;;AACrC,IAAMC,OAAOL,QAAQ,MAAR,CAAb;AACA,IAAMM,MAAMN,QAAQ,KAAR,CAAZ;;gBAEwCA,QAAQ,wBAAR,C;IAAtBO,I,aAAVC,O;IAAgBC,W,aAAAA,W;;AAGxB;AACA;;;AACA,IAAIC,mBAAJ;;AAEA,SAASC,YAAT,GAAwB;AACpB;AACAD,iBAAa,IAAIR,aAAJ,CAAkB;AAC3BU,eAAQ,IADmB;AAE3BC,gBAAS,GAFkB;AAG3BC,kBAAW,IAHgB;AAI3BC,mBAAY,GAJe;AAK3BC,eAAQC,QAAQC,QAAR,KAAqB,QALF,EAKY;AACvCC,uBAAgB;AANW,KAAlB,CAAb;;AASA;AACAT,eAAWU,OAAX,CAAmBd,IAAIe,MAAJ,CAAW;AAC1BC,kBAAWjB,KAAKkB,IAAL,CAAUC,SAAV,EAAqB,YAArB,CADe;AAE1BC,kBAAW,OAFe;AAG1BC,iBAAU;AAHgB,KAAX,CAAnB;;AAMA;AACAhB,eAAWiB,EAAX,CAAc,QAAd,EAAwB,YAAY;AAChC;AACA;AACA;AACAjB,qBAAa,IAAb;AACH,KALD;;AAOAN,SAAKwB,kBAAL,CAAwBrB,IAAxB;AACAE,gBAAY,KAAZ;;AAEAN,YAAQwB,EAAR,CAAW,WAAX,EAAwB,UAACE,KAAD,EAAQC,UAAR,EAAuB;AAC3CrB,oBAAYqB,UAAZ;AACH,KAFD;;AAIA;;AAjCoB,oBAkC0C9B,QAAQ,6BAAR,CAlC1C;AAAA,QAkCF+B,gBAlCE,aAkCZvB,OAlCY;AAAA,QAkCgBwB,qBAlChB,aAkCgBA,qBAlChB;;AAoCpBD,qBAAiBC,qBAAjB,EAAwCC,IAAxC,CAA6C,UAACC,IAAD,EAAU;AACZC,gBAAQC,GAAR,wBAAiCF,IAAjC;AACH,KAFxC,EAGwCG,KAHxC,CAG8C,UAACC,GAAD,EAAS;AACZH,gBAAQC,GAAR,CAAY,qBAAZ,EAAmCE,GAAnC;AACH,KALxC;AAMH;;AAED;AACA;AACA;AACArC,IAAI0B,EAAJ,CAAO,OAAP,EAAgBhB,YAAhB;;AAEA;AACAV,IAAI0B,EAAJ,CAAO,mBAAP,EAA4B,YAAY;AACpC;AACA;AACA,QAAIV,QAAQC,QAAR,KAAqB,QAAzB,EAAmC;AAC/BjB,YAAIsC,IAAJ;AACH;AACJ,CAND;;AAQAtC,IAAI0B,EAAJ,CAAO,UAAP,EAAmB,YAAY;AAC3B;AACA;AACA,QAAIjB,eAAe,IAAnB,EAAyB;AACrBC;AACH;AACJ,CAND;;AAQA;AACA","file":"main.js","sourcesContent":["const { app, BrowserWindow, ipcMain, Menu } = require(\"electron\");\nconst path = require(\"path\");\nconst url = require(\"url\");\n\nconst { default : menu, toggleMenus } = require(\"./dist/js/reports/menu\");\n\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\n\nfunction createWindow() {\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        width : 1200,\n        height : 800,\n        minWidth : 1100,\n        minHeight : 800,\n        frame : process.platform !== \"darwin\", // No frame on macs\n        titleBarStyle : \"hiddenInset\",\n    });\n\n    // and load the index.html of the app.\n    mainWindow.loadURL(url.format({\n        pathname : path.join(__dirname, \"index.html\"),\n        protocol : \"file:\",\n        slashes : true,\n    }));\n\n    // Emitted when the window is closed.\n    mainWindow.on(\"closed\", function () {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null;\n    });\n\n    Menu.setApplicationMenu(menu);\n    toggleMenus(false);\n\n    ipcMain.on(\"signed-in\", (event, isSignedIn) => {\n        toggleMenus(isSignedIn);\n    });\n\n    // React Developer Tools\n    const { default : installExtension, REACT_DEVELOPER_TOOLS } = require(\"electron-devtools-installer\");\n\n    installExtension(REACT_DEVELOPER_TOOLS).then((name) => {\n                                               console.log(`Added Extension:  ${name}`);\n                                           })\n                                           .catch((err) => {\n                                               console.log(\"An error occurred: \", err);\n                                           });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed.\napp.on(\"window-all-closed\", function () {\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\n\napp.on(\"activate\", function () {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        createWindow();\n    }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n"]}