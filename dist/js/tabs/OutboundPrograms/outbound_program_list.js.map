{"version":3,"sources":["../../../../js/tabs/OutboundPrograms/outbound_program_list.js"],"names":["ProgramList","props","getFilteredPrograms","bind","programList","institutions","map","program","institution","name","filter","value","index","self","indexOf","sort","categorizedByInstitution","forEach","programs","push","programInstitution","filteredPrograms","activeYear","activeTerm","setActiveTerm","activeProgram","setActiveProgram","ProgramListHead","onTermChange","event","target","year","ProgramListTable","emptyState","length","sections","institutionProgram","ProgramSection","rows","isActive","id","title"],"mappings":"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","file":"outbound_program_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Input,\n} from \"reactstrap\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n    SectionTitle,\n} from \"../../components/section\";\nimport LoadingSpinner from \"../../components/loading\";\n\n\nclass ProgramList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.getFilteredPrograms = this.getFilteredPrograms.bind(this);\n    }\n\n    getFilteredPrograms() {\n        if (this.props.programList === null) {\n            return [];\n        }\n\n        let institutions = this.props.programList.map(program => {\n            return program.institution.name;\n        });\n\n        // Get uniques only\n        institutions = institutions.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Arrange alphabetically\n        institutions = institutions.sort();\n\n        let categorizedByInstitution = [];\n\n        institutions.forEach(institution => {\n            let programs = [];\n            categorizedByInstitution.push({\n                institution : institution,\n                programs : programs,\n            });\n\n            this.props.programList.forEach(program => {\n                const programInstitution = program.institution.name;\n                if (programInstitution === institution) {\n                    programs.push(program);\n                }\n            });\n        });\n\n        return categorizedByInstitution;\n    }\n\n    render() {\n        const filteredPrograms = this.getFilteredPrograms();\n\n        return (\n            <div className=\"programs-page-pane d-flex flex-column\">\n                <ProgramListHead year={ this.props.activeYear }\n                                 activeTerm={ this.props.activeTerm }\n                                 setActiveTerm={ this.props.setActiveTerm }/>\n                <ProgramListTable programs={ filteredPrograms }\n                                  activeTerm={ this.props.activeTerm }\n                                  activeProgram={ this.props.activeProgram }\n                                  setActiveProgram={ this.props.setActiveProgram }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramListHead extends Component {\n    constructor(props) {\n        super(props);\n        this.onTermChange = this.onTermChange.bind(this);\n    }\n\n    onTermChange(event) {\n        this.props.setActiveTerm(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head d-flex flex-column align-items-center\">\n                <div className=\"page-head-controls mr-auto\">\n                    <Input type=\"select\" defaultValue={ this.props.activeTerm }\n                           className=\"ml-auto btn-sm btn-outline-success select-sm\"\n                           onChange={ this.onTermChange }>\n                        <option value=\"1\">Term 1</option>\n                        <option value=\"2\">Term 2</option>\n                        <option value=\"3\">Term 3</option>\n                    </Input>\n                </div>\n                <div className=\"d-flex flex-row w-100 mb-2 align-items-center\">\n                    <div className=\"mr-auto\">\n                        <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                        <div className=\"d-flex flex-row\">\n                            <h4 className=\"page-head-title mb-0\">\n                                { this.props.year } - { this.props.year + 1 }\n                            </h4>\n                        </div>\n                    </div>\n                </div>\n                <Input type=\"search\" placeholder=\"Search\" className=\"search-input\"/>\n            </div>\n        );\n    }\n}\n\nclass ProgramListTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h5>There are no programs for Term { this.props.activeTerm }</h5>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.programs === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        const sections = this.props.programs.map((institutionProgram, index) => {\n            return <ProgramSection key={ index }\n                                   title={ institutionProgram.institution }\n                                   activeProgram={ this.props.activeProgram }\n                                   programs={ institutionProgram.programs }\n                                   setActiveProgram={ this.props.setActiveProgram }/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                { sections }\n            </div>\n        );\n    }\n}\n\nclass ProgramSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const rows = this.props.programs.map((program, index) => {\n            let isActive = false;\n\n            if (this.props.activeProgram !== null) {\n                isActive = this.props.activeProgram.id === program.id;\n            }\n\n            const setActiveProgram = () => this.props.setActiveProgram(program);\n\n            return (\n                <SectionRow selectable key={ index } onClick={ setActiveProgram } active={ isActive }>\n                    <SectionRowContent>{ program.name }</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section>\n                <SectionTitle>{ this.props.title }</SectionTitle>\n                <SectionTable>\n                    { rows }\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default ProgramList;"]}