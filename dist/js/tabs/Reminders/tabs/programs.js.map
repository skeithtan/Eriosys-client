{"version":3,"sources":["../../../../../js/tabs/Reminders/tabs/programs.js"],"names":["fetchInstitutions","onResponse","query","makeCardInfo","institution","program","name","id","linkage","makeCardsFromInstitution","institutions","cards","forEach","latest_moa","active_program","push","Programs","props","state","activeCard","response","data","setState","setActiveCard","bind","index","length","emptyState","map","card","isActive","ProgramCard","cardClass","active","expirationClass","onClick"],"mappings":"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","file":"programs.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Card,\n    CardBody,\n    CardSubtitle,\n} from \"reactstrap\";\nimport {\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\n\n// TODO: Change query, if ever\nfunction fetchInstitutions(onResponse) {\n    graphql({\n        query : `\n        {\n            institutions {\n                id\n                name\n                latest_moa {\n                    active_program {\n                        name\n                        linkage {\n                            name\n                        }\n                        terms {\n                            number\n                            end_date\n                        }\n                    }\n                }\n            }\n        }\n        `,\n        onResponse : onResponse,\n    });\n}\n\nfunction makeCardInfo(institution, program) {\n    return {\n        institution : {\n            name : institution.name,\n            id : institution.id,\n        },\n        program : {\n            name : program.name,\n            linkage : program.linkage.name,\n            // TODO: terms, we only need the active one\n        },\n    };\n}\n\nfunction makeCardsFromInstitution(institutions) {\n    let cards = [];\n\n    institutions.forEach(institution => {\n        if (institution.latest_moa !== null && institution.latest_moa.active_program !== null) {\n            cards.push(makeCardInfo(institution, institution.latest_moa.active_program));\n        }\n    });\n\n    // TODO: Sorting by end date\n\n    return cards;\n}\n\nclass Programs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cards : null,\n            activeCard : null,\n        };\n\n        fetchInstitutions(response => {\n            const institutions = response.data.institutions;\n            this.setState({\n                cards : makeCardsFromInstitution(institutions),\n            });\n        });\n\n        this.setActiveCard = this.setActiveCard.bind(this);\n    }\n\n    static emptyState() {\n        return (\n            <h5>There are no memorandums found with an expiration date</h5>\n        );\n    }\n\n    setActiveCard(index) {\n        if (this.state.activeCard === index) {\n            this.setState({\n                activeCard : null,\n            });\n            return;\n        }\n\n        this.setState({\n            activeCard : index,\n        });\n    }\n\n    render() {\n        if (this.state.cards === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.state.cards.length === 0) {\n            return Programs.emptyState();\n        }\n\n        const cards = this.state.cards.map((card, index) => {\n            const isActive = this.state.activeCard === index;\n            const setActiveCard = () => this.setActiveCard(index);\n            return <ProgramCard key={index} card={card} onClick={setActiveCard} active={isActive}/>;\n        });\n\n        return (\n            <div className=\"d-flex flex-column align-items-center page-body p-4\">\n                {cards}\n            </div>\n        );\n    }\n}\n\nclass ProgramCard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        // TODO: dates\n\n        let cardClass = \"reminders-card rounded \";\n        if (this.props.active) {\n            cardClass += \"active\";\n        }\n\n        // TODO: What is urgent?\n\n        let expirationClass = \"text-white \";\n        // TODO: Conditions for class variations\n\n        return (\n            <div className=\"d-flex flex-column align-items-center page-body\">\n                <Card className={cardClass} onClick={this.props.onClick}>\n                    <SectionRow>\n                        <SectionRowContent large>{/*Expiry*/}</SectionRowContent>\n                    </SectionRow>\n                    <SectionRow>\n                        <SectionRowTitle>Institution Name</SectionRowTitle>\n                        <SectionRowContent large>{this.props.card.institution.name}</SectionRowContent>\n                    </SectionRow>\n                    <SectionRow>\n                        <SectionRowTitle>Program Name</SectionRowTitle>\n                        <SectionRowContent large>{this.props.card.program.name}</SectionRowContent>\n                    </SectionRow>\n                    <SectionRow>\n                        <SectionRowTitle>Linkage</SectionRowTitle>\n                        <SectionRowContent large>{/*Linkage*/}</SectionRowContent>\n                    </SectionRow>\n                    <SectionRow>\n                        <SectionRowTitle>End Date</SectionRowTitle>\n                        <SectionRowContent large>{/*End Date*/}</SectionRowContent>\n                    </SectionRow>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default Programs;"]}