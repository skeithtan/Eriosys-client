{"version":3,"sources":["../../../../../js/tabs/Reminders/tabs/memorandums.js"],"names":["makeMemorandumsQuery","query","makeMemorandumInfo","memorandumType","institution","memorandum","name","id","category","memorandum_file","college_initiator","linkages","date_effective","date_expiration","makeMemorandumsFromInstitutions","institutions","memorandums","forEach","latest_mou","push","latest_moa","sort","a","b","diff","Memorandums","props","state","activeCategory","activeMemorandum","error","getMemorandumsFromCategory","bind","setActiveCategory","setActiveMemorandum","refreshMemorandums","fetchMemorandums","setState","then","result","catch","setSidebarContent","filteredMemorandums","onQueryError","toString","MemorandumsHead","onCategoryChange","event","target","value","MemorandumsTable","emptyState","length","rows","map","index","isActive","onMemorandumRowClick","MemorandumRow","expirationToNow","fromNow","now","dateExpirationMoment","monthsBeforeExpiration","hasExpired","urgent","expirationClass","onClick","format"],"mappings":"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","file":"memorandums.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport moment from \"moment\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport { Table } from \"reactstrap\";\nimport {\n    Input,\n} from \"reactstrap\";\nimport { MemorandumsSidebarPane } from \"./sidebar_panes\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeMemorandumsQuery() {\n    return graphql.query(`\n    {\n        institutions {\n            id\n            name\n            latest_moa {\n                id\n                category\n                memorandum_file\n                college_initiator\n                linkages\n                date_effective\n                date_expiration\n            }\n            latest_mou {\n                id\n                category\n                memorandum_file\n                college_initiator\n                linkages\n                date_effective\n                date_expiration\n            }\n        }\n    }\n    `);\n}\n\nfunction makeMemorandumInfo(memorandumType, institution, memorandum) {\n    return {\n        institution : {\n            name : institution.name,\n            id : institution.id,\n        },\n        memorandum : {\n            id : memorandum.id,\n            category : memorandumType,\n            memorandum_file : memorandum.memorandum_file,\n            college_initiator : memorandum.college_initiator,\n            linkages : memorandum.linkages,\n            date_effective : moment(memorandum.date_effective),\n            date_expiration : moment(memorandum.date_expiration),\n        },\n    };\n}\n\nfunction makeMemorandumsFromInstitutions(institutions) {\n    let memorandums = [];\n\n\n    institutions.forEach(institution => {\n        if (institution.latest_mou !== null && institution.latest_mou.date_expiration !== null) {\n            memorandums.push(makeMemorandumInfo(\"Understanding\", institution, institution.latest_mou));\n        }\n\n        if (institution.latest_moa !== null && institution.latest_moa.date_expiration !== null) {\n            memorandums.push(makeMemorandumInfo(\"Agreement\", institution, institution.latest_moa));\n        }\n    });\n\n    memorandums.sort((a, b) => {\n        return a.memorandum.date_expiration.diff(b.memorandum.date_expiration);\n    });\n\n    return memorandums;\n}\n\nclass Memorandums extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeCategory : \"Agreement\",\n            institutions : null,\n            activeMemorandum : null,\n            error : null,\n        };\n\n\n        this.getMemorandumsFromCategory = this.getMemorandumsFromCategory.bind(this);\n        this.setActiveCategory = this.setActiveCategory.bind(this);\n        this.setActiveMemorandum = this.setActiveMemorandum.bind(this);\n        this.refreshMemorandums = this.refreshMemorandums.bind(this);\n        this.fetchMemorandums = this.fetchMemorandums.bind(this);\n\n        this.fetchMemorandums();\n    }\n\n\n    fetchMemorandums() {\n        if (this.state.error !== null) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeMemorandumsQuery()\n            .then(result => this.setState({\n                institutions : result.institutions,\n            }))\n            .catch(error => {\n                this.props.setSidebarContent(null);\n                this.setState({\n                    error : error,\n                });\n            });\n    }\n\n    setActiveCategory(category) {\n        this.setState({\n            activeCategory : category,\n            activeMemorandum : null,\n        });\n\n        this.props.setSidebarContent(null);\n    }\n\n    getMemorandumsFromCategory(category) {\n        const institutions = this.state.institutions;\n\n        if (institutions === null) {\n            return null;\n        }\n\n        let filteredMemorandums = [];\n\n        const memorandums = makeMemorandumsFromInstitutions(institutions);\n\n        memorandums.forEach(memorandum => {\n            if (memorandum.memorandum.category === category) {\n                filteredMemorandums.push(memorandum);\n            }\n        });\n        return filteredMemorandums;\n    }\n\n    setActiveMemorandum(memorandum) {\n        this.setState({\n            activeMemorandum : memorandum,\n        });\n\n        this.props.setSidebarContent(<MemorandumsSidebarPane institution={memorandum.institution}\n                                                             memorandum={memorandum.memorandum}\n                                                             refresh={this.refreshMemorandums}/>);\n    }\n\n    refreshMemorandums() {\n        this.props.setSidebarContent(null);\n\n        makeMemorandumsQuery()\n            .then(result => this.setState({\n                activeMemorandum : null,\n                institutions : result.institutions,\n            }))\n            .catch(onQueryError);\n\n        this.getMemorandumsFromCategory(this.state.activeCategory);\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorState onRetryButtonClick={this.fetchMemorandums}>{this.state.error.toString()}</ErrorState>;\n        }\n\n        const memorandums = this.getMemorandumsFromCategory(this.state.activeCategory);\n\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <MemorandumsHead setMemorandums={this.getMemorandumsFromCategory}\n                                 setActiveCategory={this.setActiveCategory}/>\n                <MemorandumsTable activeCategory={this.state.activeCategory}\n                                  memorandums={memorandums}\n                                  activeMemorandum={this.state.activeMemorandum}\n                                  setActiveMemorandum={this.setActiveMemorandum}/>\n            </div>\n        );\n    }\n}\n\nclass MemorandumsHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onCategoryChange = this.onCategoryChange.bind(this);\n    }\n\n    onCategoryChange(event) {\n        this.props.setActiveCategory(event.target.value);\n        this.props.getMemorandumsFromCategory(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h4 className=\"page-head-title justify-content-left d-inline-block mb-0 mr-2\">\n                        Memorandum Reminders\n                    </h4>\n                </div>\n                <div className=\"page-head-actions\">\n                    <Input type=\"select\"\n                           className=\"btn-outline-success\"\n                           value=\"MOA\"\n                           onChange={this.onCategoryChange}>\n                        <option value=\"Agreement\">Agreement</option>\n                        <option value=\"Understanding\">Understanding</option>\n                    </Input>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass MemorandumsTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There are no expiring Memorandums of {this.props.activeCategory}</h3>\n            </div>\n        );\n    }\n\n    render() {\n        const memorandums = this.props.memorandums;\n\n        if (memorandums === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (memorandums.length === 0) {\n            return this.emptyState();\n        }\n\n        const rows = memorandums.map((memorandum, index) => {\n            let isActive = false;\n\n            if (this.props.activeMemorandum !== null) {\n                isActive = this.props.activeMemorandum.memorandum.id === memorandum.memorandum.id;\n            }\n\n            const onMemorandumRowClick = () => this.props.setActiveMemorandum(memorandum);\n\n            return <MemorandumRow key={index}\n                                  memorandum={memorandum}\n                                  isActive={isActive}\n                                  onClick={onMemorandumRowClick}/>;\n        });\n\n        return (\n            <Table hover>\n                <thead>\n                <tr>\n                    <th>Institution Name</th>\n                    <th>Date Effective</th>\n                    <th>Date of Expiration</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nclass MemorandumRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const memorandum = this.props.memorandum;\n\n        const expirationToNow = memorandum.memorandum.date_expiration.fromNow();\n\n        const now = moment();\n\n        const dateExpirationMoment = memorandum.memorandum.date_expiration;\n        const monthsBeforeExpiration = dateExpirationMoment.diff(now, \"months\");\n        const hasExpired = dateExpirationMoment.diff(now, \"days\") <= 0;\n\n        const urgent = monthsBeforeExpiration <= 6;\n\n        let expirationClass = \"\";\n\n        if (this.props.isActive) {\n            expirationClass += \"text-white \";\n        }\n\n        if (urgent) {\n            expirationClass += this.props.isActive ? \"bg-danger\" : \"table-danger\";\n        } else {\n            expirationClass += this.props.isActive ? \"bg-dlsu-lighter\" : \"table-light\";\n        }\n\n        return (\n            <tr className={expirationClass}\n                onClick={this.props.onClick}>\n                <td>{memorandum.institution.name}</td>\n                <td>{memorandum.memorandum.date_effective.format(\"LL\")}</td>\n                <td>{hasExpired ? \"Expired\" : \"Expires\"} {expirationToNow}</td>\n            </tr>\n        );\n    }\n}\n\nexport default Memorandums;"]}