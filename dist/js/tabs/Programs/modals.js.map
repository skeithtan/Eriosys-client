{"version":3,"sources":["../../../../js/tabs/Programs/modals.js"],"names":["AcademicYearFormModal","props","state","form","academic_year_start","terms","number","start_date","end_date","dateIsWithinAcademicYear","bind","getTermChangeHandler","getYearChangeHandler","getFormErrors","date","academicYearStart","yearIsValid","parsedYear","parseInt","dayOfYear","year","academicYearEnd","dateMoment","isSameOrAfter","isSameOrBefore","term1","term2","term3","name","characterLimit","value","customValidators","isValid","errorMessage","fieldName","dateIsBetween","fieldValue","before","after","term","event","target","setState","formHasErrors","fieldErrors","academicYearFull","length","fieldError","isOpen","toggle","edit","isNaN","object","beforeMoment","isAfter","afterMoment","isBefore"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Button,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n} from \"reactstrap\";\nimport validateForm from \"../../form_validator\";\nimport moment from \"moment\";\n\n\nclass AcademicYearFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                academic_year_start : \"\",\n                terms : [{\n                    number : 1,\n                    start_date : \"\",\n                    end_date : \"\",\n                }, {\n                    number : 2,\n                    start_date : \"\",\n                    end_date : \"\",\n                }, {\n                    number : 3,\n                    start_date : \"\",\n                    end_date : \"\",\n                }],\n            },\n        };\n\n        this.dateIsWithinAcademicYear = this.dateIsWithinAcademicYear.bind(this);\n        this.getTermChangeHandler = this.getTermChangeHandler.bind(this);\n        this.getYearChangeHandler = this.getYearChangeHandler.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n    }\n\n    static yearIsValid(academicYearStart) {\n        const year = parseInt(academicYearStart);\n        if (isNaN(year)) {\n            return false;\n        }\n\n        return year > 1900 && year < 2500;\n    }\n\n    static dateIsBetween(object) {\n        const { date, before, after } = object;\n\n        if (!date) {\n            return true;\n        }\n\n        const dateMoment = moment(date);\n\n        if (before === \"\" && after === \"\") {\n            // Cannot validate without values\n            return true;\n        }\n\n        if (before && before.length > 1) {\n            const beforeMoment = moment(before);\n\n            if (beforeMoment.isAfter(dateMoment)) {\n                return false;\n            }\n        }\n\n        if (after && after.length > 1) {\n            const afterMoment = moment(after);\n\n            if (afterMoment.isBefore(dateMoment)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    dateIsWithinAcademicYear(date) {\n        let academicYearStart = this.state.form.academic_year_start;\n        if (!AcademicYearFormModal.yearIsValid(academicYearStart)) {\n            // Cannot verify if it's valid without a valid academic year\n            return true;\n        }\n\n        const parsedYear = parseInt(academicYearStart);\n\n        academicYearStart = moment().dayOfYear(1).year(parsedYear);\n        const academicYearEnd = moment().dayOfYear(356).year(parsedYear + 1); //Limit of term dates\n\n        const dateMoment = moment(date);\n\n        return dateMoment.isSameOrAfter(academicYearStart) && dateMoment.isSameOrBefore(academicYearEnd);\n    }\n\n    getFormErrors() {\n        const term1 = this.state.form.terms[0];\n        const term2 = this.state.form.terms[1];\n        const term3 = this.state.form.terms[2];\n\n\n        return validateForm([\n            {\n                name : \"Academic year start\",\n                characterLimit : null,\n                value : this.state.form.academic_year_start,\n                customValidators : [{\n                    isValid : AcademicYearFormModal.yearIsValid,\n                    errorMessage : fieldName => `${fieldName} must be a valid year.`,\n                }],\n            },\n            {\n                name : \"Term 1 start date\",\n                characterLimit : null,\n                value : term1.start_date,\n                customValidators : [{\n                    isValid : this.dateIsWithinAcademicYear,\n                    errorMessage : fieldName => `${fieldName} must be within the academic years`,\n                }],\n            },\n            {\n                name : \"Term 1 end date\",\n                characterLimit : null,\n                value : term1.end_date,\n                customValidators : [{\n                    isValid : this.dateIsWithinAcademicYear,\n                    errorMessage : fieldName => `${fieldName} must be within the academic years`,\n                }, {\n                    isValid : fieldValue => AcademicYearFormModal.dateIsBetween({\n                        date : fieldValue,\n                        before : term1.start_date,\n                        after : term2.start_date,\n                    }),\n                    errorMessage : fieldName => `${fieldName} must be between Term 1 start date and Term 2 start date`,\n                }],\n            },\n            {\n                name : \"Term 2 start date\",\n                characterLimit : null,\n                value : term2.start_date,\n                customValidators : [{\n                    isValid : this.dateIsWithinAcademicYear,\n                    errorMessage : fieldName => `${fieldName} must be within the academic years`,\n                }, {\n                    isValid : fieldValue => AcademicYearFormModal.dateIsBetween({\n                        date : fieldValue,\n                        before : term1.end_date,\n                        after : term2.end_date,\n                    }),\n                    errorMessage : fieldName => `${fieldName} must be between Term 1 end date and Term 2 end date`,\n                }],\n            },\n            {\n                name : \"Term 2 end date\",\n                characterLimit : null,\n                value : term2.end_date,\n                customValidators : [{\n                    isValid : this.dateIsWithinAcademicYear,\n                    errorMessage : fieldName => `${fieldName} must be within the academic years`,\n                }, {\n                    isValid : fieldValue => AcademicYearFormModal.dateIsBetween({\n                        date : fieldValue,\n                        before : term2.start_date,\n                        after : term3.start_date,\n                    }),\n                    errorMessage : fieldName => `${fieldName} must be between Term 2 start date and Term 3 start date`,\n                }],\n            },\n            {\n                name : \"Term 3 start date\",\n                characterLimit : null,\n                value : term3.start_date,\n                customValidators : [{\n                    isValid : this.dateIsWithinAcademicYear,\n                    errorMessage : fieldName => `${fieldName} must be within the academic years`,\n                }, {\n                    isValid : fieldValue => AcademicYearFormModal.dateIsBetween({\n                        date : fieldValue,\n                        before : term2.end_date,\n                        after : term3.end_date,\n                    }),\n                    errorMessage : fieldName => `${fieldName} must be between Term 2 end date and Term 3 end date`,\n                }],\n            },\n            {\n                name : \"Term 3 end date\",\n                characterLimit : null,\n                value : term3.end_date,\n                customValidators : [{\n                    isValid : this.dateIsWithinAcademicYear,\n                    errorMessage : fieldName => `${fieldName} must be within the academic years`,\n                }, {\n                    isValid : fieldValue => AcademicYearFormModal.dateIsBetween({\n                        date : fieldValue,\n                        before : term3.start_date,\n                        after : null,\n                    }),\n                    errorMessage : fieldName => `${fieldName} must be after Term 3 start date`,\n                }],\n            },\n\n        ]);\n    }\n\n    getTermChangeHandler(term, fieldName) {\n        const form = this.state.form;\n        return event => {\n            const value = event.target.value;\n            term[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    getYearChangeHandler() {\n        const form = this.state.form;\n\n        return event => {\n            const year = event.target.value;\n            form.academic_year_start = year;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n        const term1 = this.state.form.terms[0];\n        const term2 = this.state.form.terms[1];\n        const term3 = this.state.form.terms[2];\n\n        const academicYearFull = `${this.state.form.academic_year_start} - ${parseInt(this.state.form.academic_year_start) + 1}`;\n\n        let academicYearEnd = \"\";\n        if (AcademicYearFormModal.yearIsValid(this.state.form.academic_year_start)) {\n            academicYearEnd = parseInt(this.state.form.academic_year_start) + 1;\n        }\n\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    {this.props.edit ? `Edit ${academicYearFull}` : \"Add an Academic Year\"}\n                </ModalHeader>\n\n                <ModalBody className=\"form\">\n                    <Form>\n\n                        <FormGroup>\n                            <Label>Academic Year Start</Label>\n                            <Input placeholder=\"Academic Year Start\"\n                                   onChange={this.getYearChangeHandler()}\n                                   valid={isValid(\"Academic year start\")}\n                                   defaultValue={this.state.form.academic_year_start}/>\n                            <FormFeedback>{fieldError(\"Academic year start\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Academic Year End</Label>\n                            <Input placeholder=\"Academic Year End\"\n                                   value={academicYearEnd}\n                                   disabled/>\n                            <FormFeedback>{fieldError(\"Academic year start\")}</FormFeedback>\n                        </FormGroup>\n\n                        <br/>\n                        <h5 className=\"mb-3\">Terms</h5>\n\n                        <FormGroup>\n                            <Label>Term 1 Start</Label>\n                            <Input type=\"date\"\n                                   onChange={this.getTermChangeHandler(term1, \"start_date\")}\n                                   valid={isValid(\"Term 1 start date\")}\n                                   defaultValue={term1.start_date}/>\n                            <FormFeedback>{fieldError(\"Term 1 start date\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Term 1 End</Label>\n                            <Input type=\"date\"\n                                   onChange={this.getTermChangeHandler(term1, \"end_date\")}\n                                   valid={isValid(\"Term 1 end date\")}\n                                   defaultValue={term1.end_date}/>\n                            <FormFeedback>{fieldError(\"Term 1 end date\")}</FormFeedback>\n                        </FormGroup>\n\n                        <br/>\n\n                        <FormGroup>\n                            <Label>Term 2 Start</Label>\n                            <Input type=\"date\"\n                                   onChange={this.getTermChangeHandler(term2, \"start_date\")}\n                                   valid={isValid(\"Term 2 start date\")}\n                                   defaultValue={term2.start_date}/>\n                            <FormFeedback>{fieldError(\"Term 2 start date\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Term 2 End</Label>\n                            <Input type=\"date\"\n                                   onChange={this.getTermChangeHandler(term2, \"end_date\")}\n                                   valid={isValid(\"Term 2 end date\")}\n                                   defaultValue={term2.end_date}/>\n                            <FormFeedback>{fieldError(\"Term 2 end date\")}</FormFeedback>\n                        </FormGroup>\n\n                        <br/>\n\n                        <FormGroup>\n                            <Label>Term 3 Start</Label>\n                            <Input type=\"date\"\n                                   onChange={this.getTermChangeHandler(term3, \"start_date\")}\n                                   valid={isValid(\"Term 3 start date\")}\n                                   defaultValue={term3.start_date}/>\n                            <FormFeedback>{fieldError(\"Term 3 start date\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Term 3 End</Label>\n                            <Input type=\"date\"\n                                   onChange={this.getTermChangeHandler(term3, \"end_date\")}\n                                   valid={isValid(\"Term 3 end date\")}\n                                   defaultValue={term3.end_date}/>\n                            <FormFeedback>{fieldError(\"Term 3 end date\")}</FormFeedback>\n                        </FormGroup>\n\n                    </Form>\n\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={formHasErrors}>\n                        {this.props.edit ? \"Save changes\" : \"Add\"}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nexport { AcademicYearFormModal };"]}