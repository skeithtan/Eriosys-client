{"version":3,"sources":["../../../../js/tabs/Programs/program_list.js"],"names":["ProgramList","props","getFilteredPrograms","bind","programList","institutions","map","program","memorandum","institution","name","filter","value","index","self","indexOf","sort","categorizedByInstitution","forEach","programs","push","programInstitution","filteredPrograms","activeYear","activeTerm","setActiveTerm","activeProgram","setActiveProgram","ProgramListHead","onTermChange","event","target","year","ProgramListTable","emptyState","length","sections","institutionProgram","ProgramSection","rows","isActive","title"],"mappings":"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","file":"program_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Input,\n} from \"reactstrap\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n    SectionTitle,\n} from \"../../components/section\";\nimport LoadingSpinner from \"../../components/loading\";\n\n\nclass ProgramList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.getFilteredPrograms = this.getFilteredPrograms.bind(this);\n    }\n\n    getFilteredPrograms() {\n        if (this.props.programList === null) {\n            return [];\n        }\n\n        let institutions = this.props.programList.map(program => {\n            return program.memorandum.institution.name;\n        });\n\n        // Get uniques only\n        institutions = institutions.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Arrange alphabetically\n        institutions = institutions.sort();\n\n        let categorizedByInstitution = [];\n\n        institutions.forEach(institution => {\n            let programs = [];\n            categorizedByInstitution.push({\n                institution : institution,\n                programs : programs,\n            });\n\n            this.props.programList.forEach(program => {\n                const programInstitution = program.memorandum.institution.name;\n                if (programInstitution === institution) {\n                    programs.push(program);\n                }\n            });\n        });\n\n        return categorizedByInstitution;\n    }\n\n    render() {\n        const filteredPrograms = this.getFilteredPrograms();\n\n        return (\n            <div className=\"programs-page-pane d-flex flex-column\">\n                <ProgramListHead year={ this.props.activeYear }\n                                 activeTerm={ this.props.activeTerm }\n                                 setActiveTerm={ this.props.setActiveTerm }/>\n                <ProgramListTable programs={ filteredPrograms }\n                                  activeTerm={ this.props.activeTerm }\n                                  activeProgram={ this.props.activeProgram }\n                                  setActiveProgram={ this.props.setActiveProgram }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramListHead extends Component {\n    constructor(props) {\n        super(props);\n        this.onTermChange = this.onTermChange.bind(this);\n    }\n\n    onTermChange(event) {\n        this.props.setActiveTerm(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head d-flex flex-column align-items-center\">\n                <div className=\"page-head-controls mr-auto\">\n                    <Input type=\"select\" defaultValue={ this.props.activeTerm }\n                           className=\"ml-auto btn-sm btn-outline-success select-sm\"\n                           onChange={ this.onTermChange }>\n                        <option value=\"1\">Term 1</option>\n                        <option value=\"2\">Term 2</option>\n                        <option value=\"3\">Term 3</option>\n                    </Input>\n                </div>\n                <div className=\"d-flex flex-row w-100 mb-2 align-items-center\">\n                    <div className=\"mr-auto\">\n                        <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                        <div className=\"d-flex flex-row\">\n                            <h4 className=\"page-head-title mb-0\">\n                                { this.props.year } - { this.props.year + 1 }\n                            </h4>\n                        </div>\n                    </div>\n                </div>\n                <Input type=\"search\" placeholder=\"Search\" className=\"search-input\"/>\n            </div>\n        );\n    }\n}\n\nclass ProgramListTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h5>There are no programs for Term { this.props.activeTerm }</h5>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.programs === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        const sections = this.props.programs.map((institutionProgram, index) => {\n            return <ProgramSection key={ index }\n                                   title={ institutionProgram.institution }\n                                   activeProgram={ this.props.activeProgram }\n                                   programs={ institutionProgram.programs }\n                                   setActiveProgram={ this.props.setActiveProgram }/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                { sections }\n            </div>\n        );\n    }\n}\n\nclass ProgramSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const rows = this.props.programs.map((program, index) => {\n            let isActive = false;\n\n            if (this.props.activeProgram !== null) {\n                isActive = this.props.activeProgram.name === program.name;\n            }\n\n            const setActiveProgram = () => this.props.setActiveProgram(program);\n\n            return (\n                <SectionRow selectable key={ index } onClick={ setActiveProgram } active={ isActive }>\n                    <SectionRowContent>{ program.name }</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section>\n                <SectionTitle>{ this.props.title }</SectionTitle>\n                <SectionTable>\n                    { rows }\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default ProgramList;"]}