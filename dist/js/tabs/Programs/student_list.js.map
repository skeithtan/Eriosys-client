{"version":3,"sources":["../../../../js/tabs/Programs/student_list.js"],"names":["StudentList","props","state","addStudentsIsShowing","toggleAddStudents","bind","getSortedStudyFields","setState","studyFieldList","studyFields","filter","value","index","self","indexOf","categorizedByStudyField","forEach","students","studyField","studentprogram_set","studentProgram","study_field","name","push","student","activeProgram","refreshStudents","StudentListHead","StudentListTable","emptyState","length","sections","map","StudentSection","body","rows","id_number","family_name","first_name","middle_name","title"],"mappings":"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","file":"student_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Input,\n    Button,\n} from \"reactstrap\";\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n} from \"../../components/section\";\nimport LoadingSpinner from \"../../components/loading\";\nimport { StudentFormModal } from \"./modals\";\n\nclass StudentList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            addStudentsIsShowing : false,\n        };\n\n        this.toggleAddStudents = this.toggleAddStudents.bind(this);\n        this.getSortedStudyFields = this.getSortedStudyFields.bind(this);\n    }\n\n    toggleAddStudents() {\n        this.setState({\n            addStudentsIsShowing : !this.state.addStudentsIsShowing,\n        });\n    }\n\n    getSortedStudyFields() {\n        if (this.props.studyFieldList === null) {\n            return [];\n        }\n\n        let studyFields = this.props.studyFieldList;\n\n        // Get uniques only\n        studyFields = studyFields.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // A different approach\n        let categorizedByStudyField = [];\n        studyFields.forEach(studyField => {\n            let students = [];\n            studyField.studentprogram_set.forEach(studentProgram => {\n                if (studentProgram.study_field.name === studyField.name) {\n                    students.push(studentProgram.student);\n                }\n            });\n            categorizedByStudyField.push({\n                studyField : studyField.name,\n                students : students,\n            });\n        });\n\n        return categorizedByStudyField;\n    }\n\n    render() {\n        const studyFields = this.getSortedStudyFields();\n\n        return (\n            <div className=\"programs-page-pane d-flex flex-column\">\n                <StudentListHead activeProgram={ this.props.activeProgram }\n                                 toggleAddStudents={ this.toggleAddStudents }/>\n                <StudentListTable studyFields={ studyFields }/>\n                <StudentFormModal activeProgram={ this.props.activeProgram }\n                                  studyFields={ studyFields }\n                                  refreshStudents={ this.props.refreshStudents }\n                                  toggle={ this.toggleAddStudents }\n                                  isOpen={ this.state.addStudentsIsShowing }/>\n            </div>\n        );\n    }\n}\n\nclass StudentListHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head d-flex flex-column align-items-center\">\n                <div className=\"page-head-controls ml-auto\">\n                    <Button outline color=\"success\" size=\"sm\" className=\"ml-auto\"\n                            onClick={ this.props.toggleAddStudents }>Add</Button>\n                </div>\n                <div className=\"w-100 mb-2\">\n                    <h5 className=\"mb-0 text-secondary\">Students</h5>\n                    <h4 className=\"page-head-title mb-0\">{ this.props.activeProgram.name }</h4>\n                </div>\n                <Input type=\"search\" placeholder=\"Search\" className=\"search-input\"/>\n            </div>\n        );\n    }\n}\n\nclass StudentListTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There's nothing here.</h4>\n                <p>When added, Students will show up here.</p>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.studyFields === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.studyFields.length === 0) {\n            return this.emptyState();\n        }\n\n        const sections = this.props.studyFields.map((studyField, index) => {\n            return <StudentSection key={ index }\n                                   title={ studyField.studyField }\n                                   students={ studyField.students }/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                { sections }\n            </div>\n        );\n    }\n}\n\nclass StudentSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let body = (\n            <div className=\"p-4 pt-5 pb-5 bg-light text-center\">\n                <h5 className=\"text-secondary\">There are no students for this study field.</h5>\n            </div>\n        );\n\n        const rows = this.props.students.map((student, index) => {\n            return (\n                <SectionRow key={ index }>\n                    <small className=\"d-block\">{ student.id_number }</small>\n                    <b>{ student.family_name }</b>, { student.first_name } { student.middle_name }\n                </SectionRow>\n            );\n        });\n\n        if (this.props.students.length > 0) {\n            body = (\n                <SectionTable>\n                    { rows }\n                </SectionTable>\n            );\n        }\n\n        return (\n            <Section>\n                <SectionTitle>{ this.props.title }</SectionTitle>\n                { body }\n            </Section>\n        );\n    }\n}\n\nexport default StudentList;"]}