{"version":3,"sources":["../../../../js/tabs/OutboundApplications/outbound_applications.js"],"names":["fetchOutboundApplication","onResult","query","then","OutboundApplications","props","OutboundApplicationsList","state","activeCategory","applicants","activeApplicant","setState","result","outbound_student_programs","setActiveCategory","bind","setApplicants","setActiveApplicant","category","filteredApplicants","length","forEach","applicant","is_requirements_complete","push","OutboundApplicationsListHead","OutboundApplicationsListTable","getStudentsByFamilyNameInitials","emptyState","student","familyNameInitials","map","family_name","filter","value","index","self","indexOf","sort","a","b","categorizedByInitial","categorizedApplicants","initial","studentInitial","sections","familyNameInitial","OutboundApplicationsListSection","rows","isActive","id","toString","id_number","first_name","middle_name","title"],"mappings":"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","file":"outbound_applications.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../graphql\";\nimport {\n    Button,\n    Input,\n} from \"reactstrap\";\nimport LoadingSpinner from \"../../components/loading\";\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n} from \"../../components/section\";\n\n\nfunction fetchOutboundApplication(onResult) {\n    graphql.query(`\n    {\n        outbound_student_programs {\n            id\n            student {\n                id\n                id_number\n                first_name\n                middle_name\n                family_name\n            }\n            is_requirements_complete\n        }\n    }\n    `).then(onResult);\n}\n\n\nclass OutboundApplications extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid d-flex flex-row p-0 h-100\">\n                <OutboundApplicationsList/>\n            </div>\n        );\n    }\n}\n\nclass OutboundApplicationsList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeCategory : \"Incomplete\",\n            applicants : null,\n            activeApplicant : null,\n        };\n\n        fetchOutboundApplication(result => {\n            this.setState({\n                applicants : result.outbound_student_programs,\n            });\n        });\n\n        this.setActiveCategory = this.setActiveCategory.bind(this);\n        this.setApplicants = this.setApplicants.bind(this);\n        this.setActiveApplicant = this.setActiveApplicant.bind(this);\n    }\n\n    setActiveCategory(category) {\n        this.setState({\n            activeCategory : category,\n        });\n\n        this.setApplicants(this.state.applicants);\n    }\n\n    setApplicants(applicants) {\n        let filteredApplicants = [];\n\n        if (applicants !== null && applicants.length !== 0) {\n            applicants.forEach(applicant => {\n                if (this.state.activeCategory === \"Incomplete\") {\n                    if (!applicant.is_requirements_complete) {\n                        filteredApplicants.push(applicant);\n                    }\n                } else {\n                    if (applicant.is_requirements_complete) {\n                        filteredApplicants.push(applicant);\n                    }\n                }\n            });\n        }\n        return filteredApplicants;\n    }\n\n    // TODO: refreshing the applicants and at the same time conforming to the activeCategory\n\n    setActiveApplicant(applicant) {\n        this.setState({\n            activeApplicant : applicant,\n        });\n    }\n\n    render() {\n        const applicants = this.setApplicants(this.state.applicants);\n\n        return (\n            <div className=\"sidebar h-100\">\n                <OutboundApplicationsListHead activeCategory={ this.state.activeCategory }\n                                              setActiveCategory={ this.setActiveCategory }/>\n                <OutboundApplicationsListTable activeCategory={ this.state.activeCategory }\n                                               applicants={ applicants }\n                                               activeApplicant={ this.state.activeApplicant }\n                                               setActiveApplicant={ this.setActiveApplicant }/>\n            </div>\n        );\n    }\n}\n\nclass OutboundApplicationsListHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <div className=\"btn-group\" role=\"group\">\n                        <Button outline\n                                color=\"success\"\n                                size=\"sm\"\n                                onClick={ () => this.props.setActiveCategory(\"Incomplete\") }\n                                active={ this.props.activeCategory === \"Incomplete\" }>Incomplete</Button>\n                        <Button outline\n                                color=\"success\"\n                                size=\"sm\"\n                                onClick={ () => this.props.setActiveCategory(\"Complete\") }\n                                active={ this.props.activeCategory === \"Complete\" }>Complete</Button>\n                    </div>\n                    <Button outline\n                            color=\"success\"\n                            className=\"ml-auto\"\n                            size=\"sm\">Add Applicant</Button>\n                </div>\n                <h4 className=\"page-head-title\">{ this.props.activeCategory } Applications</h4>\n                <Input type=\"search\"\n                       placeholder=\"search\"\n                       className=\"search-input\"/>\n            </div>\n        );\n    }\n}\n\nclass OutboundApplicationsListTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.getStudentsByFamilyNameInitials = this.getStudentsByFamilyNameInitials.bind(this);\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    getStudentsByFamilyNameInitials() {\n        let applicants = [];\n\n        this.props.applicants.forEach(applicant => {\n            applicants.push(applicant.student);\n        });\n\n        //Get first letter\n        let familyNameInitials = applicants.map(student => student.family_name[0]);\n\n        //Get uniques only\n        familyNameInitials = familyNameInitials.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Sort alphabetically\n        familyNameInitials = familyNameInitials.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let categorizedByInitial = [];\n\n        // Categorize by family name initial\n        familyNameInitials.forEach(initial => {\n            let categorizedApplicants = [];\n            categorizedByInitial.push({\n                initial : initial,\n                applicants : categorizedApplicants,\n            });\n\n            applicants.forEach(applicant => {\n                const studentInitial = applicant.family_name[0];\n\n                if (studentInitial === initial) {\n                    categorizedApplicants.push(applicant);\n                }\n            });\n\n        });\n        return categorizedByInitial;\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There are no { this.props.activeCategory } applicants.</h4>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.applicants === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.applicants.length === 0) {\n            return this.emptyState();\n        }\n\n        const familyNameInitials = this.getStudentsByFamilyNameInitials();\n\n        const sections = familyNameInitials.map((familyNameInitial, index) => {\n            return <OutboundApplicationsListSection key={ index }\n                                                    title={ familyNameInitial.initial }\n                                                    activeApplicant={ this.props.activeApplicant }\n                                                    applicants={ familyNameInitial.applicants }\n                                                    setActiveApplicant={ this.props.setActiveApplicant }/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                { sections }\n            </div>\n        );\n    }\n}\n\nclass OutboundApplicationsListSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const rows = this.props.applicants.map((applicant, index) => {\n            let isActive = false;\n\n            if (this.props.activeApplicant !== null) {\n                isActive = this.props.activeApplicant.id.toString() === applicant.id.toString();\n            }\n\n            const setActiveApplicant = () => this.props.setActiveApplicant(applicant);\n\n            return (\n                <SectionRow selectable\n                            onClick={ setActiveApplicant }\n                            active={ isActive }\n                            key={ index }>\n                    <small className=\"d-block\">{ applicant.id_number }</small>\n                    <b>{ applicant.family_name }</b>, { applicant.first_name } { applicant.middle_name }\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section>\n                <SectionTitle>{ this.props.title }</SectionTitle>\n                <SectionTable>\n                    { rows }\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default OutboundApplications;"]}