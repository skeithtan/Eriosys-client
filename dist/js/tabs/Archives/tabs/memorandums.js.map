{"version":3,"sources":["../../../../../js/tabs/Archives/tabs/memorandums.js"],"names":["makeMemorandumQuery","year","query","MemorandumArchives","props","state","activeYear","memorandums","activeMemorandumId","performQuery","bind","setActiveYear","refreshMemorandums","setActiveMemorandum","error","setState","then","result","catch","setSidebarContent","memorandum","id","toString","MemorandumArchivesTable","emptyState","length","rows","map","index","MemorandumArchivesRow","memorandumType","category","archiveDate","archived_at","format","className","isActive","onClick","institution","name","archiver"],"mappings":"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","file":"memorandums.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport moment from \"moment\";\nimport {\n    Input,\n    Table,\n} from \"reactstrap\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport { MemorandumSidebarPane } from \"../../Institutions/tabs/sidebar_panes\";\nimport ArchivesHead from \"../archive_head\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeMemorandumQuery(year) {\n    return graphql.query(`\n    {\n        memorandums(archived:true, year_archived:${year}) {\n\t\tid\n\t\tcategory\n\t\tarchived_at\n\t\tarchiver\n\t\tmemorandum_file\n        date_expiration\n        college_initiator\n        linkages\n\t\tdate_effective\n            institution {\n                name\n            }\n\t\t}\n\t}\n\t`);\n}\n\nclass MemorandumArchives extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeYear : moment().year(),\n            memorandums : null,\n            activeMemorandumId : null,\n        };\n\n        this.performQuery = this.performQuery.bind(this);\n        this.setActiveYear = this.setActiveYear.bind(this);\n        this.refreshMemorandums = this.refreshMemorandums.bind(this);\n        this.setActiveMemorandum = this.setActiveMemorandum.bind(this);\n\n        this.performQuery();\n    }\n\n    performQuery() {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeMemorandumQuery(this.state.activeYear)\n            .then(result => {\n                this.setState({\n                    memorandums : result.memorandums,\n                });\n            })\n            .catch(error => {\n                this.props.setSidebarContent(null);\n                this.setState({\n                    error : error,\n                });\n            });\n    }\n\n    setActiveMemorandum(memorandum) {\n        this.setState({\n            activeMemorandumId : memorandum.id,\n        });\n\n        this.props.setSidebarContent(<MemorandumSidebarPane archived\n                                                            onRestoreSuccess={this.refreshMemorandums}\n                                                            memorandum={memorandum}/>);\n    }\n\n\n    setActiveYear(year) {\n        this.setState({\n            activeYear : year,\n            activeMemorandumId : null,\n            memorandums : null, //Loading\n        });\n\n        this.props.setSidebarContent(null);\n        this.performQuery();\n    }\n\n    refreshMemorandums() {\n        this.setActiveYear(this.state.activeYear);\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRefreshButtonClick={() => this.performQuery(this.state.activeYear)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <ArchivesHead setActiveYear={this.setActiveYear}\n                              activeYear={this.state.activeYear}>Memorandum Archives</ArchivesHead>\n                <MemorandumArchivesTable memorandums={this.state.memorandums}\n                                         activeYear={this.state.activeYear}\n                                         setSidebarContent={this.props.setSidebarContent}\n                                         activeMemorandumId={this.state.activeMemorandumId}\n                                         setActiveMemorandum={this.setActiveMemorandum}/>\n            </div>\n        );\n    }\n}\n\nclass MemorandumArchivesTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There were no archived memorandums in {this.props.activeYear}.</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.memorandums === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.memorandums.length === 0) {\n            return this.emptyState();\n        }\n\n        const rows = this.props.memorandums.map((memorandum, index) => {\n            return <MemorandumArchivesRow memorandum={memorandum}\n                                          key={index}\n                                          isActive={this.props.activeMemorandumId === memorandum.id}\n                                          onClick={() => this.props.setActiveMemorandum(memorandum)}/>;\n        });\n\n\n        return (\n            <Table striped\n                   hover>\n                <thead>\n                <tr>\n                    <th>Institution Name</th>\n                    <th>Memorandum Type</th>\n                    <th>Archive Date</th>\n                    <th>Archived By</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nclass MemorandumArchivesRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const memorandum = this.props.memorandum;\n        const memorandumType = memorandum.category === \"MOA\" ? \"Agreement\" : \"Understanding\";\n        const archiveDate = moment(memorandum.archived_at).format(\"LLL\");\n\n        const className = this.props.isActive ? \"bg-dlsu-lighter text-white\" : \"table-light\";\n\n        return (\n            <tr className={className}\n                onClick={this.props.onClick}>\n                <td>{memorandum.institution.name}</td>\n                <td>{memorandumType}</td>\n                <td>{archiveDate}</td>\n                <td>{memorandum.archiver}</td>\n            </tr>\n        );\n    }\n}\n\nexport default MemorandumArchives;"]}