{"version":3,"sources":["../../../../../js/tabs/Archives/tabs/students.js"],"names":["makeStudentsQuery","year","query","StudentArchives","props","state","activeYear","students","activeStudentId","performQuery","bind","setActiveYear","refreshStudents","setActiveStudent","error","setState","then","result","catch","setSidebarContent","student","id","toString","StudentArchivesTable","emptyState","length","rows","map","StudentArchivesRow","archiveDate","archived_at","format","className","isActive","category","onClick","id_number","family_name","first_name","middle_name","archiver"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;;;AAGA,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,WAAO,kBAAQC,KAAR,6DAEqCD,IAFrC,gUAAP;AAsBH;;IAEKE,e;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,sIACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,wBAAa,wBAASL,IAAT,EADJ;AAETM,sBAAW,IAFF;AAGTC,6BAAkB;AAHT,SAAb;;AAMA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,cAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,OAArB;AACA,cAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,OAAvB;AACA,cAAKG,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBH,IAAtB,OAAxB;;AAEA,cAAKD,YAAL,CAAkB,MAAKJ,KAAL,CAAWC,UAA7B;AAde;AAelB;;;;qCAEYL,I,EAAM;AAAA;;AACf,gBAAI,KAAKI,KAAL,CAAWS,KAAf,EAAsB;AAClB,qBAAKC,QAAL,CAAc;AACVD,2BAAQ;AADE,iBAAd;AAGH;;AAEDd,8BAAkBC,IAAlB,EACKe,IADL,CACU;AAAA,uBAAU,OAAKD,QAAL,CAAc;AAC1BR,8BAAWU,OAAOV;AADQ,iBAAd,CAAV;AAAA,aADV,EAIKW,KAJL,CAIW,iBAAS;AACZ,uBAAKd,KAAL,CAAWe,iBAAX,CAA6B,IAA7B;AACA,uBAAKJ,QAAL,CAAc;AACVD,2BAAQA;AADE,iBAAd;AAGH,aATL;AAUH;;;yCAEgBM,O,EAAS;AACtB,iBAAKL,QAAL,CAAc;AACVP,iCAAkBY,QAAQC;AADhB,aAAd;;AAKA,iBAAKjB,KAAL,CAAWe,iBAAX,CAA6B,mEAAoB,SAASC,OAA7B;AACoB,kCAAkB,KAAKR,eAD3C,GAA7B;AAEH;;;0CAEiB;AACd,iBAAKD,aAAL,CAAmB,KAAKN,KAAL,CAAWC,UAA9B;AACH;;;sCAEaL,I,EAAM;AAChB,iBAAKc,QAAL,CAAc;AACVT,4BAAaL,IADH;AAEVO,iCAAkB,IAFR;AAGVD,0BAAW,IAHD,CAGM;AAHN,aAAd;;AAMA,iBAAKH,KAAL,CAAWe,iBAAX,CAA6B,IAA7B;AACA,iBAAKV,YAAL,CAAkBR,IAAlB;AACH;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKI,KAAL,CAAWS,KAAf,EAAsB;AAClB,uBACI;AAAA;AAAA,sBAAY,oBAAoB;AAAA,mCAAM,OAAKL,YAAL,CAAkB,OAAKJ,KAAL,CAAWC,UAA7B,CAAN;AAAA,yBAAhC;AACK,yBAAKD,KAAL,CAAWS,KAAX,CAAiBQ,QAAjB;AADL,iBADJ;AAKH;;AAED,mBACI;AAAA;AAAA,kBAAK,WAAU,0BAAf;AACI;AAAA;AAAA,sBAAc,eAAe,KAAKX,aAAlC;AACc,oCAAY,KAAKN,KAAL,CAAWC,UADrC;AAAA;AAAA,iBADJ;AAGI,8CAAC,oBAAD,IAAsB,UAAU,KAAKD,KAAL,CAAWE,QAA3C;AACsB,gCAAY,KAAKF,KAAL,CAAWC,UAD7C;AAEsB,uCAAmB,KAAKF,KAAL,CAAWe,iBAFpD;AAGsB,qCAAiB,KAAKd,KAAL,CAAWG,eAHlD;AAIsB,sCAAkB,KAAKK,gBAJ7C;AAHJ,aADJ;AAWH;;;;;;IAGCU,oB;;;AACF,kCAAYnB,KAAZ,EAAmB;AAAA;;AAAA,iJACTA,KADS;;AAGf,eAAKoB,UAAL,GAAkB,OAAKA,UAAL,CAAgBd,IAAhB,QAAlB;AAHe;AAIlB;;;;qCAEY;AACT,mBACI;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACI;AAAA;AAAA;AAAA;AAAwC,yBAAKN,KAAL,CAAWE,UAAnD;AAAA;AAAA;AADJ,aADJ;AAKH;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKF,KAAL,CAAWG,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,uBAAO,sDAAP;AACH;;AAED,gBAAI,KAAKH,KAAL,CAAWG,QAAX,CAAoBkB,MAApB,KAA+B,CAAnC,EAAsC;AAClC,uBAAO,KAAKD,UAAL,EAAP;AACH;;AAED,gBAAME,OAAO,KAAKtB,KAAL,CAAWG,QAAX,CAAoBoB,GAApB,CAAwB,mBAAW;AAC5C,uBAAO,8BAAC,kBAAD,IAAoB,SAASP,OAA7B;AACoB,yBAAKA,QAAQC,EADjC;AAEoB,8BAAU,OAAKjB,KAAL,CAAWI,eAAX,KAA+BY,QAAQC,EAFrE;AAGoB,6BAAS;AAAA,+BAAM,OAAKjB,KAAL,CAAWS,gBAAX,CAA4BO,OAA5B,CAAN;AAAA,qBAH7B,GAAP;AAIH,aALY,CAAb;;AAOA,mBACI;AAAA;AAAA,kBAAO,aAAP;AACO,+BADP;AAEI;AAAA;AAAA;AACA;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA,yBADJ;AAEI;AAAA;AAAA;AAAA;AAAA,yBAFJ;AAGI;AAAA;AAAA;AAAA;AAAA,yBAHJ;AAII;AAAA;AAAA;AAAA;AAAA,yBAJJ;AAKI;AAAA;AAAA;AAAA;AAAA;AALJ;AADA,iBAFJ;AAWI;AAAA;AAAA;AACCM;AADD;AAXJ,aADJ;AAiBH;;;;;;IAGCE,kB;;;AACF,gCAAYxB,KAAZ,EAAmB;AAAA;;AAAA,uIACTA,KADS;AAElB;;;;iCAEQ;AACL,gBAAMgB,UAAU,KAAKhB,KAAL,CAAWgB,OAA3B;AACA,gBAAMS,cAAc,sBAAOT,QAAQU,WAAf,EAA4BC,MAA5B,CAAmC,KAAnC,CAApB;AACA,gBAAMC,YAAY,KAAK5B,KAAL,CAAW6B,QAAX,GAAsB,4BAAtB,GAAqD,aAAvE;AACA,gBAAMC,WAAWd,QAAQc,QAAR,KAAqB,IAArB,GAA4B,SAA5B,GAAwC,UAAzD;;AAGA,mBACI;AAAA;AAAA,kBAAI,WAAWF,SAAf;AACI,6BAAS,KAAK5B,KAAL,CAAW+B,OADxB;AAEI;AAAA;AAAA;AAAKf,4BAAQgB;AAAb,iBAFJ;AAGI;AAAA;AAAA;AACI;AAAA;AAAA;AAAIhB,gCAAQiB;AAAZ,qBADJ;AAAA;AACmCjB,4BAAQkB,UAD3C;AAAA;AACwDlB,4BAAQmB;AADhE,iBAHJ;AAMI;AAAA;AAAA;AAAKL;AAAL,iBANJ;AAOI;AAAA;AAAA;AAAKL;AAAL,iBAPJ;AAQI;AAAA;AAAA;AAAKT,4BAAQoB;AAAb;AARJ,aADJ;AAYH;;;;;;kBAGUrC,e","file":"students.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport ArchivesHead from \"../archive_head\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport { Table } from \"reactstrap\";\nimport { StudentSidebarPane } from \"./sidebar_panes\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeStudentsQuery(year) {\n    return graphql.query(`\n    {\n      students(archived: true, year_archived: ${year}) {\n        id\n        category\n        id_number\n        college\n        family_name\n        first_name\n        middle_name\n        nickname\n        nationality\n        birth_date\n        sex\n        archived_at\n        archiver\n        institution {\n          name\n        }\n      }\n    }\n    `);\n}\n\nclass StudentArchives extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeYear : moment().year(),\n            students : null,\n            activeStudentId : null,\n        };\n\n        this.performQuery = this.performQuery.bind(this);\n        this.setActiveYear = this.setActiveYear.bind(this);\n        this.refreshStudents = this.refreshStudents.bind(this);\n        this.setActiveStudent = this.setActiveStudent.bind(this);\n\n        this.performQuery(this.state.activeYear);\n    }\n\n    performQuery(year) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeStudentsQuery(year)\n            .then(result => this.setState({\n                students : result.students,\n            }))\n            .catch(error => {\n                this.props.setSidebarContent(null);\n                this.setState({\n                    error : error,\n                });\n            });\n    }\n\n    setActiveStudent(student) {\n        this.setState({\n            activeStudentId : student.id,\n        });\n\n\n        this.props.setSidebarContent(<StudentSidebarPane student={student}\n                                                         onRestoreSuccess={this.refreshStudents}/>);\n    }\n\n    refreshStudents() {\n        this.setActiveYear(this.state.activeYear);\n    }\n\n    setActiveYear(year) {\n        this.setState({\n            activeYear : year,\n            activeStudentId : null,\n            students : null //loading\n        });\n\n        this.props.setSidebarContent(null);\n        this.performQuery(year);\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.performQuery(this.state.activeYear)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <ArchivesHead setActiveYear={this.setActiveYear}\n                              activeYear={this.state.activeYear}>Student Archives</ArchivesHead>\n                <StudentArchivesTable students={this.state.students}\n                                      activeYear={this.state.activeYear}\n                                      setSidebarContent={this.props.setSidebarContent}\n                                      activeStudentId={this.state.activeStudentId}\n                                      setActiveStudent={this.setActiveStudent}/>\n            </div>\n        );\n    }\n}\n\nclass StudentArchivesTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There were no archived students in {this.props.activeYear}.</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.students === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.students.length === 0) {\n            return this.emptyState();\n        }\n\n        const rows = this.props.students.map(student => {\n            return <StudentArchivesRow student={student}\n                                       key={student.id}\n                                       isActive={this.props.activeStudentId === student.id}\n                                       onClick={() => this.props.setActiveStudent(student)}/>;\n        });\n\n        return (\n            <Table striped\n                   hover>\n                <thead>\n                <tr>\n                    <th>ID Number</th>\n                    <th>Name</th>\n                    <th>Category</th>\n                    <th>Archive Date</th>\n                    <th>Archived By</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nclass StudentArchivesRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const archiveDate = moment(student.archived_at).format(\"LLL\");\n        const className = this.props.isActive ? \"bg-dlsu-lighter text-white\" : \"table-light\";\n        const category = student.category === \"IN\" ? \"Inbound\" : \"Outbound\";\n\n\n        return (\n            <tr className={className}\n                onClick={this.props.onClick}>\n                <td>{student.id_number}</td>\n                <td>\n                    <b>{student.family_name}</b>, {student.first_name} {student.middle_name}\n                </td>\n                <td>{category}</td>\n                <td>{archiveDate}</td>\n                <td>{student.archiver}</td>\n            </tr>\n        );\n    }\n}\n\nexport default StudentArchives;"]}