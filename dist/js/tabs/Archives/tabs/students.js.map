{"version":3,"sources":["../../../../../js/tabs/Archives/tabs/students.js"],"names":["fetchStudents","year","onResult","query","then","StudentArchives","props","state","activeYear","students","activeStudentId","setActiveYear","bind","setActiveStudent","setState","result","student","id","setSidebarContent","StudentArchivesTable","emptyState","length","rows","map","StudentArchivesRow","archiveDate","archived_at","format","className","isActive","onClick","id_number","family_name","first_name","middle_name","archiver"],"mappings":"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","file":"students.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport ArchivesHead from \"../archive_head\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport { Table } from \"reactstrap\";\nimport { StudentSidebarPane } from \"./sidebar_panes\";\n\n\nfunction fetchStudents(year, onResult) {\n    graphql.query(`\n    {\n      students(archived: true, year_archived: ${year}) {\n        id\n        category\n        id_number\n        college\n        family_name\n        first_name\n        middle_name\n        nickname\n        nationality\n        birth_date\n        sex\n        archived_at\n        archiver\n        institution {\n          name\n        }\n      }\n    }\n    `).then(onResult);\n}\n\nclass StudentArchives extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeYear : moment().year(),\n            students : null,\n            activeStudentId : null,\n        };\n\n        this.setActiveYear = this.setActiveYear.bind(this);\n        this.setActiveStudent = this.setActiveStudent.bind(this);\n\n        fetchStudents(this.state.activeYear, result => {\n            this.setState({\n                students : result.students,\n            });\n        });\n    }\n\n    setActiveStudent(student) {\n        this.setState({\n            activeStudentId : student.id,\n        });\n\n\n        this.props.setSidebarContent(<StudentSidebarPane student={student}/>);\n    }\n\n    setActiveYear(year) {\n        this.setState({\n            activeYear : year,\n            activeStudentId : null,\n            students : null //loading\n        });\n\n        this.props.setSidebarContent(null);\n\n        fetchStudents(year, result => {\n            this.setState({\n                students : result.students,\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <ArchivesHead setActiveYear={this.setActiveYear}\n                              activeYear={this.state.activeYear}>Student Archives</ArchivesHead>\n                <StudentArchivesTable students={this.state.students}\n                                      activeYear={this.state.activeYear}\n                                      setSidebarContent={this.props.setSidebarContent}\n                                      activeStudentId={this.state.activeStudentId}\n                                      setActiveStudent={this.setActiveStudent}/>\n            </div>\n        );\n    }\n}\n\nclass StudentArchivesTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There were no archived students in {this.props.activeYear}.</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.students === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.students.length === 0) {\n            return this.emptyState();\n        }\n\n        const rows = this.props.students.map(student => {\n            return <StudentArchivesRow student={student}\n                                       key={student.id}\n                                       isActive={this.props.activeStudentId === student.id}\n                                       onClick={() => this.props.setActiveStudent(student)}/>;\n        });\n\n        return (\n            <Table striped\n                   hover>\n                <thead>\n                <tr>\n                    <th>ID Number</th>\n                    <th>Name</th>\n                    <th>Archive Date</th>\n                    <th>Archived By</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nclass StudentArchivesRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const archiveDate = moment(student.archived_at).format(\"LLL\");\n        const className = this.props.isActive ? \"bg-dlsu-lighter text-white\" : null;\n\n\n        return (\n            <tr className={className}\n                onClick={this.props.onClick}>\n                <td>{student.id_number}</td>\n                <td>\n                    <b>{student.family_name}</b>, {student.first_name} {student.middle_name}\n                </td>\n                <td>{archiveDate}</td>\n                <td>{student.archiver}</td>\n            </tr>\n        );\n    }\n}\n\nexport default StudentArchives;"]}