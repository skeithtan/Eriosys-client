{"version":3,"sources":["../../../../../js/tabs/Archives/tabs/sidebar_panes.js"],"names":["studentIsFetched","student","home_address","undefined","institutionIsFetched","institution","address","StudentSidebarPane","props","state","restoreStudentIsShowing","fetchStudent","bind","toggleRestoreStudent","id","studentId","error","setState","then","Object","assign","result","catch","toString","fullName","first_name","middle_name","family_name","isFetched","pageBody","onRestoreSuccess","InstitutionSidebarPane","restoreInstitutionIsShowing","toggleRestoreInstitution","name"],"mappings":"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","file":"sidebar_panes.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport {\n    RestoreInstitutionModal,\n    RestoreStudentModal,\n} from \"./modals\";\n\nimport {\n    ContactDetails as StudentContactDetails,\n    StudentDetails,\n    UniversityDetails,\n    makeStudentOverviewQuery,\n} from \"../../Students/tabs/overview\";\n\nimport {\n    StudentContact,\n    StudentDetailOverview,\n    StudentUniversity,\n} from \"../../Students/student_detail_overview\";\n\nimport {\n    ContactDetails as InstitutionContactDetails,\n    fetchInstitution,\n    InstitutionDetails,\n} from \"../../Institutions/tabs/overview\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction studentIsFetched(student) {\n    return student.home_address !== undefined;\n}\n\nfunction institutionIsFetched(institution) {\n    return institution.address !== undefined;\n}\n\nclass StudentSidebarPane extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            restoreStudentIsShowing : false,\n            student : props.student,\n        };\n\n        this.fetchStudent = this.fetchStudent.bind(this);\n        this.toggleRestoreStudent = this.toggleRestoreStudent.bind(this);\n\n        if (!studentIsFetched(props.student)) {\n            this.fetchStudent(props.student.id);\n        }\n    }\n\n    fetchStudent(studentId) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeStudentOverviewQuery(studentId)\n            .then(result => {\n                Object.assign(this.state.student, result.student);\n                this.setState({\n                    student : this.state.student,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    toggleRestoreStudent() {\n        this.setState({\n            restoreStudentIsShowing : !this.state.restoreStudentIsShowing,\n        });\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState({\n            student : props.student,\n        });\n\n        if (!studentIsFetched(props.student)) {\n            this.fetchStudent(props.student.id);\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.fetchStudent(this.state.student.id)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        const student = this.state.student;\n        const fullName = `${student.first_name} ${student.middle_name} ${student.family_name}`;\n        const isFetched = studentIsFetched(student);\n\n        let pageBody;\n\n        if (isFetched) {\n            pageBody = (\n                <div className=\"page-body\">\n                    <StudentDetails sidebar\n                                    archived\n                                    toggleRestoreStudent={this.toggleRestoreStudent}\n                                    student={student}/>\n                    <StudentContactDetails sidebar\n                                           student={student}/>\n                    <UniversityDetails sidebar\n                                       student={student}/>\n                    <RestoreStudentModal student={student}\n                                         toggle={this.toggleRestoreStudent}\n                                         onRestoreSuccess={this.props.onRestoreSuccess}\n                                         isOpen={this.state.restoreStudentIsShowing}/>\n                </div>\n            );\n        } else {\n            pageBody = <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"p-0 h-100 d-flex flex-column\">\n                <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                    <div className=\"mr-auto\">\n                        <h5 className=\"mb-0\">{fullName}</h5>\n                    </div>\n                </div>\n\n                {pageBody}\n            </div>\n        );\n    }\n}\n\nclass InstitutionSidebarPane extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            restoreInstitutionIsShowing : false,\n            institution : props.institution,\n        };\n\n        if (!institutionIsFetched(props.institution)) {\n            fetchInstitution(props.institution.id, result => {\n                const institution = result.institution;\n\n                //Copy results to existing institution object so we won't have to fetch next time\n                Object.assign(props.institution, institution);\n                this.setState({\n                    institution : institution,\n                });\n            });\n        }\n\n        this.toggleRestoreInstitution = this.toggleRestoreInstitution.bind(this);\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState({\n            institution : props.institution,\n        });\n\n        if (!institutionIsFetched(props.institution)) {\n            fetchInstitution(props.institution.id, result => {\n                const institution = result.institution;\n\n                //Copy results to existing institution object so we won't have to fetch next time\n                Object.assign(props.institution, institution);\n                this.setState({\n                    institution : institution,\n                });\n            });\n        }\n    }\n\n    toggleRestoreInstitution() {\n        this.setState({\n            restoreInstitutionIsShowing : !this.state.restoreInstitutionIsShowing,\n        });\n    }\n\n    render() {\n        const institution = this.state.institution;\n        const isFetched = institutionIsFetched(institution);\n\n        let pageBody;\n\n        if (isFetched) {\n            pageBody = (\n                <div className=\"page-body\">\n                    <InstitutionDetails sidebar\n                                        archived\n                                        toggleRestoreInstitution={this.toggleRestoreInstitution}\n                                        institution={institution}/>\n                    <InstitutionContactDetails sidebar\n                                               institution={institution}/>\n                    <RestoreInstitutionModal institution={institution}\n                                             toggle={this.toggleRestoreInstitution}\n                                             onRestoreSuccess={this.props.onRestoreSuccess}\n                                             isOpen={this.state.restoreInstitutionIsShowing}/>\n                </div>\n            );\n        } else {\n            pageBody = <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"p-0 h-100 d-flex flex-column\">\n                <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                    <div className=\"mr-auto\">\n                        <h5 className=\"mb-0\">{institution.name}</h5>\n                    </div>\n                </div>\n\n                {pageBody}\n            </div>\n        );\n    }\n}\n\n\nexport {\n    StudentSidebarPane,\n    InstitutionSidebarPane,\n};"]}