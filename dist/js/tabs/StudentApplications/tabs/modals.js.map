{"version":3,"sources":["../../../../../js/tabs/StudentApplications/tabs/modals.js"],"names":["DeployApplicantModal","props","state","form","default_units","total_units_enrolled","getFormErrors","bind","fieldName","value","event","target","setState","isValidIntegerValidator","isValid","isNaN","parseInt","fieldValue","errorMessage","isPositiveIntegerValidator","name","characterLimit","customValidators","formHasErrors","fieldErrors","length","fieldError","isOpen","toggle","getChangeHandler","AcceptApplicantModal"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport validateForm from \"../../../form_validator\";\nimport {\n    Button,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n} from \"reactstrap\";\n\n\nclass DeployApplicantModal extends Component {\n    constructor(props) {\n        super(props);\n\n\n        this.state = {\n            form : {\n                default_units : \"\",\n                total_units_enrolled : \"\",\n            },\n        };\n\n        this.getFormErrors = this.getFormErrors.bind(this);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    getFormErrors() {\n        const isValidIntegerValidator = {\n            isValid : fieldValue => !isNaN(parseInt(fieldValue)),\n            errorMessage : fieldValue => `${fieldValue} must be a valid integer`,\n        };\n\n        const isPositiveIntegerValidator = {\n            isValid : fieldValue => parseInt(fieldValue) > 0,\n            errorMessage : fieldValue => `${fieldValue} must be greater than 0.`,\n        };\n\n        return validateForm([\n            {\n                name : \"Default units\",\n                characterLimit : null,\n                value : this.state.form.default_units,\n                customValidators : [isValidIntegerValidator, isPositiveIntegerValidator],\n            },\n            {\n                name : \"Total units enrolled\",\n                characterLimit : null,\n                value : this.state.form.total_units_enrolled,\n                customValidators : [isValidIntegerValidator, isPositiveIntegerValidator],\n            },\n        ]);\n    }\n\n    render() {\n\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    Deploy Student\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <FormGroup>\n                            <Label>Default Units</Label>\n                            <Input placeholder=\"Default Units\"\n                                   onChange={this.getChangeHandler(\"default_units\")}\n                                   valid={isValid(\"Default units\")}\n                                   value={this.state.form.default_units}/>\n                            <FormFeedback>{fieldError(\"Default units\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Total Units Enrolled</Label>\n                            <Input placeholder=\"Total Units Enrolled\"\n                                   onChange={this.getChangeHandler(\"total_units_enrolled\")}\n                                   valid={isValid(\"Total units enrolled\")}\n                                   value={this.state.form.total_units_enrolled}/>\n                            <FormFeedback>{fieldError(\"Total units enrolled\")}</FormFeedback>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={formHasErrors}>\n                        Deploy Student\n                    </Button>\n                </ModalFooter>\n\n            </Modal>\n        );\n    }\n}\n\nclass AcceptApplicantModal extends Component {\n    constructor(props) {\n        super(props);\n\n\n        this.state = {\n            form : {\n                total_units_enrolled : \"\",\n            },\n        };\n\n        this.getFormErrors = this.getFormErrors.bind(this);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    getFormErrors() {\n        const isValidIntegerValidator = {\n            isValid : fieldValue => !isNaN(parseInt(fieldValue)),\n            errorMessage : fieldValue => `${fieldValue} must be a valid integer`,\n        };\n\n        const isPositiveIntegerValidator = {\n            isValid : fieldValue => parseInt(fieldValue) > 0,\n            errorMessage : fieldValue => `${fieldValue} must be greater than 0.`,\n        };\n\n        return validateForm([\n            {\n                name : \"Total units enrolled\",\n                characterLimit : null,\n                value : this.state.form.total_units_enrolled,\n                customValidators : [isValidIntegerValidator, isPositiveIntegerValidator],\n            },\n        ]);\n    }\n\n    render() {\n\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    Deploy Student\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <FormGroup>\n                            <Label>Total Units Enrolled</Label>\n                            <Input placeholder=\"Total Units Enrolled\"\n                                   onChange={this.getChangeHandler(\"total_units_enrolled\")}\n                                   valid={isValid(\"Total units enrolled\")}\n                                   value={this.state.form.total_units_enrolled}/>\n                            <FormFeedback>{fieldError(\"Total units enrolled\")}</FormFeedback>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={formHasErrors}>\n                        Accept Student\n                    </Button>\n                </ModalFooter>\n\n            </Modal>\n        );\n    }\n}\n\n\nexport {\n    DeployApplicantModal,\n    AcceptApplicantModal,\n};"]}