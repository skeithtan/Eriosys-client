{"version":3,"sources":["../../../../js/tabs/StudentApplications/student_applications.js"],"names":["tabs","name","image","activeImage","makeOutboundApplicationsQuery","query","makeInboundApplicationsQuery","StudentApplications","props","state","activeCategory","activeTab","applicants","activeApplicant","errors","setApplicants","bind","setActiveTab","setActiveCategory","getApplicantsByCategory","setActiveApplicant","fetchInboundApplications","fetchOutboundApplications","error","setState","then","console","log","result","inbound_student_programs","catch","outbound_student_programs","tabName","tab","category","filteredApplicants","forEach","applicant","is_requirements_complete","push","toString","StudentApplicationsList","StudentApplicationsListHead","StudentApplicationsListTable","getStudentsByFamilyNameInitials","emptyState","student","familyNameInitials","map","family_name","filter","value","index","self","indexOf","sort","a","b","categorizedByInitial","categorizedApplicants","initial","studentInitial","length","sections","familyNameInitial","StudentApplicationsListSection","rows","isActive","id","id_number","first_name","middle_name","title"],"mappings":"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","file":"student_applications.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../graphql\";\nimport {\n    Button,\n    Input,\n} from \"reactstrap\";\nimport LoadingSpinner from \"../../components/loading\";\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n} from \"../../components/section\";\nimport TabBar from \"../../components/tab_bar\";\nimport ErrorState from \"../../components/error_state\";\n\n\nconst tabs = [\n    {\n        name : \"Inbound\",\n        image : \"./images/inboundgrey.png\",\n        activeImage : \"./images/inboundgreen.png\",\n    },\n    {\n        name : \"Outbound\",\n        image : \"./images/airplanegrey.png\",\n        activeImage : \"./images/airplanegreen.png\",\n    },\n];\n\nfunction makeOutboundApplicationsQuery() {\n    return graphql.query(`\n    {\n        outbound_student_programs {\n            id\n            student {\n                id\n                id_number\n                first_name\n                middle_name\n                family_name\n            }\n            is_requirements_complete\n        }\n    }\n    `);\n}\n\nfunction makeInboundApplicationsQuery() {\n    return graphql.query(`\n    {\n        inbound_student_programs {\n            id\n            student {\n                id\n                id_number\n                first_name\n                middle_name\n                family_name\n            }\n            is_requirements_complete\n        }\n    }\n    `);\n}\n\nclass StudentApplications extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeCategory : \"Incomplete\",\n            activeTab : tabs[0],\n            applicants : null,\n            activeApplicant : null,\n            errors : null,\n        };\n\n        this.setApplicants = this.setApplicants.bind(this);\n        this.setActiveTab = this.setActiveTab.bind(this);\n        this.setActiveCategory = this.setActiveCategory.bind(this);\n        this.getApplicantsByCategory = this.getApplicantsByCategory.bind(this);\n        this.setActiveApplicant = this.setActiveApplicant.bind(this);\n        this.fetchInboundApplications = this.fetchInboundApplications.bind(this);\n        this.fetchOutboundApplications = this.fetchOutboundApplications.bind(this);\n\n        this.setApplicants(this.state.activeTab.name);\n    }\n\n    fetchInboundApplications() {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeInboundApplicationsQuery()\n            .then(result => {\n                console.log(result.inbound_student_programs);\n                this.setState({\n                    applicants : result.inbound_student_programs,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    fetchOutboundApplications() {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeOutboundApplicationsQuery()\n            .then(result => this.setState({\n                applicants : result.outbound_student_programs,\n            }))\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    setApplicants(tabName) {\n        if (tabName === \"Inbound\") {\n            this.fetchInboundApplications();\n        } else {\n            this.fetchOutboundApplications();\n        }\n    }\n\n    setActiveTab(tab) {\n        this.setState({\n            activeTab : tab,\n            activeApplicant : null,\n            applicants : null,\n        });\n\n        this.setApplicants(tab.name);\n    }\n\n    setActiveCategory(category) {\n        this.setState({\n            activeCategory : category,\n        });\n\n        this.getApplicantsByCategory(this.state.applicants);\n    }\n\n    getApplicantsByCategory(applicants) {\n        if (applicants === null) {\n            return null;\n        }\n\n        const filteredApplicants = [];\n\n        applicants.forEach(applicant => {\n            if (this.state.activeCategory === \"Incomplete\") {\n                if (!applicant.is_requirements_complete) {\n                    filteredApplicants.push(applicant);\n                }\n            } else {\n                if (applicant.is_requirements_complete) {\n                    filteredApplicants.push(applicant);\n                }\n            }\n        });\n\n        return filteredApplicants;\n    }\n\n    setActiveApplicant(applicant) {\n        this.setState({\n            activeApplicant : applicant,\n        });\n    }\n\n    // TODO: refreshing the applicants and at the same time conforming to the activeCategory\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRefreshButtonClick={() => this.setApplicants(this.state.activeTab.name)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        const applicants = this.getApplicantsByCategory(this.state.applicants);\n\n        return (\n            <div className=\"container-fluid d-flex flex-row p-0 h-100\">\n                <StudentApplicationsList activeCategory={this.state.activeCategory}\n                                         setActiveCategory={this.setActiveCategory}\n                                         applicants={applicants}\n                                         activeApplicant={this.state.activeApplicant}\n                                         setActiveApplicant={this.setActiveApplicant}\n                                         tabs={tabs}\n                                         activeTab={this.state.activeTab}\n                                         setActiveTab={this.setActiveTab}/>\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsList extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"sidebar h-100\">\n                <StudentApplicationsListHead activeCategory={this.props.activeCategory}\n                                             setActiveCategory={this.props.setActiveCategory}/>\n                <StudentApplicationsListTable activeCategory={this.props.activeCategory}\n                                              applicants={this.props.applicants}\n                                              activeApplicant={this.props.activeApplicant}\n                                              setActiveApplicant={this.props.setActiveApplicant}/>\n                <TabBar tabs={this.props.tabs}\n                        activeTab={this.props.activeTab}\n                        setActiveTab={this.props.setActiveTab}/>\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsListHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <div className=\"btn-group\"\n                         role=\"group\">\n                        <Button outline\n                                color=\"success\"\n                                size=\"sm\"\n                                onClick={() => this.props.setActiveCategory(\"Incomplete\")}\n                                active={this.props.activeCategory === \"Incomplete\"}>Incomplete</Button>\n                        <Button outline\n                                color=\"success\"\n                                size=\"sm\"\n                                onClick={() => this.props.setActiveCategory(\"Complete\")}\n                                active={this.props.activeCategory === \"Complete\"}>Complete</Button>\n                    </div>\n                    <Button outline\n                            color=\"success\"\n                            className=\"ml-auto\"\n                            size=\"sm\">Add Applicant</Button>\n                </div>\n                <h4 className=\"page-head-title\">{this.props.activeCategory} Applications</h4>\n                <Input type=\"search\"\n                       placeholder=\"search\"\n                       className=\"search-input\"/>\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsListTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.getStudentsByFamilyNameInitials = this.getStudentsByFamilyNameInitials.bind(this);\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    getStudentsByFamilyNameInitials() {\n        if (this.props.applicants === null) {\n            return null;\n        }\n\n        const applicants = [];\n\n        this.props.applicants.forEach(applicant => {\n            applicants.push(applicant.student);\n        });\n\n        //Get first letter\n        let familyNameInitials = applicants.map(student => student.family_name[0]);\n\n        //Get uniques only\n        familyNameInitials = familyNameInitials.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Sort alphabetically\n        familyNameInitials = familyNameInitials.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let categorizedByInitial = [];\n\n        // Categorize by family name initial\n        familyNameInitials.forEach(initial => {\n            let categorizedApplicants = [];\n            categorizedByInitial.push({\n                initial : initial,\n                applicants : categorizedApplicants,\n            });\n\n            applicants.forEach(applicant => {\n                const studentInitial = applicant.family_name[0];\n\n                if (studentInitial === initial) {\n                    categorizedApplicants.push(applicant);\n                }\n            });\n\n        });\n        return categorizedByInitial;\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There are no {this.props.activeCategory} applicants.</h4>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.applicants === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.applicants.length === 0) {\n            return this.emptyState();\n        }\n\n        const familyNameInitials = this.getStudentsByFamilyNameInitials();\n\n        const sections = familyNameInitials.map((familyNameInitial, index) => {\n            return <StudentApplicationsListSection key={index}\n                                                   title={familyNameInitial.initial}\n                                                   activeApplicant={this.props.activeApplicant}\n                                                   applicants={familyNameInitial.applicants}\n                                                   setActiveApplicant={this.props.setActiveApplicant}/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                {sections}\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsListSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const rows = this.props.applicants.map((applicant, index) => {\n            let isActive = false;\n\n            if (this.props.activeApplicant !== null) {\n                isActive = this.props.activeApplicant.id.toString() === applicant.id.toString();\n            }\n\n            const setActiveApplicant = () => this.props.setActiveApplicant(applicant);\n\n            return (\n                <SectionRow selectable\n                            onClick={setActiveApplicant}\n                            active={isActive}\n                            key={index}>\n                    <small className=\"d-block\">{applicant.id_number}</small>\n                    <b>{applicant.family_name}</b>, {applicant.first_name} {applicant.middle_name}\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section>\n                <SectionTitle>{this.props.title}</SectionTitle>\n                <SectionTable>\n                    {rows}\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default StudentApplications;"]}