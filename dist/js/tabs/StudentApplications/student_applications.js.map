{"version":3,"sources":["../../../../js/tabs/StudentApplications/student_applications.js"],"names":["tabs","name","image","activeImage","makeOutboundApplicationsQuery","query","makeInboundApplicationsQuery","StudentApplications","props","state","activeCategory","activeTab","applicants","activeApplicant","errors","addStudentIsShowing","setApplicants","bind","setActiveTab","setActiveCategory","getApplicantsByCategory","setActiveApplicant","fetchInboundApplications","fetchOutboundApplications","toggleStudentModal","error","setState","then","result","inbound_student_programs","catch","outbound_student_programs","tabName","tab","category","filteredApplicants","forEach","applicant","is_requirements_complete","push","toString","refresh","StudentApplicationsList","searchKeyword","setSearchKeyword","searchString","StudentApplicationsListHead","event","target","value","StudentApplicationsListTable","getFilteredStudents","getStudentsByFamilyNameInitials","emptyState","students","map","student","familyNameInitials","family_name","filter","index","self","indexOf","sort","a","b","categorizedByInitial","categorizedApplicants","initial","studentInitial","toLowerCase","filteredStudents","fullName","first_name","middle_name","includes","id_number","id","length","sections","familyNameInitial","collapsed","filtered","StudentApplicationsListSection","rows","isActive","isSearching","title"],"mappings":"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","file":"student_applications.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../graphql\";\nimport ApplicationDetail from \"./application_detail\";\nimport { StudentFormModal } from \"../Students/modals\";\nimport {\n    Button,\n    Input,\n} from \"reactstrap\";\nimport LoadingSpinner from \"../../components/loading\";\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n} from \"../../components/section\";\nimport TabBar from \"../../components/tab_bar\";\nimport ErrorState from \"../../components/error_state\";\n\n\nconst tabs = [\n    {\n        name : \"Inbound\",\n        image : \"./images/inboundgrey.png\",\n        activeImage : \"./images/inboundgreen.png\",\n    },\n    {\n        name : \"Outbound\",\n        image : \"./images/airplanegrey.png\",\n        activeImage : \"./images/airplanegreen.png\",\n    },\n];\n\nfunction makeOutboundApplicationsQuery() {\n    return graphql.query(`\n    {\n        outbound_student_programs(deployed:false) {\n            id\n            student {\n                id\n                id_number\n                first_name\n                middle_name\n                family_name\n            }\n            is_requirements_complete\n        }\n    }\n    `);\n}\n\nfunction makeInboundApplicationsQuery() {\n    return graphql.query(`\n    {\n        inbound_student_programs(accepted:false) {\n            id\n            student {\n                id\n                id_number\n                first_name\n                middle_name\n                family_name\n            }\n            is_requirements_complete\n        }\n    }\n    `);\n}\n\nclass StudentApplications extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeCategory : \"Incomplete\",\n            activeTab : tabs[0],\n            applicants : null,\n            activeApplicant : null,\n            errors : null,\n            addStudentIsShowing : false,\n        };\n\n        this.setApplicants = this.setApplicants.bind(this);\n        this.setActiveTab = this.setActiveTab.bind(this);\n        this.setActiveCategory = this.setActiveCategory.bind(this);\n        this.getApplicantsByCategory = this.getApplicantsByCategory.bind(this);\n        this.setActiveApplicant = this.setActiveApplicant.bind(this);\n        this.fetchInboundApplications = this.fetchInboundApplications.bind(this);\n        this.fetchOutboundApplications = this.fetchOutboundApplications.bind(this);\n        this.toggleStudentModal = this.toggleStudentModal.bind(this);\n\n        this.fetchInboundApplications();\n    }\n\n    fetchInboundApplications() {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeInboundApplicationsQuery()\n            .then(result => {\n                this.setState({\n                    applicants : result.inbound_student_programs,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    fetchOutboundApplications() {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeOutboundApplicationsQuery()\n            .then(result => this.setState({\n                applicants : result.outbound_student_programs,\n            }))\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    setApplicants(tabName) {\n        this.setState({\n            applicants : null,\n            activeApplicant : null,\n        });\n\n        if (tabName === \"Inbound\") {\n            this.fetchInboundApplications();\n        } else {\n            this.fetchOutboundApplications();\n        }\n    }\n\n    setActiveTab(tab) {\n        this.setState({\n            activeTab : tab,\n            activeApplicant : null,\n            applicants : null,\n        });\n\n        this.setApplicants(tab.name);\n    }\n\n    setActiveCategory(category) {\n        this.setState({\n            activeCategory : category,\n            activeApplicant : null,\n        });\n\n        this.getApplicantsByCategory(this.state.applicants);\n    }\n\n    getApplicantsByCategory(applicants) {\n        if (applicants === null) {\n            return null;\n        }\n\n        const filteredApplicants = [];\n\n        applicants.forEach(applicant => {\n            if (this.state.activeCategory === \"Incomplete\") {\n                if (!applicant.is_requirements_complete) {\n                    filteredApplicants.push(applicant);\n                }\n            } else {\n                if (applicant.is_requirements_complete) {\n                    filteredApplicants.push(applicant);\n                }\n            }\n        });\n\n        return filteredApplicants;\n    }\n\n    setActiveApplicant(applicant) {\n        this.setState({\n            activeApplicant : applicant,\n        });\n    }\n\n    toggleStudentModal() {\n        this.setState({\n            addStudentIsShowing : !this.state.addStudentIsShowing,\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRefreshButtonClick={() => this.setApplicants(this.state.activeTab.name)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        const applicants = this.getApplicantsByCategory(this.state.applicants);\n\n        const refresh = () => this.setApplicants(this.state.activeTab.name);\n\n        return (\n            <div className=\"container-fluid d-flex flex-row p-0 h-100\">\n                <StudentApplicationsList activeCategory={this.state.activeCategory}\n                                         setActiveCategory={this.setActiveCategory}\n                                         applicants={applicants}\n                                         activeApplicant={this.state.activeApplicant}\n                                         setActiveApplicant={this.setActiveApplicant}\n                                         tabs={tabs}\n                                         activeTab={this.state.activeTab}\n                                         setActiveTab={this.setActiveTab}\n                                         toggleStudentModal={this.toggleStudentModal}/>\n\n                <ApplicationDetail student={this.state.activeApplicant}\n                                   inbound={this.state.activeTab.name === \"Inbound\"}\n                                   refreshStudents={refresh}/>\n\n                <StudentFormModal applicant\n                                  isOpen={this.state.addStudentIsShowing}\n                                  refresh={refresh}\n                                  toggle={this.toggleStudentModal}/>\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchKeyword : null,\n        };\n\n        this.setSearchKeyword = this.setSearchKeyword.bind(this);\n\n    }\n\n    setSearchKeyword(searchString) {\n        //If the string is empty, that means the user isn't searching at all\n        const searchKeyword = searchString === \"\" ? null : searchString;\n        this.setState({\n            searchKeyword : searchKeyword,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"sidebar h-100\">\n                <StudentApplicationsListHead activeCategory={this.props.activeCategory}\n                                             setSearchKeyword={this.setSearchKeyword}\n                                             setActiveCategory={this.props.setActiveCategory}\n                                             toggleStudentModal={this.props.toggleStudentModal}/>\n                <StudentApplicationsListTable activeCategory={this.props.activeCategory}\n                                              applicants={this.props.applicants}\n                                              searchKeyword={this.state.searchKeyword}\n                                              activeApplicant={this.props.activeApplicant}\n                                              setActiveApplicant={this.props.setActiveApplicant}/>\n                <TabBar tabs={this.props.tabs}\n                        activeTab={this.props.activeTab}\n                        setActiveTab={this.props.setActiveTab}/>\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsListHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <div className=\"btn-group\"\n                         role=\"group\">\n                        <Button outline\n                                color=\"success\"\n                                size=\"sm\"\n                                onClick={() => this.props.setActiveCategory(\"Incomplete\")}\n                                active={this.props.activeCategory === \"Incomplete\"}>Incomplete</Button>\n                        <Button outline\n                                color=\"success\"\n                                size=\"sm\"\n                                onClick={() => this.props.setActiveCategory(\"Complete\")}\n                                active={this.props.activeCategory === \"Complete\"}>Complete</Button>\n                    </div>\n                    <Button outline\n                            color=\"success\"\n                            className=\"ml-auto\"\n                            size=\"sm\"\n                            onClick={this.props.toggleStudentModal}>Add</Button>\n                </div>\n                <h4 className=\"page-head-title\">{this.props.activeCategory} Applications</h4>\n                <Input type=\"search\"\n                       placeholder=\"search\"\n                       onChange={event => this.props.setSearchKeyword(event.target.value)}\n                       className=\"search-input\"/>\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsListTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.getFilteredStudents = this.getFilteredStudents.bind(this);\n        this.getStudentsByFamilyNameInitials = this.getStudentsByFamilyNameInitials.bind(this);\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    getStudentsByFamilyNameInitials() {\n        if (this.props.applicants === null) {\n            return null;\n        }\n\n        const students = this.props.applicants.map(applicant => {\n            return applicant.student;\n        });\n\n\n        //Get first letter\n        let familyNameInitials = students.map(student => {\n            return student.family_name[0];\n        });\n\n        //Get uniques only\n        familyNameInitials = familyNameInitials.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Sort alphabetically\n        familyNameInitials = familyNameInitials.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let categorizedByInitial = [];\n\n        // Categorize by family name initial\n        familyNameInitials.forEach(initial => {\n            let categorizedApplicants = [];\n            categorizedByInitial.push({\n                initial : initial,\n                applicants : categorizedApplicants,\n            });\n\n            students.forEach(applicant => {\n                const studentInitial = applicant.family_name[0];\n\n                if (studentInitial === initial) {\n                    categorizedApplicants.push(applicant);\n                }\n            });\n\n        });\n        return categorizedByInitial;\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There are no {this.props.activeCategory} applicants.</h4>\n            </div>\n        );\n    }\n\n    getFilteredStudents() {\n        if (this.props.applicants === null) {\n            return null;\n        }\n\n        if (this.props.searchKeyword === null) {\n            return this.props.applicants;\n        }\n\n        const searchKeyword = this.props.searchKeyword.toLowerCase();\n\n        const filteredStudents = this.props.applicants.filter(applicant => {\n            const student = applicant.student;\n            const fullName = `${student.first_name} ${student.middle_name} ${student.family_name}`.toLowerCase();\n            return fullName.includes(searchKeyword) || student.id_number.includes(searchKeyword);\n        });\n\n        return filteredStudents.map(applicant => applicant.student.id);\n    }\n\n    render() {\n        if (this.props.applicants === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.applicants.length === 0) {\n            return this.emptyState();\n        }\n\n        const familyNameInitials = this.getStudentsByFamilyNameInitials();\n\n        const sections = familyNameInitials.map((familyNameInitial, index) => {\n            const students = familyNameInitial.applicants;\n\n            let collapsed = false;\n\n            if (this.props.searchKeyword !== null) {\n                collapsed = true;\n                const filtered = this.getFilteredStudents();\n\n                students.forEach(student => {\n                    if (filtered.includes(student.id)) {\n                        collapsed = false;\n                    }\n                });\n            }\n\n            return <StudentApplicationsListSection key={index}\n                                                   collapsed={collapsed}\n                                                   filtered={this.getFilteredStudents()}\n                                                   title={familyNameInitial.initial}\n                                                   isSearching={this.props.searchKeyword !== null}\n                                                   activeApplicant={this.props.activeApplicant}\n                                                   applicants={familyNameInitial.applicants}\n                                                   setActiveApplicant={this.props.setActiveApplicant}/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                {sections}\n            </div>\n        );\n    }\n}\n\nclass StudentApplicationsListSection extends Component {\n    render() {\n        const rows = this.props.applicants.map((applicant, index) => {\n            let isActive = false;\n\n            if (this.props.activeApplicant !== null) {\n                isActive = this.props.activeApplicant.id.toString() === applicant.id.toString();\n            }\n\n            const setActiveApplicant = () => this.props.setActiveApplicant(applicant);\n\n            let collapsed = false;\n            if (this.props.isSearching) {\n                collapsed = !this.props.filtered.includes(applicant.id);\n            }\n\n            return (\n                <SectionRow selectable\n                            collapsed={collapsed}\n                            onClick={setActiveApplicant}\n                            active={isActive}\n                            key={index}>\n                    <small className=\"d-block\">{applicant.id_number}</small>\n                    <b>{applicant.family_name}</b>, {applicant.first_name} {applicant.middle_name}\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section collapsed={this.props.collapsed}>\n                <SectionTitle>{this.props.title}</SectionTitle>\n                <SectionTable>\n                    {rows}\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default StudentApplications;"]}