{"version":3,"sources":["../../../../js/tabs/InboundPrograms/inbound_program_list.js"],"names":["ProgramList","props","state","programFormModalIsShowing","toggleProgramFormModal","bind","setState","activeYear","activeTerm","setActiveTerm","programList","activeProgram","setActiveProgram","refreshPrograms","ProgramListHead","onTermChange","event","target","value","year","ProgramListTable","emptyState","programs","length","rows","map","program","index","isActive","id","name"],"mappings":"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","file":"inbound_program_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Button,\n    Form,\n    Input,\n} from \"reactstrap\";\nimport {\n    SectionRow,\n    SectionRowContent,\n} from \"../../components/section\";\nimport LoadingSpinner from \"../../components/loading\";\nimport {\n    ProgramFormModal,\n} from \"../Institutions/modals\";\n\nclass ProgramList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            programFormModalIsShowing : false,\n        };\n\n        this.toggleProgramFormModal = this.toggleProgramFormModal.bind(this);\n    }\n\n    toggleProgramFormModal() {\n        this.setState({\n            programFormModalIsShowing : !this.state.programFormModalIsShowing,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"programs-page-pane d-flex flex-column\">\n                <ProgramListHead year={ this.props.activeYear }\n                                 activeTerm={ this.props.activeTerm }\n                                 setActiveTerm={ this.props.setActiveTerm }\n                                 toggleProgramFormModal={ this.toggleProgramFormModal }/>\n                <ProgramListTable programs={ this.props.programList }\n                                  activeTerm={ this.props.activeTerm }\n                                  activeProgram={ this.props.activeProgram }\n                                  setActiveProgram={ this.props.setActiveProgram }/>\n\n                <ProgramFormModal toggle={ this.toggleProgramFormModal }\n                                  refresh={ this.props.refreshPrograms }\n                                  isOpen={ this.state.programFormModalIsShowing }\n                                  institution={ null }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramListHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onTermChange = this.onTermChange.bind(this);\n    }\n\n    onTermChange(event) {\n        this.props.setActiveTerm(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head d-flex flex-column align-items-center\">\n                <div className=\"page-head-controls w-100\">\n                    <Form inline className=\"w-100\">\n                        <Input type=\"select\" value={ this.props.activeTerm }\n                               className=\"mr-auto btn-sm btn-outline-success select-sm\"\n                               onChange={ this.onTermChange }>\n                            <option value=\"1\">Term 1</option>\n                            <option value=\"2\">Term 2</option>\n                            <option value=\"3\">Term 3</option>\n                        </Input>\n                        <Button outline\n                                color=\"success\"\n                                size=\"sm\"\n                                className=\"ml-auto\"\n                                onClick={ this.props.toggleProgramFormModal }>Add Inbound Program</Button>\n                    </Form>\n                </div>\n                <div className=\"d-flex flex-row w-100 mb-2 align-items-center\">\n                    <div className=\"mr-auto\">\n                        <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                        <div className=\"d-flex flex-row\">\n                            <h4 className=\"page-head-title mb-0\">\n                                { this.props.year } - { this.props.year + 1 }\n                            </h4>\n                        </div>\n                    </div>\n                </div>\n                <Input type=\"search\" placeholder=\"Search\" className=\"search-input\"/>\n            </div>\n        );\n    }\n}\n\nclass ProgramListTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h5>There are no programs for Term { this.props.activeTerm }</h5>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.programs === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        const programs = this.props.programs;\n\n        const rows = programs.map((program, index) => {\n            let isActive = false;\n\n            if (this.props.activeProgram !== null) {\n                isActive = this.props.activeProgram.id === program.id;\n            }\n\n            const setActiveProgram = () => this.props.setActiveProgram(program);\n\n            return (\n                <SectionRow selectable key={ index } onClick={ setActiveProgram } active={ isActive }>\n                    <SectionRowContent>{ program.name }</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <div className=\"page-body\">\n                { rows }\n            </div>\n        );\n    }\n}\n\nexport default ProgramList;"]}