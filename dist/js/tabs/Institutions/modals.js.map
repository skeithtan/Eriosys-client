{"version":3,"sources":["../../../../js/tabs/Institutions/modals.js"],"names":["InstitutionFormModal","props","state","form","name","country","address","website","contact_person_email","contact_person_name","contact_person_number","agreement","resetForm","bind","getFormErrors","getChangeHandler","submitAddInstitutionForm","submitEditInstitutionForm","edit","Object","assign","institution","setState","characterLimit","value","customValidators","isValid","fieldValue","length","test","errorMessage","fieldName","dismissToast","title","message","post","url","serverURL","data","beforeSend","success","refresh","onAddInstitution","error","console","log","response","toggle","ajax","method","id","done","fail","event","target","formHasErrors","fieldErrors","countries","map","index","unshift","fieldError","isOpen","MemorandumFormModal","setupUploadCare","submitAddMemorandumForm","submitEditMemorandumForm","memorandumToggle","componentWillReceiveProps","newProps","category","memorandum_file","date_effective","date_expiration","college_initiator","linkages","memorandum","undefined","widget","uploadcare","SingleWidget","setMemorandumFile","link","onChange","file","info","cdnUrl","memorandumToBeAdded","toggleMemorandumToBeAdded","JSON","stringify","contentType","onEditSuccess","entries","linkageCode","linkage","linkageString","isSelected","includes","className","onClick","splice","indexOf","push","collegeInitiators","colleges","college","uploadcarePublicKey","ProgramFormModal","academic_year","terms_available","is_graduate","requirement_deadline","academic_years","onTermClick","overviewForm","submitAddProgramForm","getOverviewFormErrors","result","academicYear","academic_year_start","terms_duration","toString","inbound","term","isGraduate","termButtons","academicYears","setIsGraduate","formBody","shouldShowFormFooter","noAcademicYearsState"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport authorizeXHR from \"../../authorization\";\nimport { makeInfoToast } from \"../../dismissable_toast_maker\";\nimport validateForm from \"../../form_validator\";\nimport settings from \"../../settings\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\n\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    InputGroup,\n    InputGroupAddon,\n    FormFeedback,\n    ListGroup,\n    ListGroupItem,\n    ButtonGroup,\n} from \"reactstrap\";\nimport { fetchYears } from \"../OutboundPrograms/outbound_programs\";\nimport LoadingSpinner from \"../../components/loading\";\n\n\nclass InstitutionFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                name : \"\",\n                country : \"\",\n                address : \"\",\n                website : \"\",\n                contact_person_email : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                agreement : \"B\",\n            },\n        };\n\n        this.resetForm = this.resetForm.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n\n        this.submitAddInstitutionForm = this.submitAddInstitutionForm.bind(this);\n        this.submitEditInstitutionForm = this.submitEditInstitutionForm.bind(this);\n\n        if (this.props.edit) {\n            // Copy the object, do not equate, otherwise the object changes along with the form.\n            Object.assign(this.state.form, props.institution);\n        }\n    }\n\n    resetForm() {\n        this.setState({\n            form : {\n                name : \"\",\n                country : \"\",\n                address : \"\",\n                website : \"\",\n                contact_person_email : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                agreement : \"B\",\n            },\n        });\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Name\",\n                characterLimit : 64,\n                value : this.state.form.name,\n            },\n            {\n                name : \"Country\",\n                value : this.state.form.country,\n            },\n            {\n                name : \"Address\",\n                characterLimit : 256,\n                value : this.state.form.address,\n            },\n            {\n                name : \"Website\",\n                characterLimit : 256,\n                value : this.state.form.website,\n            },\n            {\n                name : \"Contact person name\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_name,\n            },\n            {\n                name : \"Contact person number\",\n                characterLimit : 64,\n                value : this.state.form.contact_person_number,\n            },\n            {\n                name : \"Contact person email\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_email,\n                customValidators : [{\n                    // isValid checks if the form value is a valid email through this messy regex.\n                    // It also lets blank values pass because it's an optional field\n                    isValid : fieldValue => fieldValue.length === 0 || /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(fieldValue),\n                    errorMessage : fieldName => `${fieldName} must be a valid email.`,\n                }],\n            },\n        ]);\n    }\n\n    submitAddInstitutionForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new institution...\",\n        });\n        $.post({\n            url : `${settings.serverURL}/institutions/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : institution => {\n                dismissToast();\n                this.resetForm();\n                this.props.refresh();\n                this.props.onAddInstitution(institution);\n                iziToast.success({\n                    title : \"Success\",\n                    message : `Successfully added institution ${this.state.form.name}.`,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to add institution\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditInstitutionForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing institution...\",\n        });\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/institutions/${this.state.form.id}/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n        }).done(() => {\n            this.resetForm();\n            dismissToast();\n            this.props.refresh();\n            iziToast.success({\n                title : \"Success\",\n                message : \"Successfully modified institution\",\n            });\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to edit institution\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n\n        const countries = settings.countries.map((name, index) =>\n            <option key={index}>{name}</option>,\n        );\n\n        countries.unshift(<option key=\"X\"\n                                  value=\"\">Select a country</option>);\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    {this.props.edit ? `Edit ${this.state.form.name}` : \"Add an Institution\"}\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n\n                        <h5 className=\"mb-3\">Institution Details</h5>\n                        <FormGroup>\n                            <Label>Name</Label>\n                            <Input placeholder=\"Institution Name\"\n                                   onChange={this.getChangeHandler(\"name\")}\n                                   valid={isValid(\"Name\")}\n                                   value={this.state.form.name}/>\n                            <FormFeedback>{fieldError(\"Name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Country</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"country\")}\n                                   valid={isValid(\"Country\")}\n                                   value={this.state.form.country}>\n                                {countries}\n                            </Input>\n                            <FormFeedback>{fieldError(\"Country\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Address\"\n                                   onChange={this.getChangeHandler(\"address\")}\n                                   valid={isValid(\"Address\")}\n                                   value={this.state.form.address}/>\n                            <FormFeedback>{fieldError(\"Address\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Website</Label>\n                            <InputGroup>\n                                <InputGroupAddon>http://</InputGroupAddon>\n                                <Input placeholder=\"Website\"\n                                       onChange={this.getChangeHandler(\"website\")}\n                                       valid={isValid(\"Website\")}\n                                       value={this.state.form.website}/>\n                            </InputGroup>\n                            <Input type=\"hidden\"\n                                   value={this.state.form.website}\n                                   valid={isValid(\"Website\")}/>\n                            <FormFeedback><p>{fieldError(\"Website\")}</p></FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Agreement Type</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"agreement\")}\n                                   value={this.state.form.agreement}>\n                                <option value=\"B\">Bilateral</option>\n                                <option value=\"M\">Multilateral</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br/>\n\n                        <h5 className=\"mb-3\">Contact</h5>\n\n                        <FormGroup>\n                            <Label>Contact Person</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={this.getChangeHandler(\"contact_person_name\")}\n                                   valid={isValid(\"Contact person name\")}\n                                   value={this.state.form.contact_person_name}/>\n                            <FormFeedback>{fieldError(\"Contact person name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Email</Label>\n                            <Input type=\"email\"\n                                   placeholder=\"Email\"\n                                   onChange={this.getChangeHandler(\"contact_person_email\")}\n                                   valid={isValid(\"Contact person email\")}\n                                   value={this.state.form.contact_person_email}/>\n                            <FormFeedback>{fieldError(\"Contact person email\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Number</Label>\n                            <Input placeholder=\"Number\"\n                                   onChange={this.getChangeHandler(\"contact_person_number\")}\n                                   valid={isValid(\"Contact person number\")}\n                                   value={this.state.form.contact_person_number}/>\n                            <FormFeedback>{fieldError(\"Contact person number\")}</FormFeedback>\n                        </FormGroup>\n\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={this.props.edit ? this.submitEditInstitutionForm : this.submitAddInstitutionForm}\n                            disabled={formHasErrors}>\n                        {this.props.edit ? \"Save changes\" : \"Add\"}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass MemorandumFormModal extends Component {\n    constructor(props) {\n        super(props);\n        this.resetForm = this.resetForm.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.setupUploadCare = this.setupUploadCare.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddMemorandumForm = this.submitAddMemorandumForm.bind(this);\n        this.submitEditMemorandumForm = this.submitEditMemorandumForm.bind(this);\n        this.memorandumToggle = this.memorandumToggle.bind(this);\n\n        this.componentWillReceiveProps(props);\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.state = {\n            form : {\n                category : \"MOA\",\n                memorandum_file : \"\",\n                date_effective : \"\",\n                date_expiration : \"\",\n                college_initiator : \"\",\n                linkages : [],\n            },\n        };\n\n        if (newProps.memorandum !== undefined) {\n            Object.assign(this.state.form, newProps.memorandum);\n            this.state.form.category = newProps.memorandum.category === \"Agreement\" ? \"MOA\" : \"MOU\";\n            this.state.form.linkages = []; //Do not use prop linkage = make a new one.\n\n            Object.assign(this.state.form.linkages, newProps.memorandum.linkages);\n        }\n    }\n\n    resetForm() {\n        this.setState({\n            form : {\n                category : \"MOA\",\n                memorandum_file : \"\",\n                date_effective : \"\",\n                date_expiration : \"\",\n                college_initiator : \"\",\n                linkages : [],\n            },\n        });\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Date effective\",\n                characterLimit : null,\n                value : this.state.form.date_effective,\n            },\n            {\n                name : \"File\",\n                characterLimit : null,\n                value : this.state.form.memorandum_file,\n            },\n        ]);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n\n        };\n\n    }\n\n    setupUploadCare() {\n        const widget = uploadcare.SingleWidget(\"[role=uploadcare-uploader]\");\n        const form = this.state.form;\n        const setMemorandumFile = link => {\n            form.memorandum_file = link;\n            this.setState({\n                form : form,\n            });\n        };\n\n        widget.onChange(file => {\n            if (file) {\n                file.done(info => {\n                    setMemorandumFile(info.cdnUrl);\n                });\n            }\n        });\n    }\n\n    submitAddMemorandumForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new memorandum...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/institutions/${this.props.institution.id}/memorandums/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.resetForm();\n                this.props.refresh();\n                if (this.props.memorandumToBeAdded) {\n                    this.props.toggleMemorandumToBeAdded();\n                }\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully added memorandum\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to add memorandum\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditMemorandumForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing memorandum...\",\n        });\n\n        if (this.state.form.college_initiator === \"\") {\n            this.state.form.college_initiator = null;\n        }\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/memorandums/${this.state.form.id}/`,\n            // The array requires this to be JSON.\n            data : JSON.stringify(this.state.form),\n            contentType : \"application/json\",\n            beforeSend : authorizeXHR,\n            success : (response) => {\n                dismissToast();\n                this.resetForm();\n                const memorandum = response;\n                this.props.onEditSuccess(memorandum);\n                this.props.refresh();\n\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully modified memorandum\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to edit memorandum\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    memorandumToggle() {\n        this.props.toggle();\n        if (this.props.memorandumToBeAdded) {\n            this.props.toggleMemorandumToBeAdded();\n        }\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n\n        const linkages = Object.entries(settings.linkages).map(linkage => {\n            const linkageCode = linkage[0];\n            const linkageString = linkage[1];\n\n            const isSelected = this.state.form.linkages.includes(linkageCode);\n            const className = isSelected ? \"bg-dlsu-lighter text-white d-flex\" : \"d-flex\";\n\n            const onClick = () => {\n                const form = this.state.form;\n\n                if (isSelected) {\n                    const linkages = form.linkages;\n                    // Remove from linkages the selected linkage\n                    linkages.splice(linkages.indexOf(linkageCode), 1);\n                } else {\n                    form.linkages.push(linkageCode);\n                }\n\n                this.setState({\n                    form : form,\n                });\n            };\n\n\n            return <ListGroupItem key={linkageCode}\n                                  onClick={onClick}\n                                  className={className}>\n                <span className=\"mr-auto\">{linkageString}</span>\n                {isSelected && <h5 className=\"mb-0\">✓</h5>}\n            </ListGroupItem>;\n        });\n\n        let collegeInitiators = Object.entries(settings.colleges).map(college => {\n            return <option key={college[0]}\n                           value={college[0]}>{college[1]}</option>;\n        });\n\n        collegeInitiators.unshift(\n            <option key=\"null\"\n                    value={\"\"}>No college initiator</option>,\n        );\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.memorandumToggle}\n                   backdrop={true}\n                   onOpened={this.setupUploadCare}>\n                <ModalHeader toggle={this.memorandumToggle}>\n                    {this.props.edit ? \"Edit memorandum\" : `Add a memorandum to ${this.props.institution.name}`}\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <h5>Memorandum details</h5>\n                        <FormGroup>\n                            <Label>Category</Label>\n                            <Input type=\"select\"\n                                   value={this.state.form.category}\n                                   onChange={this.getChangeHandler(\"category\")}>\n                                <option value=\"MOA\">Memorandum of Agreement</option>\n                                <option value=\"MOU\">Memorandum of Understanding</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>File Link</Label>\n                            <Input type=\"hidden\"\n                                   role=\"uploadcare-uploader\"\n                                   name=\"content\"\n                                   data-public-key={settings.uploadcarePublicKey}\n                                   valid={isValid(\"File\")}/>\n                            <FormFeedback>{fieldError(\"File\")}</FormFeedback>\n                            {this.props.edit &&\n                            <small className=\"text-secondary\">To change memorandum file, upload a new file. Otherwise,\n                                leave this blank.</small>\n                            }\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Date Effective</Label>\n                            <Input type=\"date\"\n                                   value={this.state.form.date_effective}\n                                   onChange={this.getChangeHandler(\"date_effective\")}\n                                   valid={isValid(\"Date effective\")}/>\n                            <FormFeedback>{fieldError(\"Date effective\")}</FormFeedback>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Expiration Date</Label>\n                            <Input type=\"date\"\n                                   value={this.state.form.date_expiration}\n                                   onChange={this.getChangeHandler(\"date_expiration\")}/>\n                            <small className=\"text-secondary\">If the memorandum has no expiration date, leave this\n                                blank.\n                            </small>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>College Initiator</Label>\n                            <Input type=\"select\"\n                                   value={this.state.form.college_initiator}\n                                   onChange={this.getChangeHandler(\"college_initiator\")}>\n                                {collegeInitiators}\n                            </Input>\n                        </FormGroup>\n                        <br/>\n                        <h5>Linkages</h5>\n                        <small className=\"text-secondary mb-3 d-block\">Select all linkages that apply to this\n                            memorandum.\n                        </small>\n                        <ListGroup>\n                            {linkages}\n                        </ListGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={formHasErrors}\n                            onClick={this.props.edit ? this.submitEditMemorandumForm : this.submitAddMemorandumForm}>\n                        {this.props.edit ? \"Save changes\" : \"Add\"}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n}\n\nclass ProgramFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                institution : this.props.institution,\n                name : \"\",\n                linkage : \"SE\",\n                academic_year : \"\",\n                terms_available : [],\n                is_graduate : false,\n                requirement_deadline : \"\",\n            },\n            academic_years : null,\n        };\n\n        this.resetForm = this.resetForm.bind(this);\n        this.onTermClick = this.onTermClick.bind(this);\n        this.overviewForm = this.overviewForm.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddProgramForm = this.submitAddProgramForm.bind(this);\n        this.getOverviewFormErrors = this.getOverviewFormErrors.bind(this);\n\n        fetchYears(result => {\n            this.setState({\n                academic_years : result.academic_years.map(academicYear => academicYear.academic_year_start),\n            });\n        });\n    }\n\n    resetForm() {\n        this.setState({\n            form : {\n                institution : this.props.institution,\n                name : \"\",\n                linkage : \"SE\",\n                academic_year : \"\",\n                terms_available : [],\n                is_graduate : false,\n                requirement_deadline : \"\",\n            },\n        });\n    }\n\n    componentWillReceiveProps(props) {\n        this.state.form.institution = props.institution;\n\n        this.setState({\n            form : this.state.form,\n        });\n    }\n\n    getOverviewFormErrors() {\n\n        return validateForm([\n            {\n                name : \"Program name\",\n                characterLimit : 64,\n                value : this.state.form.name,\n            },\n            {\n                name : \"Academic year\",\n                characterLimit : null,\n                value : this.state.form.academic_year,\n            },\n            {\n                name : \"Terms available\",\n                characterLimit : null,\n                value : this.state.form.terms_duration.toString(),\n                customValidators : [{\n                    isValid : fieldValue => [1, 3].toString() !== fieldValue,\n                    errorMessage : fieldName => `${fieldName} must be consecutive`,\n                }],\n            },\n        ]);\n    }\n\n    submitAddProgramForm() {\n        let url = \"/programs/\";\n        if (this.props.inbound) {\n            url += \"inbound/\";\n        } else {\n            url += \"outbound/\";\n        }\n\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding program...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}${url}`,\n            data : JSON.stringify(this.state.form),\n            contentType : \"application/json\",\n            beforeSend : authorizeXHR,\n        }).done(() => {\n            dismissToast();\n            this.resetForm();\n            this.props.refresh();\n            iziToast.success({\n                title : \"Success\",\n                message : \"Successfully added program\",\n            });\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add memorandum\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    onTermClick(term) {\n        const index = this.state.form.terms_duration.indexOf(term);\n        if (index < 0) {\n            this.state.form.terms_duration.push(term);\n        } else {\n            this.state.form.terms_duration.splice(index, 1);\n        }\n\n        this.setState({\n            form : this.state.form,\n        });\n    }\n\n    setIsGraduate(isGraduate) {\n        this.state.form.is_graduate = isGraduate;\n        this.setState({\n            form : this.state.form,\n        });\n    }\n\n    static noAcademicYearsState() {\n        return (\n            <div className=\"loading-container p-5\">\n                <h4>There are no academic years yet.</h4>\n                <p>Define the academic years in the outbound programs tab.</p>\n            </div>\n        );\n    }\n\n    overviewForm(fieldErrors) {\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        const termButtons = [1, 2, 3].map(term =>\n            <Button outline\n                    color=\"success\"\n                    key={term}\n                    onClick={() => this.onTermClick(term)}\n                    active={this.state.form.terms_duration.includes(term)}>\n                {term}\n            </Button>,\n        );\n\n        const academicYears = this.state.academic_years.map(academicYear =>\n            <option key={academicYear}\n                    onClick={this.getChangeHandler(\"academic_year\")}\n                    value={academicYear}>{`${academicYear} - ${academicYear + 1}`}</option>,\n        );\n\n        academicYears.unshift(\n            <option key={0}\n                    onClick={this.getChangeHandler(\"academic_year\")}\n                    value={\"\"}>Select an academic year</option>,\n        );\n\n        return (\n            <ModalBody className=\"form\">\n                <Form>\n                    <FormGroup>\n                        <Label>Program Name</Label>\n                        <Input placeholder=\"Program Name\"\n                               onChange={this.getChangeHandler(\"name\")}\n                               valid={isValid(\"Program name\")}\n                               value={this.state.form.name}/>\n                        <FormFeedback>{fieldError(\"Program name\")}</FormFeedback>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <div className=\"d-block w-100\">\n                            <ButtonGroup>\n                                <Button outline\n                                        color=\"success\"\n                                        onClick={() => this.setIsGraduate(false)}\n                                        active={!this.state.form.is_graduate}>\n                                    Undergraduate program\n                                </Button>\n                                <Button outline\n                                        color=\"success\"\n                                        onClick={() => this.setIsGraduate(true)}\n                                        active={this.state.form.is_graduate}>\n                                    Graduate program\n                                </Button>\n                            </ButtonGroup>\n                        </div>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label>Academic Years</Label>\n                        <Input type=\"select\"\n                               onChange={this.getChangeHandler(\"academic_year\")}\n                               valid={isValid(\"Academic year\")}\n                               value={this.state.form.academic_year}>\n                            {academicYears}\n                        </Input>\n                        <FormFeedback>{fieldError(\"Academic year\")}</FormFeedback>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label>Terms Available</Label>\n                        <div className=\"d-block w-100\">\n                            <ButtonGroup>\n                                {termButtons}\n                            </ButtonGroup>\n                        </div>\n                        <div className=\"invalid-feedback d-block\">{fieldError(\"Terms available\")}</div>\n                    </FormGroup>\n\n                </Form>\n            </ModalBody>\n        );\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = this.getOverviewFormErrors();\n\n        let formBody;\n        let shouldShowFormFooter = false;\n\n        if (this.state.academic_years === null) {\n            formBody = <LoadingSpinner/>;\n        } else if (this.state.academic_years.length === 0) {\n            formBody = ProgramFormModal.noAcademicYearsState();\n        } else {\n            formBody = this.overviewForm(fieldErrors);\n            shouldShowFormFooter = true;\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    Add a program\n                </ModalHeader>\n                {formBody}\n                {shouldShowFormFooter &&\n                <ModalFooter>\n                   <Button outline\n                                color=\"success\"\n                                onClick={this.props.edit ? this.submitEditInstitutionForm : this.submitAddProgramForm}\n                                disabled={formHasErrors}>\n                            {this.props.edit ? \"Save changes\" : \"Add\"}\n                        </Button>\n                </ModalFooter>\n                }\n            </Modal>\n\n        );\n    }\n}\n\nexport {\n    InstitutionFormModal,\n    MemorandumFormModal,\n    ProgramFormModal,\n};"]}