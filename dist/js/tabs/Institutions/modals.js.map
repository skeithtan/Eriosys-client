{"version":3,"sources":["../../../../js/tabs/Institutions/modals.js"],"names":["InstitutionFormModal","props","state","form","name","country","address","website","contact_person_email","contact_person_name","contact_person_number","agreement","getFormErrors","bind","getChangeHandler","submitAddInstitutionForm","submitEditInstitutionForm","edit","Object","assign","institution","characterLimit","value","customValidators","isValid","fieldValue","length","test","errorMessage","fieldName","dismissToast","title","message","post","url","serverURL","data","beforeSend","success","refresh","onAddInstitution","error","console","log","response","toggle","ajax","method","id","done","fail","event","target","setState","formHasErrors","fieldErrors","countries","map","index","unshift","fieldError","isOpen","ArchiveInstitutionModal","confirmArchive","icon","progressBar","MemorandumFormModal","setupUploadCare","submitAddMemorandumForm","submitEditMemorandumForm","memorandumToggle","componentWillReceiveProps","newProps","category","memorandum_file","date_effective","date_expiration","college_initiator","linkages","memorandum","undefined","widget","uploadcare","SingleWidget","setMemorandumFile","link","onChange","file","info","cdnUrl","memorandumToBeAdded","toggleMemorandumToBeAdded","JSON","stringify","contentType","onEditSuccess","entries","linkageCode","linkage","linkageString","isSelected","includes","className","onClick","splice","indexOf","push","collegeInitiators","colleges","college","uploadcarePublicKey","ArchiveMemorandumModal","onDeleteSuccess","ProgramFormModal","academic_year","terms_available","is_graduate","requirement_deadline","academic_years","formBody","onTermClick","submitAddProgramForm","result","academicYear","academic_year_start","toString","term","isGraduate","termButtons","academicYears","setIsGraduate","shouldShowFormFooter","noAcademicYearsState"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport authorizeXHR from \"../../authorization\";\nimport makeInfoToast from \"../../dismissable_toast_maker\";\nimport validateForm from \"../../form_validator\";\nimport settings from \"../../settings\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\n\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    InputGroup,\n    InputGroupAddon,\n    FormFeedback,\n    ListGroup,\n    ListGroupItem,\n    ButtonGroup,\n} from \"reactstrap\";\nimport { fetchYears } from \"../OutboundPrograms/outbound_programs\";\nimport LoadingSpinner from \"../../components/loading\";\n\n\nclass InstitutionFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                name : \"\",\n                country : \"\",\n                address : \"\",\n                website : \"\",\n                contact_person_email : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                agreement : \"B\",\n            },\n        };\n\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n\n        this.submitAddInstitutionForm = this.submitAddInstitutionForm.bind(this);\n        this.submitEditInstitutionForm = this.submitEditInstitutionForm.bind(this);\n\n        if (this.props.edit) {\n            // Copy the object, do not equate, otherwise the object changes along with the form.\n            Object.assign(this.state.form, props.institution);\n        }\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Name\",\n                characterLimit : 64,\n                value : this.state.form.name,\n            },\n            {\n                name : \"Country\",\n                value : this.state.form.country,\n            },\n            {\n                name : \"Address\",\n                characterLimit : 256,\n                value : this.state.form.address,\n            },\n            {\n                name : \"Website\",\n                characterLimit : 256,\n                value : this.state.form.website,\n            },\n            {\n                name : \"Contact person name\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_name,\n            },\n            {\n                name : \"Contact person number\",\n                characterLimit : 64,\n                value : this.state.form.contact_person_number,\n            },\n            {\n                name : \"Contact person email\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_email,\n                customValidators : [{\n                    // isValid checks if the form value is a valid email through this messy regex.\n                    // It also lets blank values pass because it's an optional field\n                    isValid : fieldValue => fieldValue.length === 0 || /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(fieldValue),\n                    errorMessage : fieldName => `${fieldName} must be a valid email.`,\n                }],\n            },\n        ]);\n    }\n\n    submitAddInstitutionForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new institution...\",\n        });\n        $.post({\n            url : `${settings.serverURL}/institutions/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : institution => {\n                dismissToast();\n                this.props.refresh();\n                this.props.onAddInstitution(institution);\n                iziToast.success({\n                    title : \"Success\",\n                    message : `Successfully added institution ${this.state.form.name}.`,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to add institution\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditInstitutionForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing institution...\",\n        });\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/institutions/${this.state.form.id}/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n        }).done(() => {\n            dismissToast();\n            this.props.refresh();\n            iziToast.success({\n                title : \"Success\",\n                message : \"Successfully modified institution\",\n            });\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to edit institution\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    render() {\n        const {formHasErrors, fieldErrors} = this.getFormErrors();\n\n        const countries = settings.countries.map((name, index) =>\n            <option key={ index }>{ name }</option>,\n        );\n\n        countries.unshift(<option key=\"X\"\n                                  value=\"\">Select a country</option>);\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    { this.props.edit ? `Edit ${this.state.form.name}` : \"Add an Institution\" }\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n\n                        <h5 className=\"mb-3\">Institution Details</h5>\n                        <FormGroup>\n                            <Label>Name</Label>\n                            <Input placeholder=\"Institution Name\"\n                                   onChange={ this.getChangeHandler(\"name\") }\n                                   valid={ isValid(\"Name\") }\n                                   defaultValue={ this.state.form.name }/>\n                            <FormFeedback>{ fieldError(\"Name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Country</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"country\") }\n                                   valid={ isValid(\"Country\") }\n                                   defaultValue={ this.state.form.country }>\n                                { countries }\n                            </Input>\n                            <FormFeedback>{ fieldError(\"Country\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Address\"\n                                   onChange={ this.getChangeHandler(\"address\") }\n                                   valid={ isValid(\"Address\") }\n                                   defaultValue={ this.state.form.address }/>\n                            <FormFeedback>{ fieldError(\"Address\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Website</Label>\n                            <InputGroup>\n                                <InputGroupAddon>http://</InputGroupAddon>\n                                <Input placeholder=\"Website\"\n                                       onChange={ this.getChangeHandler(\"website\") }\n                                       valid={ isValid(\"Website\") }\n                                       defaultValue={ this.state.form.website }/>\n                            </InputGroup>\n                            <Input type=\"hidden\"\n                                   value={ this.state.form.website }\n                                   valid={ isValid(\"Website\") }/>\n                            <FormFeedback><p>{ fieldError(\"Website\") }</p></FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Agreement Type</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"agreement\") }\n                                   defaultValue={ this.state.form.agreement }>\n                                <option value=\"B\">Bilateral</option>\n                                <option value=\"M\">Multilateral</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br/>\n\n                        <h5 className=\"mb-3\">Contact</h5>\n\n                        <FormGroup>\n                            <Label>Contact Person</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={ this.getChangeHandler(\"contact_person_name\") }\n                                   valid={ isValid(\"Contact person name\") }\n                                   defaultValue={ this.state.form.contact_person_name }/>\n                            <FormFeedback>{ fieldError(\"Contact person name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Email</Label>\n                            <Input type=\"email\"\n                                   placeholder=\"Email\"\n                                   onChange={ this.getChangeHandler(\"contact_person_email\") }\n                                   valid={ isValid(\"Contact person email\") }\n                                   defaultValue={ this.state.form.contact_person_email }/>\n                            <FormFeedback>{ fieldError(\"Contact person email\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Number</Label>\n                            <Input placeholder=\"Number\"\n                                   onChange={ this.getChangeHandler(\"contact_person_number\") }\n                                   valid={ isValid(\"Contact person number\") }\n                                   defaultValue={ this.state.form.contact_person_number }/>\n                            <FormFeedback>{ fieldError(\"Contact person number\") }</FormFeedback>\n                        </FormGroup>\n\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={ this.props.edit ? this.submitEditInstitutionForm : this.submitAddInstitutionForm }\n                            disabled={ formHasErrors }>\n                        { this.props.edit ? \"Save changes\" : \"Add\" }\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass ArchiveInstitutionModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmArchive = this.confirmArchive.bind(this);\n    }\n\n    confirmArchive() {\n        const dismissToast = makeInfoToast({\n            title : \"Deleting\",\n            message : \"Deleting institution...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/institutions/${this.props.institution.id}/`,\n            method : \"DELETE\",\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                iziToast.success({\n                    icon : \"\",\n                    title : \"Success\",\n                    message : \"Institution archived\",\n                    progressBar : false,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to archive institution\",\n                    progressBar : false,\n                });\n            },\n        });\n        this.props.toggle();\n    }\n\n    render() {\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }\n                   id=\"archive-institution-modal\">\n                <ModalHeader className=\"text-yellow\">\n                    Are you sure you want to archive { this.props.institution.name }?\n                </ModalHeader>\n                <ModalFooter>\n                    <Button outline\n                            color=\"warning\"\n                            onClick={ this.confirmArchive }>Confirm Archive</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass MemorandumFormModal extends Component {\n    constructor(props) {\n        super(props);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.setupUploadCare = this.setupUploadCare.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddMemorandumForm = this.submitAddMemorandumForm.bind(this);\n        this.submitEditMemorandumForm = this.submitEditMemorandumForm.bind(this);\n        this.memorandumToggle = this.memorandumToggle.bind(this);\n\n        this.componentWillReceiveProps(props);\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.state = {\n            form : {\n                category : \"MOA\",\n                memorandum_file : \"\",\n                date_effective : \"\",\n                date_expiration : \"\",\n                college_initiator : \"\",\n                linkages : [],\n            },\n        };\n\n        if (newProps.memorandum !== undefined) {\n            Object.assign(this.state.form, newProps.memorandum);\n            this.state.form.category = newProps.memorandum.category === \"Agreement\" ? \"MOA\" : \"MOU\";\n            this.state.form.linkages = []; //Do not use prop linkage = make a new one.\n\n            Object.assign(this.state.form.linkages, newProps.memorandum.linkages);\n        }\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Date effective\",\n                characterLimit : null,\n                value : this.state.form.date_effective,\n            },\n            {\n                name : \"File\",\n                characterLimit : null,\n                value : this.state.form.memorandum_file,\n            },\n        ]);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n\n        };\n\n    }\n\n    setupUploadCare() {\n        const widget = uploadcare.SingleWidget(\"[role=uploadcare-uploader]\");\n        const form = this.state.form;\n        const setMemorandumFile = link => {\n            form.memorandum_file = link;\n            this.setState({\n                form : form,\n            });\n        };\n\n        widget.onChange(file => {\n            if (file) {\n                file.done(info => {\n                    setMemorandumFile(info.cdnUrl);\n                });\n            }\n        });\n    }\n\n    submitAddMemorandumForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new memorandum...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/institutions/${this.props.institution.id}/memorandums/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                if (this.props.memorandumToBeAdded) {\n                    this.props.toggleMemorandumToBeAdded();\n                }\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully added memorandum\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to add memorandum\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditMemorandumForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing memorandum...\",\n        });\n\n        if (this.state.form.college_initiator === \"\") {\n            this.state.form.college_initiator = null;\n        }\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/memorandums/${this.state.form.id}/`,\n            // The array requires this to be JSON.\n            data : JSON.stringify(this.state.form),\n            contentType : \"application/json\",\n            beforeSend : authorizeXHR,\n            success : (response) => {\n                dismissToast();\n                const memorandum = response;\n                this.props.onEditSuccess(memorandum);\n                this.props.refresh();\n\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully modified memorandum\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to edit memorandum\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    memorandumToggle() {\n        this.props.toggle();\n        if (this.props.memorandumToBeAdded) {\n            this.props.toggleMemorandumToBeAdded();\n        }\n    }\n\n    render() {\n        const {formHasErrors, fieldErrors} = this.getFormErrors();\n\n        const linkages = Object.entries(settings.linkages).map(linkage => {\n            const linkageCode = linkage[0];\n            const linkageString = linkage[1];\n\n            const isSelected = this.state.form.linkages.includes(linkageCode);\n            const className = isSelected ? \"bg-dlsu-lighter text-white d-flex\" : \"d-flex\";\n\n            const onClick = () => {\n                const form = this.state.form;\n\n                if (isSelected) {\n                    const linkages = form.linkages;\n                    // Remove from linkages the selected linkage\n                    linkages.splice(linkages.indexOf(linkageCode), 1);\n                } else {\n                    form.linkages.push(linkageCode);\n                }\n\n                this.setState({\n                    form : form,\n                });\n            };\n\n\n            return <ListGroupItem key={ linkageCode }\n                                  onClick={ onClick }\n                                  className={ className }>\n                <span className=\"mr-auto\">{ linkageString }</span>\n                { isSelected && <h5 className=\"mb-0\">✓</h5> }\n            </ListGroupItem>;\n        });\n\n        let collegeInitiators = Object.entries(settings.colleges).map(college => {\n            return <option key={ college[0] }\n                           value={ college[0] }>{ college[1] }</option>;\n        });\n\n        collegeInitiators.unshift(\n            <option key=\"null\"\n                    value={ \"\" }>No college initiator</option>,\n        );\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.memorandumToggle }\n                   backdrop={ true }\n                   onOpened={ this.setupUploadCare }>\n                <ModalHeader toggle={ this.memorandumToggle }>\n                    { this.props.edit ? \"Edit memorandum\" : `Add a memorandum to ${this.props.institution.name}` }\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <h5>Memorandum details</h5>\n                        <FormGroup>\n                            <Label>Category</Label>\n                            <Input type=\"select\"\n                                   defaultValue={ this.state.form.category }\n                                   onChange={ this.getChangeHandler(\"category\") }>\n                                <option value=\"MOA\">Memorandum of Agreement</option>\n                                <option value=\"MOU\">Memorandum of Understanding</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>File Link</Label>\n                            <Input type=\"hidden\"\n                                   role=\"uploadcare-uploader\"\n                                   name=\"content\"\n                                   data-public-key={ settings.uploadcarePublicKey }\n                                   valid={ isValid(\"File\") }/>\n                            <FormFeedback>{ fieldError(\"File\") }</FormFeedback>\n                            { this.props.edit &&\n                            <small className=\"text-secondary\">To change memorandum file, upload a new file. Otherwise,\n                                leave this blank.</small>\n                            }\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Date Effective</Label>\n                            <Input type=\"date\"\n                                   defaultValue={ this.state.form.date_effective }\n                                   onChange={ this.getChangeHandler(\"date_effective\") }\n                                   valid={ isValid(\"Date effective\") }/>\n                            <FormFeedback>{ fieldError(\"Date effective\") }</FormFeedback>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Expiration Date</Label>\n                            <Input type=\"date\"\n                                   defaultValue={ this.state.form.date_expiration }\n                                   onChange={ this.getChangeHandler(\"date_expiration\") }/>\n                            <small className=\"text-secondary\">If the memorandum has no expiration date, leave this\n                                blank.\n                            </small>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>College Initiator</Label>\n                            <Input type=\"select\"\n                                   defaultValue={ this.state.form.college_initiator }\n                                   onChange={ this.getChangeHandler(\"college_initiator\") }>\n                                { collegeInitiators }\n                            </Input>\n                        </FormGroup>\n                        <br/>\n                        <h5>Linkages</h5>\n                        <small className=\"text-secondary mb-3 d-block\">Select all linkages that apply to this\n                            memorandum.\n                        </small>\n                        <ListGroup>\n                            { linkages }\n                        </ListGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={ formHasErrors }\n                            onClick={ this.props.edit ? this.submitEditMemorandumForm : this.submitAddMemorandumForm }>\n                        { this.props.edit ? \"Save changes\" : \"Add\" }\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n}\n\nclass ArchiveMemorandumModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.confirmArchive = this.confirmArchive.bind(this);\n    }\n\n    confirmArchive() {\n        const dismissToast = makeInfoToast({\n            title : \"Archiving\",\n            message : \"Archiving memorandum...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/memorandums/${this.props.memorandum.id}`,\n            method : \"DELETE\",\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.onDeleteSuccess();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Memorandum archived\",\n                    progressBar : false,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to archive memorandum\",\n                    progressBar : false,\n                });\n            },\n        });\n        this.props.toggle();\n    }\n\n    render() {\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }\n                   id=\"archive-memorandum-modal\">\n                <ModalHeader toggle={ this.props.toggle }\n                             className=\"text-yellow\">Are you sure you want to archive this memorandum?</ModalHeader>\n                <ModalFooter>\n                    <Button outline\n                            color=\"warning\"\n                            id=\"archive-memorandum-modal-submit\"\n                            onClick={ this.confirmArchive }>Archive</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass ProgramFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                institution : this.props.institution,\n                name : \"\",\n                linkage : \"SE\",\n                academic_year : \"\",\n                terms_available : [],\n                is_graduate : false,\n                requirement_deadline : \"\",\n            },\n            academic_years : null,\n        };\n\n        this.formBody = this.formBody.bind(this);\n        this.onTermClick = this.onTermClick.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.submitAddProgramForm = this.submitAddProgramForm.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n\n        fetchYears(result => {\n            this.setState({\n                academic_years : result.academic_years.map(academicYear => academicYear.academic_year_start),\n            });\n        });\n    }\n\n    getFormErrors() {\n\n        return validateForm([\n            {\n                name : \"Program name\",\n                characterLimit : 64,\n                value : this.state.form.name,\n            },\n            {\n                name : \"Academic year\",\n                characterLimit : null,\n                value : this.state.form.academic_year,\n            },\n            {\n                name : \"Terms available\",\n                characterLimit : null,\n                value : this.state.form.terms_available.toString(),\n                customValidators : [{\n                    isValid : fieldValue => [1, 3].toString() !== fieldValue,\n                    errorMessage : fieldName => `${fieldName} must be consecutive`,\n                }],\n            },\n            {\n                name : \"Requirements deadline\",\n                characterLimit : null,\n                value : this.state.form.requirement_deadline,\n            },\n        ]);\n    }\n\n    submitAddProgramForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding program...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/programs/outbound/`,\n            data : JSON.stringify(this.state.form),\n            contentType : \"application/json\",\n            beforeSend : authorizeXHR,\n        }).done(() => {\n            dismissToast();\n            this.props.refresh();\n            iziToast.success({\n                title : \"Success\",\n                message : \"Successfully added memorandum\",\n            });\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add memorandum\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    onTermClick(term) {\n        const index = this.state.form.terms_available.indexOf(term);\n        if (index < 0) {\n            this.state.form.terms_available.push(term);\n        } else {\n            this.state.form.terms_available.splice(index, 1);\n        }\n\n        this.setState({\n            form : this.state.form,\n        });\n    }\n\n\n    setIsGraduate(isGraduate) {\n        this.state.form.is_graduate = isGraduate;\n        this.setState({\n            form : this.state.form,\n        });\n    }\n\n    static noAcademicYearsState() {\n        return (\n            <div className=\"loading-container p-5\">\n                <h4>There are no academic years yet.</h4>\n                <p>Define the academic years in the outbound programs tab.</p>\n            </div>\n        );\n    }\n\n    formBody(fieldErrors) {\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        const termButtons = [1, 2, 3].map(term =>\n            <Button outline\n                    color=\"success\"\n                    key={ term }\n                    onClick={ () => this.onTermClick(term) }\n                    active={ this.state.form.terms_available.includes(term) }>\n                { term }\n            </Button>,\n        );\n\n        const academicYears = this.state.academic_years.map(academicYear =>\n            <option key={ academicYear }\n                    onClick={ this.getChangeHandler(\"academic_year\") }\n                    value={ academicYear }>{ `${academicYear} - ${academicYear + 1}` }</option>,\n        );\n\n        academicYears.unshift(\n            <option key={ 0 }\n                    onClick={ this.getChangeHandler(\"academic_year\") }\n                    value={ \"\" }>Select an academic year</option>,\n        );\n\n        return (\n            <ModalBody className=\"form\">\n                <Form>\n                    <FormGroup>\n                        <Label>Program Name</Label>\n                        <Input placeholder=\"Program Name\"\n                               onChange={ this.getChangeHandler(\"name\") }\n                               valid={ isValid(\"Program name\") }\n                               defaultValue={ this.state.form.name }/>\n                        <FormFeedback>{ fieldError(\"Program name\") }</FormFeedback>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <div className=\"d-block w-100\">\n                            <ButtonGroup>\n                                <Button outline\n                                        color=\"success\"\n                                        onClick={ () => this.setIsGraduate(false) }\n                                        active={ !this.state.form.is_graduate }>\n                                    Undergraduate program\n                                </Button>\n                                <Button outline\n                                        color=\"success\"\n                                        onClick={ () => this.setIsGraduate(true) }\n                                        active={ this.state.form.is_graduate }>\n                                    Graduate program\n                                </Button>\n                            </ButtonGroup>\n                        </div>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label>Academic Years</Label>\n                        <Input type=\"select\"\n                               onChange={ this.getChangeHandler(\"academic_year\") }\n                               valid={ isValid(\"Academic year\") }\n                               defaultValue={ this.state.form.academic_year }>\n                            { academicYears }\n                        </Input>\n                        <FormFeedback>{ fieldError(\"Academic year\") }</FormFeedback>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label>Terms Available</Label>\n                        <div className=\"d-block w-100\">\n                            <ButtonGroup>\n                                { termButtons }\n                            </ButtonGroup>\n                        </div>\n                        <div className=\"invalid-feedback d-block\">{ fieldError(\"Terms available\") }</div>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label>Requirements Deadline</Label>\n                        <Input type=\"date\"\n                               defaultValue={ this.state.form.requirement_deadline }\n                               onChange={ this.getChangeHandler(\"requirement_deadline\") }\n                               valid={ isValid(\"Requirements deadline\") }/>\n                        <FormFeedback>{ fieldError(\"Requirements deadline\") }</FormFeedback>\n                    </FormGroup>\n\n\n                </Form>\n            </ModalBody>\n        );\n    }\n\n    render() {\n        const {formHasErrors, fieldErrors} = this.getFormErrors();\n\n        let formBody;\n        let shouldShowFormFooter = false;\n\n        if (this.state.academic_years === null) {\n            formBody = <LoadingSpinner/>;\n        } else if (this.state.academic_years.length === 0) {\n            formBody = ProgramFormModal.noAcademicYearsState();\n        } else {\n            formBody = this.formBody(fieldErrors);\n            shouldShowFormFooter = true;\n        }\n\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    Add a program\n                </ModalHeader>\n                { formBody }\n                { shouldShowFormFooter &&\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={ this.props.edit ? this.submitEditInstitutionForm : this.submitAddProgramForm }\n                            disabled={ formHasErrors }>\n                        { this.props.edit ? \"Save changes\" : \"Add\" }\n                    </Button>\n                </ModalFooter>\n                }\n            </Modal>\n\n        );\n    }\n}\n\nexport {\n    InstitutionFormModal,\n    ArchiveInstitutionModal,\n    MemorandumFormModal,\n    ArchiveMemorandumModal,\n    ProgramFormModal,\n};"]}