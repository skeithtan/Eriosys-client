{"version":3,"sources":["../../../../js/tabs/Institutions/modals.js"],"names":["InstitutionFormModal","props","state","form","name","country","address","website","contact_person_email","contact_person_name","contact_person_number","agreement","getFormErrors","bind","getChangeHandler","submitAddInstitutionForm","submitEditInstitutionForm","edit","Object","assign","institution","characterLimit","value","customValidators","isValid","fieldValue","length","test","errorMessage","fieldName","dismissToast","title","message","post","url","serverURL","data","beforeSend","success","refresh","error","console","log","response","toggle","ajax","method","id","event","target","setState","formHasErrors","fieldErrors","countries","map","index","unshift","fieldError","isOpen","ArchiveInstitutionModal","confirmArchive","icon","progressBar","MemorandumFormModal","setupUploadCare","submitAddMemorandumForm","submitEditMemorandumForm","componentWillReceiveProps","newProps","category","memorandum_file","date_effective","date_expiration","college_initiator","linkages","memorandum","undefined","widget","uploadcare","SingleWidget","setMemorandumFile","link","onChange","file","done","info","cdnUrl","JSON","stringify","contentType","onEditSuccess","entries","linkageCode","linkage","linkageString","isSelected","includes","className","onClick","splice","indexOf","push","collegeInitiators","colleges","college","uploadcarePublicKey","ArchiveMemorandumModal","onDeleteSuccess","ProgramFormModal"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport authorizeXHR from \"../../authorization\";\nimport makeInfoToast from \"../../dismissable_toast_maker\";\nimport validateForm from \"../../form_validator\";\nimport settings from \"../../settings\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\n\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    InputGroup,\n    InputGroupAddon,\n    FormFeedback,\n    ListGroup,\n    ListGroupItem,\n} from \"reactstrap\";\n\n\nclass InstitutionFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                name : \"\",\n                country : \"\",\n                address : \"\",\n                website : \"\",\n                contact_person_email : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                agreement : \"B\",\n            },\n        };\n\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n\n        this.submitAddInstitutionForm = this.submitAddInstitutionForm.bind(this);\n        this.submitEditInstitutionForm = this.submitEditInstitutionForm.bind(this);\n\n        if (this.props.edit) {\n            // Copy the object, do not equate, otherwise the object changes along with the form.\n            Object.assign(this.state.form, props.institution);\n        }\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Name\",\n                characterLimit : 64,\n                value : this.state.form.name,\n            },\n            {\n                name : \"Country\",\n                value : this.state.form.country,\n            },\n            {\n                name : \"Address\",\n                characterLimit : 256,\n                value : this.state.form.address,\n            },\n            {\n                name : \"Website\",\n                characterLimit : 256,\n                value : this.state.form.website,\n            },\n            {\n                name : \"Contact person name\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_name,\n            },\n            {\n                name : \"Contact person number\",\n                characterLimit : 64,\n                value : this.state.form.contact_person_number,\n            },\n            {\n                name : \"Contact person email\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_email,\n                customValidators : [{\n                    // isValid checks if the form value is a valid email through this messy regex.\n                    // It also lets blank values pass because it's an optional field\n                    isValid : fieldValue => fieldValue.length === 0 || /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(fieldValue),\n                    errorMessage : fieldName => `${fieldName} must be a valid email.`,\n                }],\n            },\n        ]);\n    }\n\n    submitAddInstitutionForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new institution...\",\n        });\n        $.post({\n            url : `${settings.serverURL}/institutions/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully added institution\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to add institution\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditInstitutionForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing institution...\",\n        });\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/institutions/${this.state.form.id}/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully modified institution\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to edit institution\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n\n        const countries = settings.countries.map((name, index) =>\n            <option key={index}>{name}</option>,\n        );\n\n        countries.unshift(<option value=\"\">Select a country</option>);\n\n        console.log(countries);\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    {this.props.edit ? `Edit ${this.state.form.name}` : \"Add an Institution\"}\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n\n                        <h5 className=\"mb-3\">Institution Details</h5>\n                        <FormGroup>\n                            <Label>Name</Label>\n                            <Input placeholder=\"Institution Name\"\n                                   onChange={this.getChangeHandler(\"name\")}\n                                   valid={isValid(\"Name\")}\n                                   defaultValue={this.state.form.name}/>\n                            <FormFeedback>{fieldError(\"Name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Country</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"country\")}\n                                   valid={isValid(\"Country\")}\n                                   defaultValue={this.state.form.country}>\n                                {countries}\n                            </Input>\n                            <FormFeedback>{fieldError(\"Country\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Address\"\n                                   onChange={this.getChangeHandler(\"address\")}\n                                   valid={isValid(\"Address\")}\n                                   defaultValue={this.state.form.address}/>\n                            <FormFeedback>{fieldError(\"Address\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Website</Label>\n                            <InputGroup>\n                                <InputGroupAddon>http://</InputGroupAddon>\n                                <Input placeholder=\"Website\"\n                                       onChange={this.getChangeHandler(\"website\")}\n                                       valid={isValid(\"Website\")}\n                                       defaultValue={this.state.form.website}/>\n                            </InputGroup>\n                            <Input type=\"hidden\"\n                                   value={this.state.form.website}\n                                   valid={isValid(\"Website\")}/>\n                            <FormFeedback><p>{fieldError(\"Website\")}</p></FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Agreement Type</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"agreement\")}\n                                   defaultValue={this.state.form.agreement}>\n                                <option value=\"B\">Bilateral</option>\n                                <option value=\"M\">Multilateral</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br/>\n\n                        <h5 className=\"mb-3\">Contact</h5>\n\n                        <FormGroup>\n                            <Label>Contact Person</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={this.getChangeHandler(\"contact_person_name\")}\n                                   valid={isValid(\"Contact person name\")}\n                                   defaultValue={this.state.form.contact_person_name}/>\n                            <FormFeedback>{fieldError(\"Contact person name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Email</Label>\n                            <Input type=\"email\"\n                                   placeholder=\"Email\"\n                                   onChange={this.getChangeHandler(\"contact_person_email\")}\n                                   valid={isValid(\"Contact person email\")}\n                                   defaultValue={this.state.form.contact_person_email}/>\n                            <FormFeedback>{fieldError(\"Contact person email\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Number</Label>\n                            <Input placeholder=\"Number\"\n                                   onChange={this.getChangeHandler(\"contact_person_number\")}\n                                   valid={isValid(\"Contact person number\")}\n                                   defaultValue={this.state.form.contact_person_number}/>\n                            <FormFeedback>{fieldError(\"Contact person number\")}</FormFeedback>\n                        </FormGroup>\n\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={this.props.edit ? this.submitEditInstitutionForm : this.submitAddInstitutionForm}\n                            disabled={formHasErrors}>\n                        {this.props.edit ? \"Save changes\" : \"Add\"}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass ArchiveInstitutionModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmArchive = this.confirmArchive.bind(this);\n    }\n\n    confirmArchive() {\n        const dismissToast = makeInfoToast({\n            title : \"Deleting\",\n            message : \"Deleting institution...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/institutions/${this.props.institution.id}/`,\n            method : \"DELETE\",\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                iziToast.success({\n                    icon : \"\",\n                    title : \"Success\",\n                    message : \"Institution archived\",\n                    progressBar : false,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to archive institution\",\n                    progressBar : false,\n                });\n            },\n        });\n        this.props.toggle();\n    }\n\n    render() {\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}\n                   id=\"archive-institution-modal\">\n                <ModalHeader className=\"text-yellow\">\n                    Are you sure you want to archive {this.props.institution.name}?\n                </ModalHeader>\n                <ModalFooter>\n                    <Button outline\n                            color=\"warning\"\n                            onClick={this.confirmArchive}>Confirm Archive</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass MemorandumFormModal extends Component {\n    constructor(props) {\n        super(props);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.setupUploadCare = this.setupUploadCare.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddMemorandumForm = this.submitAddMemorandumForm.bind(this);\n        this.submitEditMemorandumForm = this.submitEditMemorandumForm.bind(this);\n\n        this.componentWillReceiveProps(props);\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.state = {\n            form : {\n                category : \"MOA\",\n                memorandum_file : \"\",\n                date_effective : \"\",\n                date_expiration : \"\",\n                college_initiator : \"\",\n                linkages : [],\n            },\n        };\n\n        if (newProps.memorandum !== undefined) {\n            Object.assign(this.state.form, newProps.memorandum);\n            this.state.form.category = newProps.memorandum.category === \"Agreement\" ? \"MOA\" : \"MOU\";\n            this.state.form.linkages = []; //Do not use prop linkage = make a new one.\n\n            Object.assign(this.state.form.linkages, newProps.memorandum.linkages);\n        }\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Date effective\",\n                characterLimit : null,\n                value : this.state.form.date_effective,\n            },\n            {\n                name : \"File\",\n                characterLimit : null,\n                value : this.state.form.memorandum_file,\n            },\n        ]);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n\n        };\n\n    }\n\n    setupUploadCare() {\n        const widget = uploadcare.SingleWidget(\"[role=uploadcare-uploader]\");\n        const form = this.state.form;\n        const setMemorandumFile = link => {\n            form.memorandum_file = link;\n            this.setState({\n                form : form,\n            });\n        };\n\n        widget.onChange(file => {\n            if (file) {\n                file.done(info => {\n                    setMemorandumFile(info.cdnUrl);\n                });\n            }\n        });\n    }\n\n    submitAddMemorandumForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new memorandum...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/institutions/${this.props.institution.id}/memorandums/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully added memorandum\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to add memorandum\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditMemorandumForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing memorandum...\",\n        });\n\n        if (this.state.form.college_initiator === \"\") {\n            this.state.form.college_initiator = null;\n        }\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/memorandums/${this.state.form.id}/`,\n            // The array requires this to be JSON.\n            data : JSON.stringify(this.state.form),\n            contentType : \"application/json\",\n            beforeSend : authorizeXHR,\n            success : (response) => {\n                dismissToast();\n                const memorandum = response;\n                this.props.onEditSuccess(memorandum);\n                this.props.refresh();\n\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully modified memorandum\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to edit memorandum\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n\n        const linkages = Object.entries(settings.linkages).map(linkage => {\n            const linkageCode = linkage[0];\n            const linkageString = linkage[1];\n\n            const isSelected = this.state.form.linkages.includes(linkageCode);\n            const className = isSelected ? \"bg-dlsu-lighter text-white d-flex\" : \"d-flex\";\n\n            const onClick = () => {\n                const form = this.state.form;\n\n                if (isSelected) {\n                    const linkages = form.linkages;\n                    // Remove from linkages the selected linkage\n                    linkages.splice(linkages.indexOf(linkageCode), 1);\n                } else {\n                    form.linkages.push(linkageCode);\n                }\n\n                this.setState({\n                    form : form,\n                });\n            };\n\n\n            return <ListGroupItem key={linkageCode}\n                                  onClick={onClick}\n                                  className={className}>\n                <span className=\"mr-auto\">{linkageString}</span>\n                {isSelected && <h5 className=\"mb-0\">✓</h5>}\n            </ListGroupItem>;\n        });\n\n        let collegeInitiators = Object.entries(settings.colleges).map(college => {\n            return <option key={college[0]}\n                           value={college[0]}>{college[1]}</option>;\n        });\n\n        collegeInitiators.unshift(\n            <option key=\"null\"\n                    value={\"\"}>No college initiator</option>,\n        );\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}\n                   onOpened={this.setupUploadCare}>\n                <ModalHeader toggle={this.props.toggle}>\n                    {this.props.edit ? \"Edit memorandum\" : `Add a memorandum to ${this.props.institution.name}`}\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <h5>Memorandum details</h5>\n                        <FormGroup>\n                            <Label>Category</Label>\n                            <Input type=\"select\"\n                                   defaultValue={this.state.form.category}\n                                   onChange={this.getChangeHandler(\"category\")}>\n                                <option value=\"MOA\">Memorandum of Agreement</option>\n                                <option value=\"MOU\">Memorandum of Understanding</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>File Link</Label>\n                            <Input type=\"hidden\"\n                                   role=\"uploadcare-uploader\"\n                                   name=\"content\"\n                                   data-public-key={settings.uploadcarePublicKey}\n                                   valid={isValid(\"File\")}/>\n                            <FormFeedback>{fieldError(\"File\")}</FormFeedback>\n                            {this.props.edit &&\n                            <small className=\"text-secondary\">To change memorandum file, upload a new file. Otherwise,\n                                leave this blank.</small>\n                            }\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Date Effective</Label>\n                            <Input type=\"date\"\n                                   defaultValue={this.state.form.date_effective}\n                                   onChange={this.getChangeHandler(\"date_effective\")}\n                                   valid={isValid(\"Date effective\")}/>\n                            <FormFeedback>{fieldError(\"Date effective\")}</FormFeedback>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Expiration Date</Label>\n                            <Input type=\"date\"\n                                   defaultValue={this.state.form.date_expiration}\n                                   onChange={this.getChangeHandler(\"date_expiration\")}/>\n                            <small className=\"text-secondary\">If the memorandum has no expiration date, leave this\n                                blank.\n                            </small>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>College Initiator</Label>\n                            <Input type=\"select\"\n                                   defaultValue={this.state.form.college_initiator}\n                                   onChange={this.getChangeHandler(\"college_initiator\")}>\n                                {collegeInitiators}\n                            </Input>\n                        </FormGroup>\n                        <br/>\n                        <h5>Linkages</h5>\n                        <small className=\"text-secondary mb-3 d-block\">Select all linkages that apply to this\n                            memorandum.\n                        </small>\n                        <ListGroup>\n                            {linkages}\n                        </ListGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={formHasErrors}\n                            onClick={this.props.edit ? this.submitEditMemorandumForm : this.submitAddMemorandumForm}>\n                        {this.props.edit ? \"Save changes\" : \"Add\"}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n}\n\nclass ArchiveMemorandumModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.confirmArchive = this.confirmArchive.bind(this);\n    }\n\n    confirmArchive() {\n        const dismissToast = makeInfoToast({\n            title : \"Archiving\",\n            message : \"Archiving memorandum...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/memorandums/${this.props.memorandum.id}`,\n            method : \"DELETE\",\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.onDeleteSuccess();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Memorandum archived\",\n                    progressBar : false,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to archive memorandum\",\n                    progressBar : false,\n                });\n            },\n        });\n        this.props.toggle();\n    }\n\n    render() {\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}\n                   id=\"archive-memorandum-modal\">\n                <ModalHeader toggle={this.props.toggle}\n                             className=\"text-yellow\">Are you sure you want to archive this memorandum?</ModalHeader>\n                <ModalFooter>\n                    <Button outline\n                            color=\"warning\"\n                            id=\"archive-memorandum-modal-submit\"\n                            onClick={this.confirmArchive}>Archive</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass ProgramFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.getFormErrors = this.getFormErrors.bind(this);\n    }\n\n    getFormErrors() {\n        //TODO\n    }\n\n    render() {\n        //TODO\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    Add a program\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nexport {\n    InstitutionFormModal,\n    ArchiveInstitutionModal,\n    MemorandumFormModal,\n    ArchiveMemorandumModal,\n    ProgramFormModal,\n};"]}