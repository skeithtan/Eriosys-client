{"version":3,"sources":["../../../../js/tabs/Institutions/memorandums.js"],"names":["Memorandums","props","memorandums","forEach","memorandum","versionDate","dateEffective","dateExpiration","sort","a","b","aTime","bTime","isBefore","isAfter","agreements","understandings","category","push","state","showing","onAgreementClick","bind","onUnderstandingClick","newShowing","setState","MemorandumsOfUnderstanding","latestMemorandum","previousMemorandums","showingMemorandumId","length","splice","emptyState","getCollapseContent","memorandumIsShowing","makeMemorandumShowing","id","map","hasPreviousMemorandums","cardHeaderClass","toggle","MemorandumsOfAgreement","MemorandumRow","console","log","formatDate","date","format","collegeInitiator","isOpen","MemorandumDetailRow","fieldName","fieldValue"],"mappings":"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","file":"memorandums.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Collapse,\n    ListGroup,\n    ListGroupItem,\n} from \"reactstrap\";\nimport moment from \"moment\";\n\n\nclass Memorandums extends Component {\n    constructor(props) {\n        super(props);\n\n        //Parse dates\n        props.memorandums.forEach(memorandum => {\n            memorandum.versionDate = moment(memorandum.versionDate);\n            memorandum.dateEffective = moment(memorandum.dateEffective);\n            memorandum.dateExpiration = moment(memorandum.dateExpiration);\n        });\n\n        //Sort by most recent\n        props.memorandums.sort((a, b) => {\n            const aTime = a.versionDate;\n            const bTime = b.versionDate;\n\n            if (aTime.isBefore(bTime)) {\n                return 1;\n            }\n\n            if (aTime.isAfter(bTime)) {\n                return -1;\n            }\n\n            return 0;\n        });\n\n        let agreements = [];\n        let understandings = [];\n\n        //Categorize\n        props.memorandums.forEach(memorandum => {\n            switch (memorandum.category) {\n                case \"MOA\":\n                    agreements.push(memorandum);\n                    return;\n                case \"MOU\":\n                    understandings.push(memorandum);\n                    return;\n                default:\n                    return;\n            }\n        });\n\n        this.state = {\n            showing : null,\n            agreements : agreements,\n            understandings : understandings,\n        };\n\n        this.onAgreementClick = this.onAgreementClick.bind(this);\n        this.onUnderstandingClick = this.onUnderstandingClick.bind(this);\n    }\n\n    onUnderstandingClick() {\n        const newShowing = this.state.showing === \"MOU\" ? null : \"MOU\";\n\n        this.setState({\n            showing : newShowing,\n        });\n    }\n\n    onAgreementClick() {\n        const newShowing = this.state.showing === \"MOA\" ? null : \"MOA\";\n\n        this.setState({\n            showing : newShowing,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"mb-4\">\n                <small className=\"section-title\">Memorandums</small>\n                <div id=\"memorandums-accordion\">\n                    <MemorandumsOfUnderstanding showing={this.state.showing === \"MOU\"}\n                                                memorandums={this.state.understandings}\n                                                toggle={this.onUnderstandingClick}/>\n                    <MemorandumsOfAgreement showing={this.state.showing === \"MOA\"}\n                                            memorandums={this.state.agreements}\n                                            toggle={this.onAgreementClick}/>\n                </div>\n                <small className=\"section-footer\">Select a memorandum type to reveal details.</small>\n            </div>\n        );\n    }\n}\n\nclass MemorandumsOfUnderstanding extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            latestMemorandum : null,\n            previousMemorandums : [],\n            showingMemorandumId : null,\n        };\n\n        if (props.memorandums.length > 0) {\n            // This is sorted by date so latest version is the one on top\n            this.state.latestMemorandum = props.memorandums[0];\n            this.state.previousMemorandums = props.memorandums.splice(1); //Everything else\n        }\n\n        this.emptyState = this.emptyState.bind(this);\n        this.getCollapseContent = this.getCollapseContent.bind(this);\n        this.memorandumIsShowing = this.memorandumIsShowing.bind(this);\n        this.makeMemorandumShowing = this.makeMemorandumShowing.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"p-5 text-center text-muted\">\n                <h5 className=\"mb-0\">There are no Memorandums of Understanding for this institution.</h5>\n            </div>\n        );\n    }\n\n    makeMemorandumShowing(memorandum) {\n        // If there are no showing memorandums or if the memorandum showing is not the one clicked\n        if (this.state.showingMemorandumId === null || this.state.showingMemorandumId !== memorandum.id) {\n            this.setState({\n                showingMemorandumId : memorandum.id,\n            });\n        } else {\n            // If the showing memorandum is clicked, collapse it\n            this.setState({\n                showingMemorandumId : null,\n            });\n        }\n    }\n\n    memorandumIsShowing(memorandum) {\n        if (this.state.showingMemorandumId === null) {\n            return false;\n        }\n\n        return this.state.showingMemorandumId === memorandum.id;\n    }\n\n    getCollapseContent() {\n        if (this.state.latestMemorandum === null) {\n            return this.emptyState();\n        }\n\n        const previousMemorandums = this.state.previousMemorandums.map(memorandum => {\n            return <MemorandumRow memorandum={memorandum} isOpen={this.memorandumIsShowing(memorandum)}\n                                  toggle={() => this.makeMemorandumShowing(memorandum)}/>;\n        });\n\n        const hasPreviousMemorandums = previousMemorandums.length !== 0;\n\n        return (\n            <CardBody className=\"pt-0\">\n                <small className=\"section-title\">Latest Memorandum</small>\n                <MemorandumRow memorandum={this.state.latestMemorandum}\n                               isOpen={this.memorandumIsShowing(this.state.latestMemorandum)}\n                               toggle={() => this.makeMemorandumShowing(this.state.latestMemorandum)}/>\n\n                {hasPreviousMemorandums && <small className=\"section-title\">Previous Memorandums</small>}\n                {previousMemorandums}\n            </CardBody>\n        );\n    }\n\n    render() {\n        let cardHeaderClass = \"d-flex flex-row align-items-center \";\n\n        if (!this.props.showing) {\n            cardHeaderClass += \"collapsed\";\n        }\n\n        return (\n            <Card>\n                <CardHeader className={cardHeaderClass} onClick={this.props.toggle}>\n                    <h5 className=\"mr-auto mb-0\">Memorandums of Understanding</h5>\n                    <Button outline size=\"sm\" color=\"success\" className=\"add-memorandum-btn\">Add a new version</Button>\n                </CardHeader>\n\n                <Collapse isOpen={this.props.showing}>\n                    {this.getCollapseContent()}\n                </Collapse>\n            </Card>\n        );\n    }\n}\n\nclass MemorandumsOfAgreement extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            latestMemorandum : null,\n            previousMemorandums : [],\n            showingMemorandumId : null,\n        };\n\n        if (props.memorandums.length > 0) {\n            // This is sorted by date so latest version is the one on top\n            this.state.latestMemorandum = props.memorandums[0];\n            this.state.previousMemorandums = props.memorandums.splice(1); //Everything else\n        }\n\n        this.emptyState = this.emptyState.bind(this);\n        this.getCollapseContent = this.getCollapseContent.bind(this);\n        this.memorandumIsShowing = this.memorandumIsShowing.bind(this);\n        this.makeMemorandumShowing = this.makeMemorandumShowing.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"p-5 text-center text-muted\">\n                <h5 className=\"mb-0\">There are no Memorandums of Agreement for this institution.</h5>\n            </div>\n        );\n    }\n\n    makeMemorandumShowing(memorandum) {\n        // If there are no showing memorandums or if the memorandum showing is not the one clicked\n        if (this.state.showingMemorandumId === null || this.state.showingMemorandumId !== memorandum.id) {\n            this.setState({\n                showingMemorandumId : memorandum.id,\n            });\n        } else {\n            // If the showing memorandum is clicked, collapse it\n            this.setState({\n                showingMemorandumId : null,\n            });\n        }\n    }\n\n    memorandumIsShowing(memorandum) {\n        if (this.state.showingMemorandumId === null) {\n            return false;\n        }\n\n        return this.state.showingMemorandumId === memorandum.id;\n    }\n\n    getCollapseContent() {\n        if (this.state.latestMemorandum === null) {\n            return this.emptyState();\n        }\n\n        const previousMemorandums = this.state.previousMemorandums.map(memorandum => {\n            return <MemorandumRow memorandum={memorandum} isOpen={this.memorandumIsShowing(memorandum)}\n                                  toggle={() => this.makeMemorandumShowing(memorandum)}/>;\n        });\n\n        const hasPreviousMemorandums = previousMemorandums.length !== 0;\n\n        return (\n            <CardBody className=\"pt-0\">\n                <small className=\"section-title\">Latest Memorandum</small>\n                <MemorandumRow memorandum={this.state.latestMemorandum}\n                               isOpen={this.memorandumIsShowing(this.state.latestMemorandum)}\n                               toggle={() => this.makeMemorandumShowing(this.state.latestMemorandum)}/>\n\n                {hasPreviousMemorandums && <small className=\"section-title\">Previous Memorandums</small>}\n                {previousMemorandums}\n            </CardBody>\n        );\n    }\n\n    render() {\n        let cardHeaderClass = \"d-flex flex-row align-items-center \";\n\n        if (!this.props.showing) {\n            cardHeaderClass += \"collapsed\";\n        }\n\n        this.getCollapseContent();\n\n        return (\n            <Card>\n                <CardHeader className={cardHeaderClass} onClick={this.props.toggle}>\n                    <h5 className=\"mr-auto mb-0\">Memorandums of Agreement</h5>\n                    <Button outline size=\"sm\" color=\"success\" className=\"add-memorandum-btn\">Add a new version</Button>\n                </CardHeader>\n\n                <Collapse isOpen={this.props.showing}>\n                    {this.getCollapseContent()}\n                </Collapse>\n            </Card>\n        );\n    }\n}\n\nclass MemorandumRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log(this.props);\n        let cardHeaderClass = this.props.showing ? \"\" : \"collapsed\";\n        const memorandum = this.props.memorandum;\n\n        function formatDate(date) {\n            return date.format(\"LL\");\n        }\n\n        const versionDate = formatDate(memorandum.versionDate);\n        const dateEffective = formatDate(memorandum.dateEffective);\n        const dateExpiration = memorandum.dateExpiration === null ? \"No expiration\" : formatDate(memorandum.dateExpiration);\n        const collegeInitiator = memorandum.collegeInitiator === null ? \"No college initiator\" : memorandum.collegeInitiator;\n\n        return (\n            <Card>\n                <CardHeader className={cardHeaderClass} onClick={this.props.toggle}>\n                    Version {versionDate}\n                </CardHeader>\n\n                <Collapse isOpen={this.props.isOpen}>\n                    <CardBody className=\"p-0\">\n                        <ListGroup>\n                            <MemorandumDetailRow fieldName=\"Date Effective\"\n                                                 fieldValue={dateEffective}/>\n                            <MemorandumDetailRow fieldName=\"Date Expiration\"\n                                                 fieldValue={dateExpiration}/>\n                            <MemorandumDetailRow fieldName=\"College Initiator\"\n                                                 fieldValue={collegeInitiator}/>\n                            <ListGroupItem>\n                                <Button outline color=\"primary\">Open Memorandum Copy</Button>\n                            </ListGroupItem>\n                        </ListGroup>\n                    </CardBody>\n                </Collapse>\n            </Card>\n        );\n    }\n}\n\nclass MemorandumDetailRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ListGroupItem>\n                <small className=\"font-weight-bold\">{this.props.fieldName}</small>\n                <p className=\"mb-0\">{this.props.fieldValue}</p>\n            </ListGroupItem>\n        );\n    }\n}\n\nexport default Memorandums;"]}