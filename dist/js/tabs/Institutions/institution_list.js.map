{"version":3,"sources":["../../../../js/tabs/Institutions/institution_list.js"],"names":["InstitutionList","props","state","searchKeyword","collapsed","expand","bind","collapse","setSearchKeyword","getFilteredInstitutions","searchString","setState","institutions","filtered","toLowerCase","forEach","countryFiltered","country","institution_set","filter","institutionName","institution","name","includes","length","push","isSearching","showingInstitutions","className","toggleAddInstitution","activeInstitution","setActiveInstitution","InstitutionListHead","onSearchInputChange","event","searchInput","target","value","InstitutionListTable","emptyState","countries","noResultsState","sections","map","index","InstitutionSection","rows","isActive","id","title"],"mappings":"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","file":"institution_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../loading\";\n\nimport {\n    Input,\n    Button,\n} from \"reactstrap\";\n\nimport {\n    CollapseContent,\n    ExpandContent,\n} from \"../../components/collapse_content\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowContent,\n} from \"../../components/section\";\n\n\nclass InstitutionList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchKeyword : null,\n            collapsed : false,\n        };\n\n        this.expand = this.expand.bind(this);\n        this.collapse = this.collapse.bind(this);\n        this.setSearchKeyword = this.setSearchKeyword.bind(this);\n        this.getFilteredInstitutions = this.getFilteredInstitutions.bind(this);\n    }\n\n    setSearchKeyword(searchString) {\n        //If the string is empty, that means the user isn't searching at all\n        const searchKeyword = searchString === \"\" ? null : searchString;\n        this.setState({\n            searchKeyword : searchKeyword,\n        });\n    }\n\n    getFilteredInstitutions() {\n        if (this.props.institutions === null || this.state.searchKeyword === null) {\n            return [];\n        }\n\n        let filtered = [];\n        const searchKeyword = this.state.searchKeyword.toLowerCase();\n\n        this.props.institutions.forEach(country => {\n            // Array of institutions from this country that conforms to search\n            const countryFiltered = country.institution_set.filter(institution => {\n                const institutionName = institution.name.toLowerCase();\n                return institutionName.includes(searchKeyword);\n            });\n\n            // If country has no matching institutions, don't include in search results\n            if (countryFiltered.length > 0) {\n\n                // Create new country object so as not to affect actual country object\n                filtered.push({\n                    name : country.name,\n                    institution_set : countryFiltered,\n                });\n            }\n        });\n\n        return filtered;\n    }\n\n    collapse() {\n        this.setState({\n            collapsed : true,\n        });\n    };\n\n    expand() {\n        this.setState({\n            collapsed : false,\n        });\n    }\n\n    render() {\n        const isSearching = this.state.searchKeyword !== null;\n        //Show all institutions or, if it has a filter, show the filtered?\n        const showingInstitutions = isSearching ? this.getFilteredInstitutions() : this.props.institutions;\n\n        let className = \"sidebar h-100 collapsible \";\n        if (this.state.collapsed) {\n            className += \"collapsed\";\n        }\n\n        return (\n            <div className={className} id=\"institution-list\">\n                <ExpandContent>\n                    <InstitutionListHead setSearchKeyword={this.setSearchKeyword}\n                                         toggleAddInstitution={this.props.toggleAddInstitution}\n                                         collapse={this.collapse}/>\n                    <InstitutionListTable countries={showingInstitutions}\n                                          isSearching={isSearching}\n                                          toggleAddInstitution={this.props.toggleAddInstitution}\n                                          activeInstitution={this.props.activeInstitution}\n                                          setActiveInstitution={this.props.setActiveInstitution}/>\n                </ExpandContent>\n\n                <CollapseContent title=\"Institutions\" expand={this.expand}/>\n            </div>\n        );\n    }\n}\n\nclass InstitutionListHead extends Component {\n    constructor(props) {\n        super(props);\n        this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    }\n\n    onSearchInputChange(event) {\n        const searchInput = event.target.value;\n        this.props.setSearchKeyword(searchInput);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <img src=\"./images/collapse.png\" className=\"collapse-image\" onClick={this.props.collapse}/>\n\n                    <Button outline color=\"success\" size=\"sm\" className=\"ml-auto\"\n                            onClick={this.props.toggleAddInstitution}>Add</Button>\n                </div>\n                <h4 className=\"page-head-title\">Institutions</h4>\n                <Input type=\"search\" placeholder=\"Search\" className=\"search-input\" onChange={this.onSearchInputChange}/>\n            </div>\n        );\n    }\n}\n\nclass InstitutionListTable extends Component {\n    constructor(props) {\n        super(props);\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There's nothing here.</h4>\n                <p>When added, Institutions will show up here.</p>\n                <Button outline color=\"success\" onClick={this.props.toggleAddInstitution}>Add an Institution</Button>\n            </div>\n        );\n    }\n\n\n    static noResultsState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>No results found</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.countries === null) {\n            return <LoadingSpinner/>;\n        }\n\n        //If we're searching, that means there are simply no results if length == 0\n        //If we're not searching, we really just don't have any data\n        if (this.props.countries.length === 0) {\n            return this.props.isSearching ? InstitutionListTable.noResultsState() : InstitutionListTable.emptyState();\n        }\n\n\n        const sections = this.props.countries.map((country, index) => {\n            return <InstitutionSection title={country.name} institutions={country.institution_set} key={index}\n                                       activeInstitution={this.props.activeInstitution}\n                                       setActiveInstitution={this.props.setActiveInstitution}/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                {sections}\n            </div>\n        );\n    }\n}\n\nclass InstitutionSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const rows = this.props.institutions.map(institution => {\n            let isActive = false;\n\n            if (this.props.activeInstitution !== null) {\n                isActive = this.props.activeInstitution.id === institution.id;\n            }\n\n            const setActiveInstitution = () => this.props.setActiveInstitution(institution);\n\n            return (\n                <SectionRow selectable onClick={setActiveInstitution} active={isActive} key={institution.id}>\n                    <SectionRowContent>{institution.name}</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section>\n                <SectionTitle>{this.props.title}</SectionTitle>\n                <SectionTable>\n                    {rows}\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default InstitutionList;"]}