{"version":3,"sources":["../../../../js/tabs/Institutions/institution_list.js"],"names":["activeInstitution","setActiveInstitution","toggleAddInstitution","InstitutionList","props","state","allInstitutions","institutions","filteredInstitutions","filterInstitutions","bind","nextProps","setState","searchString","search","toLowerCase","length","filtered","forEach","countryFiltered","country","institutionSet","filter","institutionName","institution","name","includes","push","hasFilter","showingInstitutions","InstitutionListHead","onSearchInputChange","event","searchInput","target","value","InstitutionListTable","countries","noResultsState","emptyState","sections","map","index","InstitutionSection","rows","id","title","InstitutionRow","isActive"],"mappings":"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","file":"institution_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../loading\";\nimport {\n    Input,\n    Button,\n    ListGroup,\n    ListGroupItem,\n} from \"reactstrap\";\n\n\nlet activeInstitution = null;\nlet setActiveInstitution = institution => {\n};\nlet toggleAddInstitution = () => {};\n\nclass InstitutionList extends Component {\n    constructor(props) {\n        super(props);\n        setActiveInstitution = props.setActiveInstitution;\n        toggleAddInstitution = props.toggleAddInstitution;\n\n        this.state = {\n            allInstitutions : props.institutions,\n            filteredInstitutions : null,\n        };\n\n        this.filterInstitutions = this.filterInstitutions.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            allInstitutions : nextProps.institutions,\n        });\n    }\n\n    filterInstitutions(searchString) {\n        // Case insensitive search\n        const search = searchString.toLowerCase();\n\n        // No search item means they don't want to filter\n        if (search.length === 0) {\n            this.setState({\n                filteredInstitutions : null,\n            });\n\n            return;\n        }\n\n        let filtered = [];\n\n        this.state.allInstitutions.forEach(country => {\n            // Array of institutions from this country that conforms to search\n            const countryFiltered = country.institutionSet.filter(institution => {\n                const institutionName = institution.name.toLowerCase();\n                return institutionName.includes(search);\n            });\n\n            // If country has no matching institutions, don't include in search results\n            if (countryFiltered.length > 0) {\n\n                // Create new country object so as not to affect actual country object\n                filtered.push({\n                    name : country.name,\n                    institutionSet : countryFiltered,\n                });\n            }\n        });\n\n        this.setState({\n            filteredInstitutions : filtered,\n        });\n    }\n\n    render() {\n        activeInstitution = this.props.activeInstitution;\n        const hasFilter = this.state.filteredInstitutions !== null;\n        const showingInstitutions = hasFilter ? this.state.filteredInstitutions : this.state.allInstitutions;\n\n        return (\n            <div className=\"sidebar h-100\" id=\"institution-list\">\n                <InstitutionListHead filterInstitutions={this.filterInstitutions}/>\n                <InstitutionListTable countries={showingInstitutions}\n                                      hasFilter={hasFilter}\n                                      setActiveInstitution={this.props.setActiveInstitution}/>\n            </div>\n        );\n    }\n}\n\nclass InstitutionListHead extends Component {\n    constructor(props) {\n        super(props);\n        this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    }\n\n    onSearchInputChange(event) {\n        const searchInput = event.target.value;\n        this.props.filterInstitutions(searchInput);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <Button outline color=\"success\" size=\"sm\" className=\"ml-auto\"\n                            onClick={toggleAddInstitution}>Add</Button>\n                </div>\n                <h4 className=\"page-head-title\">Institutions</h4>\n                <Input placeholder=\"Search\" className=\"search-input mt-2\" onChange={this.onSearchInputChange}/>\n            </div>\n        );\n    }\n}\n\nclass InstitutionListTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    static emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There's nothing here.</h4>\n                <p>When added, Institutions will show up here.</p>\n                <Button outline color=\"success\" onClick={toggleAddInstitution}>Add an Institution</Button>\n            </div>\n        )\n    }\n\n\n    static noResultsState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>No results found</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.countries === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.countries.length === 0) {\n            return this.props.hasFilter ? InstitutionListTable.noResultsState() : InstitutionListTable.emptyState();\n        }\n\n\n        const sections = this.props.countries.map((country, index) => {\n            return <InstitutionSection title={country.name} institutions={country.institutionSet} key={index}/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                {sections}\n            </div>\n        );\n    }\n}\n\nclass InstitutionSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const rows = this.props.institutions.map(institution => <InstitutionRow institution={institution}\n                                                                                key={institution.id}/>);\n\n        return (\n            <div className=\"section\">\n                <small className=\"section-title\">{this.props.title}</small>\n                <ListGroup>\n                    {rows}\n                </ListGroup>\n            </div>\n        );\n    }\n}\n\nclass InstitutionRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const isActive = activeInstitution !== null ? this.props.institution.id === activeInstitution.id : false;\n\n        if (isActive) {\n            return <ListGroupItem className=\"bg-dlsu text-white\">{this.props.institution.name}</ListGroupItem>;\n        } else {\n            return <ListGroupItem\n                onClick={() => setActiveInstitution(this.props.institution)}>{this.props.institution.name}</ListGroupItem>;\n        }\n    }\n}\n\nexport default InstitutionList;"]}