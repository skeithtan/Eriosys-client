{"version":3,"sources":["../../../../../js/tabs/Institutions/tabs/memorandums.js"],"names":["makeMemorandumsQuery","id","query","institutionIsFetched","institution","moas","undefined","Memorandums","props","state","activeMemorandumId","performQuery","bind","refreshMemorandums","setActiveMemorandum","error","setState","then","result","mous","catch","memorandum","setSidebarContent","onDeleteMemorandum","toString","memorandums","agreements","understandings","latestMOU","latest_mou","latestMOA","latest_moa","memorandumToBeAdded","toggleMemorandumToBeAdded","MemorandumHead","addMemorandumIsShowing","toggleAddMemorandum","name","MemorandumBody","MemorandumListSection","deleteMemorandumIsShowing","editMemorandumIsShowing","emptyState","toggleDeleteMemorandum","toggleEditMemorandum","children","length","rows","map","index","onMemorandumRowClick","isActive","MemorandumRow","formatDate","date","format","dateEffective","date_effective","onClick","latest"],"mappings":"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","file":"memorandums.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\n\nimport { Button, } from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\n\nimport { MemorandumFormModal } from \"../modals\";\nimport { MemorandumSidebarPane } from \"./sidebar_panes\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeMemorandumsQuery(id) {\n    return graphql.query(`\n    {\n      institution(id:${id}) {\n        id\n        name\n        moas {\n          id\n          category\n          memorandum_file\n          date_effective\n          date_expiration\n          college_initiator\n          linkages\n        }\n        mous {\n          id\n          category\n          memorandum_file\n          date_effective\n          date_expiration\n          college_initiator\n          linkages\n        }\n        \n      }\n    }\n    `);\n}\n\nfunction institutionIsFetched(institution) {\n    return institution.moas !== undefined;\n}\n\n\nclass Memorandums extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            institution : props.institution,\n            activeMemorandumId : null,\n        };\n\n        this.performQuery = this.performQuery.bind(this);\n        this.refreshMemorandums = this.refreshMemorandums.bind(this);\n        this.setActiveMemorandum = this.setActiveMemorandum.bind(this);\n\n        this.performQuery();\n    }\n\n    performQuery(id) {\n        if (id === undefined) {\n            id = this.props.institution.id;\n        }\n\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeMemorandumsQuery(id)\n            .then(result => {\n                this.state.institution.moas = result.institution.moas;\n                this.state.institution.mous = result.institution.mous;\n\n                this.setState({\n                    institution : this.state.institution,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    setActiveMemorandum(memorandum) {\n        if (memorandum === null) {\n            this.props.setSidebarContent(null);\n        }\n\n\n        const onDeleteMemorandum = () => {\n            this.setState({\n                activeMemorandumId : null,\n            });\n            this.refreshMemorandums();\n            this.props.setSidebarContent(null);\n        };\n\n\n        this.props.setSidebarContent(\n            <MemorandumSidebarPane memorandum={memorandum}\n                                   removeActiveMemorandum={onDeleteMemorandum}\n                                   refreshMemorandums={this.refreshMemorandums}/>,\n        );\n\n        this.setState({\n            activeMemorandumId : memorandum.id,\n        });\n    }\n\n    refreshMemorandums() {\n        this.setState({\n            institution : null,\n        });\n\n        this.performQuery();\n    }\n\n    componentWillReceiveProps(props) {\n        if (this.state.institution !== null &&\n            this.state.institution.id === props.institution.id) {\n            return;\n        }\n\n        this.props.setSidebarContent(null);\n\n        this.setState({\n            institution : props.institution,\n            activeMemorandumId : null //Remove current active memorandum ID\n        });\n\n        if (!institutionIsFetched(props.institution)) {\n            this.performQuery(props.institution.id);\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.performQuery(this.state.institution.id)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        if (!institutionIsFetched(this.state.institution)) {\n            return <LoadingSpinner/>;\n        }\n\n        const memorandums = {\n            agreements : this.state.institution.moas,\n            understandings : this.state.institution.mous,\n            latestMOU : this.state.institution.latest_mou,\n            latestMOA : this.state.institution.latest_moa,\n        };\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <MemorandumHead institution={this.state.institution}\n                                refreshMemorandums={this.refreshMemorandums}\n                                memorandumToBeAdded={this.props.memorandumToBeAdded}\n                                toggleMemorandumToBeAdded={this.props.toggleMemorandumToBeAdded}/>\n                <MemorandumBody institution={this.state.institution}\n                                memorandums={memorandums}\n                                activeMemorandumId={this.state.activeMemorandumId}\n                                setActiveMemorandum={this.setActiveMemorandum}\n                                refreshMemorandums={this.refreshMemorandums}\n                                setSidebarContent={this.props.setSidebarContent}/>\n            </div>\n        );\n    }\n}\n\nclass MemorandumHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            addMemorandumIsShowing : this.props.memorandumToBeAdded,\n        };\n\n        this.toggleAddMemorandum = this.toggleAddMemorandum.bind(this);\n    }\n\n    toggleAddMemorandum() {\n        this.setState({\n            addMemorandumIsShowing : !this.state.addMemorandumIsShowing,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Memorandums</h5>\n                    <h4 className=\"page-head-title mb-0\">{this.props.institution.name}</h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline\n                            size=\"sm\"\n                            color=\"success\"\n                            onClick={this.toggleAddMemorandum}>Add a\n                        Memorandum</Button>\n                </div>\n\n                <MemorandumFormModal isOpen={this.state.addMemorandumIsShowing}\n                                     institution={this.props.institution}\n                                     toggle={this.toggleAddMemorandum}\n                                     refresh={this.props.refreshMemorandums}\n                                     memorandumToBeAdded={this.props.memorandumToBeAdded}\n                                     toggleMemorandumToBeAdded={this.props.toggleMemorandumToBeAdded}/>\n            </div>\n        );\n    }\n}\n\nclass MemorandumBody extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        return (\n            <div className=\"page-body w-100\">\n                <div className=\"d-flex h-100 p-0 flex-row\">\n                    <div className=\"w-100\">\n                        <MemorandumListSection institution={this.props.institution}\n                                               activeMemorandumId={this.props.activeMemorandumId}\n                                               memorandums={this.props.memorandums.agreements}\n                                               latest={this.props.memorandums.latestMOA}\n                                               setActiveMemorandum={this.props.setActiveMemorandum}\n                                               refreshMemorandums={this.props.refreshMemorandums}>\n                            MOA (Memorandums of Agreement)\n                        </MemorandumListSection>\n\n                        <MemorandumListSection institution={this.props.institution}\n                                               memorandums={this.props.memorandums.understandings}\n                                               latest={this.props.memorandums.latestMOU}\n                                               activeMemorandumId={this.props.activeMemorandumId}\n                                               setActiveMemorandum={this.props.setActiveMemorandum}\n                                               refreshMemorandums={this.props.refreshMemorandums}>\n                            MOU (Memorandums of Understanding)\n                        </MemorandumListSection>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass MemorandumListSection extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deleteMemorandumIsShowing : false,\n            editMemorandumIsShowing : false,\n        };\n\n        this.emptyState = this.emptyState.bind(this);\n        this.toggleDeleteMemorandum = this.toggleDeleteMemorandum.bind(this);\n        this.toggleEditMemorandum = this.toggleEditMemorandum.bind(this);\n    }\n\n    toggleDeleteMemorandum() {\n        this.setState({\n            deleteMemorandumIsShowing : !this.state.deleteMemorandumIsShowing,\n        });\n    }\n\n    toggleEditMemorandum() {\n        this.setState({\n            editMemorandumIsShowing : !this.state.editMemorandumIsShowing,\n        });\n    }\n\n    emptyState() {\n        return (\n            <div className=\"p-5 text-center bg-light\">\n                <h5 className=\"text-secondary\">There are no {this.props.children} for this institution</h5>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.memorandums.length === 0) {\n            return (\n                <Section>\n                    <SectionTitle>{this.props.children}</SectionTitle>\n                    {this.emptyState()}\n                </Section>\n            );\n        }\n\n        const rows = this.props.memorandums.map((memorandum, index) => {\n            const onMemorandumRowClick = () => this.props.setActiveMemorandum(memorandum);\n\n            let isActive = false;\n\n            if (this.props.activeMemorandumId !== null) {\n                isActive = this.props.activeMemorandumId === memorandum.id;\n            }\n\n            return <MemorandumRow memorandum={memorandum}\n                                  isActive={isActive}\n                                  onClick={onMemorandumRowClick}\n                                  latest={index === 0}\n                                  key={memorandum.id}/>;\n        });\n\n        return (\n            <div>\n                <Section>\n                    <SectionTitle>{this.props.children}</SectionTitle>\n                    <SectionTable className=\"memorandums-accordion\">\n                        {rows}\n                    </SectionTable>\n                </Section>\n            </div>\n        );\n    }\n}\n\nclass MemorandumRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const memorandum = this.props.memorandum;\n\n        function formatDate(date) {\n            return moment(date).format(\"LL\");\n        }\n\n        const dateEffective = formatDate(memorandum.date_effective);\n        return (\n            <SectionRow selectable\n                        onClick={this.props.onClick}\n                        active={this.props.isActive}>\n                {this.props.latest &&\n                <SectionRowTitle>Latest Memorandum</SectionRowTitle>\n                }\n                <SectionRowContent large>Effective {dateEffective}</SectionRowContent>\n            </SectionRow>\n        );\n    }\n}\n\nexport default Memorandums;"]}