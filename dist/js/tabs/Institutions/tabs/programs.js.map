{"version":3,"sources":["../../../../../js/tabs/Institutions/tabs/programs.js"],"names":["fetchYears","institutionID","onResponse","query","fetchPrograms","Programs","props","state","yearList","programList","institution","id","currentYear","currentProgram","setCurrentYear","bind","setCurrentProgram","setState","response","data","programs","year","console","log","program","nextProps","ProgramsHead","years","map","Number","academic_year","academic_year_start","sort","a","b","getOrderedYears","index","name","length","ProgramsTable","ProgramsListSection","emptyState","rows","children"],"mappings":"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","file":"programs.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../loading\";\nimport { Button } from \"reactstrap\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n    SectionTitle,\n} from \"../../../components/section\";\n\nfunction fetchYears(institutionID, onResponse) {\n    graphql({\n        query : `\n        {\n            programs(institution:${institutionID}) {\n                academic_year {\n                    academic_year_start\n                }\n            }\n        }\n       `,\n        onResponse : onResponse,\n    });\n}\n\nfunction fetchPrograms(institutionID, onResponse) {\n    graphql({\n        query : `\n        {\n            programs(institution:${institutionID}) {\n                name\n            }\n        }\n       `,\n        onResponse : onResponse,\n    });\n}\n\nclass Programs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            yearList : null,\n            programList : null,\n            institutionID : props.institution.id,\n            currentYear : null,\n            currentProgram : null,\n        };\n\n        this.setCurrentYear = this.setCurrentYear.bind(this);\n        this.setCurrentProgram = this.setCurrentProgram.bind(this);\n\n        fetchYears(props.institution.id, response => {\n            this.setState({\n                yearList : response.data.programs,\n            });\n        });\n\n        fetchPrograms(props.institution.id, response => {\n            this.setState({\n                programList : response.data.programs,\n            });\n        });\n    }\n\n    setCurrentYear(year) {\n        console.log(year);\n        this.setState({\n            currentYear : year,\n        });\n    }\n\n    setCurrentProgram(program) {\n        this.setState({\n            currentProgram : program,\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.institutionID === nextProps.institution.id) {\n            return;\n        }\n\n        this.setState({\n            institutionID : nextProps.institution.id,\n            yearList : null,\n            programList : null,\n        });\n\n        fetchYears(nextProps.institution.id, response => {\n            this.setState({\n                yearList : response.data.programs,\n            });\n        });\n\n        fetchPrograms(nextProps.institution.id, response => {\n            this.setState({\n                programList : response.data.programs,\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"h-100 w-100\">\n                <ProgramsHead institution={ this.props.institution }\n                              years={ this.state.yearList }\n                              setCurrentYear={ this.setCurrentYear }/>\n                <ProgramsTable programs={ this.state.programList }\n                               setCurrentProgram={ this.setCurrentProgram }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getOrderedYears() {\n        if (this.props.years === null) {\n            return [];\n        }\n\n        let years = this.props.years.map(year => Number(year.academic_year.academic_year_start));\n        years = years.sort(function (a, b) {\n            return a - b;\n        });\n\n        return years;\n    }\n\n    toggleAddPrograms() {\n        //TODO\n    }\n\n    render() {\n        const years = this.getOrderedYears().map((year, index) => {\n            return <option key={ index } value={ year }>{ year } - { year + 1 }</option>;\n        });\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                    <h4 className=\"page-head-title mb-0\">{ this.props.institution.name }</h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    { years.length !== 0 &&\n                    <select className=\"form-control mr-3\"\n                            onChange={ () => this.props.setCurrentYear }\n                            defaultValue={ this.getOrderedYears()[0] }>\n                        { years }\n                    </select> }\n                    <Button outline size=\"sm\" color=\"success\">\n                        Add a Program\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ProgramsTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"w-100\">\n                <ProgramsListSection programs={ this.props.programs }\n                                     setCurrentProgram={ this.props.setCurrentProgram }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsListSection extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        // TODO\n        return (\n            <div>\n                This is empty\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.programs === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        let rows = this.props.programs.map((program, index) => {\n            //TODO: onClick\n            return (\n                <SectionRow key={ index } onClick={ () => this.props.setCurrentProgram(program) }>\n                    <SectionRowContent large>{ program.name }</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <div>\n                <Section>\n                    <SectionTitle>{ this.props.children }</SectionTitle>\n                    <SectionTable className=\"memorandums-accordion\">\n                        { rows }\n                    </SectionTable>\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default Programs;"]}