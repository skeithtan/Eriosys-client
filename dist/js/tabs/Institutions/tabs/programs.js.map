{"version":3,"sources":["../../../../../js/tabs/Institutions/tabs/programs.js"],"names":["fetchYears","institutionID","onResult","query","then","fetchPrograms","year","Programs","props","state","institution","id","yearList","activeYear","programList","activeProgram","getOrderedYears","bind","setActiveYear","setActiveProgram","refreshPrograms","setState","result","programs","undefined","program","setSidebarContent","refreshProgram","onDeleteProgram","length","years","forEach","push","academic_year","academic_year_start","filter","value","index","self","indexOf","sort","a","b","nextProps","ProgramsHead","map","name","ProgramsTable","emptyState","currentProgram","setCurrentProgram","ProgramsListSection","rows","isActive","children"],"mappings":"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","file":"programs.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport {\n    Button,\n    Input,\n} from \"reactstrap\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n    SectionTitle,\n} from \"../../../components/section\";\nimport { ProgramSidebarPane } from \"./sidebar_panes\";\n\n\nfunction fetchYears(institutionID, onResult) {\n    graphql.query(`\n    {\n        programs(institution:${institutionID}) {\n            academic_year {\n                academic_year_start\n            }\n        }\n    }\n    `).then(onResult);\n}\n\nfunction fetchPrograms(institutionID, year, onResult) {\n    graphql.query(`\n    {\n        programs(institution:${institutionID}, year:${year}) {\n            id\n            name\n            linkage {\n                name\n            }\n            academic_year {\n                academic_year_start\n            }\n            studyfield_set {\n                name\n            }\n        }\n    }\n    `).then(onResult);\n}\n\nclass Programs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            institutionID : props.institution.id,\n            yearList : null,\n            activeYear : null,\n            programList : null,\n            activeProgram : null,\n        };\n\n        this.getOrderedYears = this.getOrderedYears.bind(this);\n        this.setActiveYear = this.setActiveYear.bind(this);\n        this.setActiveProgram = this.setActiveProgram.bind(this);\n        this.refreshPrograms = this.refreshPrograms.bind(this);\n\n        fetchYears(this.state.institutionID, result => {\n            this.setState({\n                yearList : this.getOrderedYears(result.programs),\n            });\n            if (this.state.yearList !== null) {\n                this.setState({\n                    activeYear : this.state.yearList[0],\n                });\n            }\n            if (this.state.activeYear !== undefined) {\n                fetchPrograms(props.institution.id, this.state.activeYear, result => {\n                    this.setState({\n                        programList : result.programs,\n                    });\n                });\n            }\n        });\n    }\n\n    setActiveYear(year) {\n        this.setState({\n            activeYear : year,\n            activeProgram : null,\n        });\n    }\n\n    setActiveProgram(program) {\n        if (program === null) {\n            this.props.setSidebarContent(null);\n        }\n\n        const refreshProgram = () => {\n            this.refreshPrograms();\n        };\n\n        const onDeleteProgram = () => {\n            this.setState({\n                activeProgram : null,\n            });\n            this.refreshPrograms();\n            this.setActiveProgram(null);\n        };\n\n        this.props.setSidebarContent(\n            <ProgramSidebarPane program={program}/>,\n        );\n\n        this.setState({\n            activeProgram : program,\n        });\n    }\n\n    getOrderedYears(programs) {\n        if (programs.length === 0) {\n            return [];\n        }\n\n        let years = [];\n\n        programs.forEach(year => {\n            years.push(year.academic_year.academic_year_start);\n        });\n\n        // Get uniques only\n        years = years.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Arrange in ascending order\n        years = years.sort(function (a, b) {\n            return a - b;\n        });\n\n        return years;\n    }\n\n    // There might be a need to check for the activeYear\n    refreshPrograms() {\n        fetchPrograms(this.state.institutionID, this.state.activeYear, result => {\n            this.setState({\n                programList : result.programs,\n            });\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.institutionID === nextProps.institution.id) {\n            return;\n        }\n\n        this.props.setSidebarContent(null);\n\n        this.setState({\n            institutionID : nextProps.institution.id,\n            yearList : null,\n            programList : null,\n            activeYear : null,\n        });\n\n        fetchYears(nextProps.institution.id, result => {\n            this.setState({\n                yearList : this.getOrderedYears(result.programs),\n            });\n            if (this.state.yearList !== null) {\n                this.setState({\n                    activeYear : this.state.yearList[0],\n                });\n            }\n            if (this.state.activeYear !== undefined) {\n                fetchPrograms(nextProps.institution.id, this.state.activeYear, result => {\n                    this.setState({\n                        programList : result.programs,\n                    });\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"w-100 h-100 d-flex flex-column\">\n                <ProgramsHead institution={this.props.institution}\n                              years={this.state.yearList}\n                              setCurrentYear={this.setActiveYear}/>\n                <ProgramsTable programs={this.state.programList}\n                               currentProgram={this.state.activeProgram}\n                               setCurrentProgram={this.setActiveProgram}/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        if (this.props.years === null) {\n            return <LoadingSpinner/>;\n        }\n\n        const years = this.props.years.map((year, index) => {\n            return <option key={index}>{year} - {year + 1}</option>;\n        });\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                    <h4 className=\"page-head-title mb-0\">{this.props.institution.name}</h4>\n                </div>\n\n                <div className=\"page-head-actions d-flex flex-row align-items-end\">\n                    {this.props.years.length !== 0 &&\n                    <div className=\"d-flex flex-column mr-2\">\n                        <labl className=\"mr-3 text-dark mb-1\">Academic Year</labl>\n                        <Input type=\"select\" className=\"mr-3 btn btn-outline-success select-sm\">\n                            {years}\n                        </Input>\n                    </div>\n                    }\n                    <Button outline\n                            size=\"sm\"\n                            color=\"success\">\n                        Add a Program\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ProgramsTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There's nothing here.</h3>\n                <p>When added, Programs will show up here.</p>\n                <Button outline\n                        color=\"success\">Add a program</Button>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.programs === null || this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        return (\n            <div className=\"w-100 h-100 d-flex flex-column\">\n                <ProgramsListSection programs={this.props.programs}\n                                     currentProgram={this.props.currentProgram}\n                                     setCurrentProgram={this.props.setCurrentProgram}/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsListSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let rows = this.props.programs.map((program, index) => {\n            let isActive = false;\n\n            if (this.props.currentProgram !== null) {\n                isActive = this.props.currentProgram.id === program.id;\n            }\n\n            const setCurrentProgram = () => this.props.setCurrentProgram(program);\n\n            return (\n                <SectionRow key={index}\n                            onClick={setCurrentProgram}\n                            active={isActive}>\n                    <SectionRowContent large>{program.name}</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <div>\n                <Section>\n                    <SectionTitle>{this.props.children}</SectionTitle>\n                    <SectionTable className=\"memorandums-accordion\">\n                        {rows}\n                    </SectionTable>\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default Programs;"]}