{"version":3,"sources":["../../../../../js/tabs/Institutions/tabs/programs.js"],"names":["fetchYears","onResult","query","then","fetchPrograms","institutionID","year","Programs","props","state","institution","id","yearList","activeYear","programList","activeProgram","addProgramIsShowing","setActiveYear","bind","setActiveProgram","refreshPrograms","toggleAddProgram","result","academic_years","map","academicYear","academic_year_start","length","setState","program","setSidebarContent","outbound_programs","nextProps","ProgramsHead","years","index","onYearChange","event","target","value","name","ProgramsTable","emptyState","programs","currentProgram","setCurrentProgram","ProgramsListSection","rows","isActive","children"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAIA;;AAOA;;AACA;;;;;;;;;;AAGA,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,sBAAQC,KAAR,+FAMGC,IANH,CAMQF,QANR;AAOH;;AAED,SAASG,aAAT,CAAuBC,aAAvB,EAAsCC,IAAtC,EAA4CL,QAA5C,EAAsD;AAClD,sBAAQC,KAAR,qDAEoCG,aAFpC,eAE2DC,IAF3D,2OAcGH,IAdH,CAcQF,QAdR;AAeH;;IAEKM,Q;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wHACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTJ,2BAAgBG,MAAME,WAAN,CAAkBC,EADzB;AAETC,sBAAW,IAFF;AAGTC,wBAAa,IAHJ;AAITC,yBAAc,IAJL;AAKTC,2BAAgB,IALP;AAMTC,iCAAsB;AANb,SAAb;;AASA,cAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,OAArB;AACA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;AACA,cAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,OAAvB;AACA,cAAKG,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBH,IAAtB,OAAxB;;AAEAlB,mBAAW,kBAAU;AACjB,gBAAMY,WAAWU,OAAOC,cAAP,CAAsBC,GAAtB,CAA0B;AAAA,uBAAgBC,aAAaC,mBAA7B;AAAA,aAA1B,CAAjB;;AAEA,gBAAId,SAASe,MAAT,KAAoB,CAAxB,EAA2B;AACvB,sBAAKC,QAAL,CAAc;AACVhB,8BAAW;AADD,iBAAd;;AAIA;AACH;;AAED,gBAAMC,aAAaD,SAAS,CAAT,CAAnB;;AAEA,kBAAKgB,QAAL,CAAc;AACVhB,0BAAWA,QADD;AAEVC,4BAAaA;AAFH,aAAd;;AAKA,kBAAKO,eAAL,CAAqB,MAAKX,KAAL,CAAWJ,aAAhC,EAA+CQ,UAA/C;AACH,SAnBD;AAjBe;AAqClB;;;;2CAEkB;AACf,iBAAKe,QAAL,CAAc;AACVZ,qCAAsB,CAAC,KAAKP,KAAL,CAAWO;AADxB,aAAd;AAGH;;;sCAEaV,I,EAAM;AAChB,iBAAKsB,QAAL,CAAc;AACVf,4BAAaP,IADH;AAEVS,+BAAgB,IAFN;AAGVD,6BAAc;AAHJ,aAAd;;AAMA,iBAAKM,eAAL,CAAqB,KAAKX,KAAL,CAAWJ,aAAhC,EAA+CC,IAA/C;AACH;;;yCAEgBuB,O,EAAS;AACtB,gBAAIA,YAAY,IAAhB,EAAsB;AAClB,qBAAKrB,KAAL,CAAWsB,iBAAX,CAA6B,IAA7B;AACH;;AAED,iBAAKtB,KAAL,CAAWsB,iBAAX,CACI,mEAAoB,SAAUD,OAA9B,GADJ;;AAIA,iBAAKD,QAAL,CAAc;AACVb,+BAAgBc;AADN,aAAd;AAGH;;AAED;;;;wCACgBnB,W,EAAaJ,I,EAAM;AAAA;;AAC/BF,0BAAcM,WAAd,EAA2BJ,IAA3B,EAAiC,kBAAU;AACvC,uBAAKsB,QAAL,CAAc;AACVd,iCAAcQ,OAAOS;AADX,iBAAd;AAGH,aAJD;AAKH;;;kDAEyBC,S,EAAW;AACjC,gBAAI,KAAKvB,KAAL,CAAWJ,aAAX,KAA6B2B,UAAUtB,WAAV,CAAsBC,EAAvD,EAA2D;AACvD;AACH;;AAED,iBAAKH,KAAL,CAAWsB,iBAAX,CAA6B,IAA7B;;AAEA,iBAAKF,QAAL,CAAc;AACVvB,+BAAgB2B,UAAUtB,WAAV,CAAsBC,EAD5B;AAEVG,6BAAc,IAFJ;AAGVC,+BAAgB;AAHN,aAAd;;AAMA,iBAAKK,eAAL,CAAqBY,UAAUtB,WAAV,CAAsBC,EAA3C,EAA+C,KAAKF,KAAL,CAAWI,UAA1D;AACH;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKJ,KAAL,CAAWG,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,uBAAO,sDAAP;AACH;;AAGD,mBACI;AAAA;AAAA,kBAAK,WAAU,gCAAf;AACI,8CAAC,YAAD,IAAc,aAAc,KAAKJ,KAAL,CAAWE,WAAvC;AACc,2BAAQ,KAAKD,KAAL,CAAWG,QADjC;AAEc,sCAAmB,KAAKS,gBAFtC;AAGc,mCAAgB,KAAKJ,aAHnC,GADJ;AAKI,8CAAC,aAAD,IAAe,UAAW,KAAKR,KAAL,CAAWK,WAArC;AACe,oCAAiB,KAAKL,KAAL,CAAWM,aAD3C;AAEe,sCAAmB,KAAKM,gBAFvC;AAGe,uCAAoB,KAAKF,gBAHxC,GALJ;AASI,0EAAkB,QAAS,KAAKE,gBAAhC;AACkB,6BAAU;AAAA,+BAAM,OAAKD,eAAL,CAAqB,OAAKX,KAAL,CAAWJ,aAAhC,EAA+C,OAAKI,KAAL,CAAWI,UAA1D,CAAN;AAAA,qBAD5B;AAEkB,4BAAS,KAAKJ,KAAL,CAAWO,mBAFtC;AAGkB,iCAAc,KAAKP,KAAL,CAAWJ,aAH3C;AATJ,aADJ;AAgBH;;;;;;IAGC4B,Y;;;AACF,0BAAYzB,KAAZ,EAAmB;AAAA;;AAAA,2HACTA,KADS;AAElB;;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKA,KAAL,CAAW0B,KAAX,KAAqB,IAAzB,EAA+B;AAC3B,uBAAO,sDAAP;AACH;;AAED,gBAAMA,QAAQ,KAAK1B,KAAL,CAAW0B,KAAX,CAAiBV,GAAjB,CAAqB,UAAClB,IAAD,EAAO6B,KAAP,EAAiB;AAChD,uBAAO;AAAA;AAAA,sBAAQ,KAAMA,KAAd;AACQ,+BAAQ7B,IADhB;AACyBA,wBADzB;AAAA;AACoCA,2BAAO;AAD3C,iBAAP;AAEH,aAHa,CAAd;;AAKA,gBAAM8B,eAAe,SAAfA,YAAe,QAAS;AAC1B,uBAAK5B,KAAL,CAAWS,aAAX,CAAyBoB,MAAMC,MAAN,CAAaC,KAAtC;AACH,aAFD;;AAIA,mBACI;AAAA;AAAA,kBAAK,WAAU,gDAAf;AACI;AAAA;AAAA,sBAAK,WAAU,SAAf;AACI;AAAA;AAAA,0BAAI,WAAU,qBAAd;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA,0BAAI,WAAU,sBAAd;AAAuC,6BAAK/B,KAAL,CAAWE,WAAX,CAAuB8B;AAA9D;AAFJ,iBADJ;AAMI;AAAA;AAAA,sBAAK,WAAU,mDAAf;AACM,yBAAKhC,KAAL,CAAW0B,KAAX,CAAiBP,MAAjB,KAA4B,CAA5B,IACF;AAAA;AAAA,0BAAK,WAAU,yBAAf;AACI;AAAA;AAAA,8BAAM,WAAU,qBAAhB;AAAA;AAAA,yBADJ;AAEI;AAAA;AAAA,8BAAO,MAAK,QAAZ;AACO,0CAAWS,YADlB;AAEO,2CAAU,wCAFjB;AAGMF;AAHN;AAFJ,qBAFJ;AAWI;AAAA;AAAA,0BAAQ,aAAR;AACQ,kCAAK,IADb;AAEQ,qCAAU,KAAK1B,KAAL,CAAWa,gBAF7B;AAGQ,mCAAM,SAHd;AAAA;AAAA;AAXJ;AANJ,aADJ;AA2BH;;;;;;IAGCoB,a;;;AACF,2BAAYjC,KAAZ,EAAmB;AAAA;;AAAA,mIACTA,KADS;;AAGf,eAAKkC,UAAL,GAAkB,OAAKA,UAAL,CAAgBxB,IAAhB,QAAlB;AAHe;AAIlB;;;;qCAEY;AACT,mBACI;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACI;AAAA;AAAA;AAAA;AAAA,iBADJ;AAEI;AAAA;AAAA;AAAA;AAAA,iBAFJ;AAGI;AAAA;AAAA,sBAAQ,aAAR;AACQ,iCAAU,KAAKV,KAAL,CAAWa,gBAD7B;AAEQ,+BAAM,SAFd;AAAA;AAAA;AAHJ,aADJ;AASH;;;iCAEQ;AACL,gBAAI,KAAKb,KAAL,CAAWmC,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,uBAAO,sDAAP;AACH;;AAGD,gBAAI,KAAKnC,KAAL,CAAWmC,QAAX,CAAoBhB,MAApB,KAA+B,CAAnC,EAAsC;AAClC,uBAAO,KAAKe,UAAL,EAAP;AACH;;AAED,mBACI;AAAA;AAAA,kBAAK,WAAU,gCAAf;AACI,8CAAC,mBAAD,IAAqB,UAAW,KAAKlC,KAAL,CAAWmC,QAA3C;AACqB,oCAAiB,KAAKnC,KAAL,CAAWoC,cADjD;AAEqB,uCAAoB,KAAKpC,KAAL,CAAWqC,iBAFpD;AADJ,aADJ;AAOH;;;;;;IAGCC,mB;;;AACF,iCAAYtC,KAAZ,EAAmB;AAAA;;AAAA,yIACTA,KADS;AAElB;;;;iCAEQ;AAAA;;AACL,gBAAIuC,OAAO,KAAKvC,KAAL,CAAWmC,QAAX,CAAoBnB,GAApB,CAAwB,UAACK,OAAD,EAAUM,KAAV,EAAoB;AACnD,oBAAIa,WAAW,KAAf;;AAEA,oBAAI,OAAKxC,KAAL,CAAWoC,cAAX,KAA8B,IAAlC,EAAwC;AACpCI,+BAAW,OAAKxC,KAAL,CAAWoC,cAAX,CAA0BjC,EAA1B,KAAiCkB,QAAQlB,EAApD;AACH;;AAED,oBAAMkC,oBAAoB,SAApBA,iBAAoB;AAAA,2BAAM,OAAKrC,KAAL,CAAWqC,iBAAX,CAA6BhB,OAA7B,CAAN;AAAA,iBAA1B;;AAEA,uBACI;AAAA;AAAA,sBAAY,KAAMM,KAAlB;AACY,iCAAUU,iBADtB;AAEY,gCAASG,QAFrB;AAGI;AAAA;AAAA,0BAAmB,WAAnB;AAA2BnB,gCAAQW;AAAnC;AAHJ,iBADJ;AAOH,aAhBU,CAAX;;AAkBA,mBACI;AAAA;AAAA;AACI;AAAA;AAAA;AACI;AAAA;AAAA;AAAgB,6BAAKhC,KAAL,CAAWyC;AAA3B,qBADJ;AAEI;AAAA;AAAA,0BAAc,WAAU,uBAAxB;AACMF;AADN;AAFJ;AADJ,aADJ;AAUH;;;;;;kBAGUxC,Q","file":"programs.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport {\n    Button,\n    Input,\n} from \"reactstrap\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n    SectionTitle,\n} from \"../../../components/section\";\nimport { ProgramSidebarPane } from \"./sidebar_panes\";\nimport { ProgramFormModal } from \"../modals\";\n\n\nfunction fetchYears(onResult) {\n    graphql.query(`\n    {\n        academic_years {\n            academic_year_start\n        }\n    }\n    `).then(onResult);\n}\n\nfunction fetchPrograms(institutionID, year, onResult) {\n    graphql.query(`\n    {\n        outbound_programs(institution:${institutionID}, year:${year}) {\n            id\n            name\n            linkage {\n                name\n            }\n            academic_year {\n                academic_year_start\n            }\n            study_fields\n        }\n    }\n    `).then(onResult);\n}\n\nclass Programs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            institutionID : props.institution.id,\n            yearList : null,\n            activeYear : null,\n            programList : null,\n            activeProgram : null,\n            addProgramIsShowing : false,\n        };\n\n        this.setActiveYear = this.setActiveYear.bind(this);\n        this.setActiveProgram = this.setActiveProgram.bind(this);\n        this.refreshPrograms = this.refreshPrograms.bind(this);\n        this.toggleAddProgram = this.toggleAddProgram.bind(this);\n\n        fetchYears(result => {\n            const yearList = result.academic_years.map(academicYear => academicYear.academic_year_start);\n\n            if (yearList.length === 0) {\n                this.setState({\n                    yearList : [],\n                });\n\n                return;\n            }\n\n            const activeYear = yearList[0];\n\n            this.setState({\n                yearList : yearList,\n                activeYear : activeYear,\n            });\n\n            this.refreshPrograms(this.state.institutionID, activeYear);\n        });\n    }\n\n    toggleAddProgram() {\n        this.setState({\n            addProgramIsShowing : !this.state.addProgramIsShowing,\n        });\n    }\n\n    setActiveYear(year) {\n        this.setState({\n            activeYear : year,\n            activeProgram : null,\n            programList : null,\n        });\n\n        this.refreshPrograms(this.state.institutionID, year);\n    }\n\n    setActiveProgram(program) {\n        if (program === null) {\n            this.props.setSidebarContent(null);\n        }\n\n        this.props.setSidebarContent(\n            <ProgramSidebarPane program={ program }/>,\n        );\n\n        this.setState({\n            activeProgram : program,\n        });\n    }\n\n    // There might be a need to check for the activeYear\n    refreshPrograms(institution, year) {\n        fetchPrograms(institution, year, result => {\n            this.setState({\n                programList : result.outbound_programs,\n            });\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.institutionID === nextProps.institution.id) {\n            return;\n        }\n\n        this.props.setSidebarContent(null);\n\n        this.setState({\n            institutionID : nextProps.institution.id,\n            programList : null,\n            activeProgram : null,\n        });\n\n        this.refreshPrograms(nextProps.institution.id, this.state.activeYear);\n    }\n\n    render() {\n        if (this.state.yearList === null) {\n            return <LoadingSpinner/>;\n        }\n\n\n        return (\n            <div className=\"w-100 h-100 d-flex flex-column\">\n                <ProgramsHead institution={ this.props.institution }\n                              years={ this.state.yearList }\n                              toggleAddProgram={ this.toggleAddProgram }\n                              setActiveYear={ this.setActiveYear }/>\n                <ProgramsTable programs={ this.state.programList }\n                               currentProgram={ this.state.activeProgram }\n                               toggleAddProgram={ this.toggleAddProgram }\n                               setCurrentProgram={ this.setActiveProgram }/>\n                <ProgramFormModal toggle={ this.toggleAddProgram }\n                                  refresh={ () => this.refreshPrograms(this.state.institutionID, this.state.activeYear) }\n                                  isOpen={ this.state.addProgramIsShowing }\n                                  institution={ this.state.institutionID }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        if (this.props.years === null) {\n            return <LoadingSpinner/>;\n        }\n\n        const years = this.props.years.map((year, index) => {\n            return <option key={ index }\n                           value={ year }>{ year } - { year + 1 }</option>;\n        });\n\n        const onYearChange = event => {\n            this.props.setActiveYear(event.target.value);\n        };\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                    <h4 className=\"page-head-title mb-0\">{ this.props.institution.name }</h4>\n                </div>\n\n                <div className=\"page-head-actions d-flex flex-row align-items-end\">\n                    { this.props.years.length !== 0 &&\n                    <div className=\"d-flex flex-column mr-2\">\n                        <labl className=\"mr-3 text-dark mb-1\">Academic Year</labl>\n                        <Input type=\"select\"\n                               onChange={ onYearChange }\n                               className=\"mr-3 btn btn-outline-success select-sm\">\n                            { years }\n                        </Input>\n                    </div>\n                    }\n                    <Button outline\n                            size=\"sm\"\n                            onClick={ this.props.toggleAddProgram }\n                            color=\"success\">\n                        Add a Program\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ProgramsTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There's nothing here.</h3>\n                <p>When added, Programs will show up here.</p>\n                <Button outline\n                        onClick={ this.props.toggleAddProgram }\n                        color=\"success\">Add a program</Button>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.programs === null) {\n            return <LoadingSpinner/>;\n        }\n\n\n        if (this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        return (\n            <div className=\"w-100 h-100 d-flex flex-column\">\n                <ProgramsListSection programs={ this.props.programs }\n                                     currentProgram={ this.props.currentProgram }\n                                     setCurrentProgram={ this.props.setCurrentProgram }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsListSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let rows = this.props.programs.map((program, index) => {\n            let isActive = false;\n\n            if (this.props.currentProgram !== null) {\n                isActive = this.props.currentProgram.id === program.id;\n            }\n\n            const setCurrentProgram = () => this.props.setCurrentProgram(program);\n\n            return (\n                <SectionRow key={ index }\n                            onClick={ setCurrentProgram }\n                            active={ isActive }>\n                    <SectionRowContent large>{ program.name }</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <div>\n                <Section>\n                    <SectionTitle>{ this.props.children }</SectionTitle>\n                    <SectionTable className=\"memorandums-accordion\">\n                        { rows }\n                    </SectionTable>\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default Programs;"]}