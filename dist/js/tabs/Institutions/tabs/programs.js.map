{"version":3,"sources":["../../../../../js/tabs/Institutions/tabs/programs.js"],"names":["fetchPrograms","institutionID","onResponse","query","Programs","props","state","currentProgram","setCurrentProgram","bind","program","setState","institution","ProgramsHead","name","ProgramsTable","id","programList","response","data","programs","nextProps","ProgramsListSection","emptyState","console","log","length","rows","map","index","children"],"mappings":"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","file":"programs.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../loading\";\nimport { Button } from \"reactstrap\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n    SectionTitle,\n} from \"../../../components/section\";\n\nfunction fetchPrograms(institutionID, onResponse) {\n    graphql({\n        query : `\n        {\n            programs(institution:${institutionID}) {\n                name\n            }\n        }\n       `,\n        onResponse : onResponse,\n    });\n}\n\nclass Programs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentProgram : null,\n        };\n\n        this.setCurrentProgram = this.setCurrentProgram.bind(this);\n    }\n\n    setCurrentProgram(program) {\n        this.setState({\n            currentProgram : program,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"h-100 w-100\">\n                <ProgramsHead institution={ this.props.institution }/>\n                <ProgramsTable institution={ this.props.institution } setCurrentProgram={ this.setCurrentProgram }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    toggleAddPrograms() {\n        //TODO\n    }\n\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                    <h4 className=\"page-head-title mb-0\">{ this.props.institution.name }</h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline size=\"sm\" color=\"success\">\n                        Add a Program\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ProgramsTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            institutionID : props.institution.id,\n            programList : null,\n        };\n\n        fetchPrograms(props.institution.id, response => {\n            this.setState({\n                programList : response.data.programs,\n            });\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.institutionID === nextProps.institution.id) {\n            return;\n        }\n\n        this.setState({\n            institutionID : nextProps.institution.id,\n            programList : null,\n        });\n\n        fetchPrograms(nextProps.institution.id, response => {\n            this.setState({\n                programList : response.data.programs,\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"w-100\">\n                <ProgramsListSection programs={ this.state.programList }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsListSection extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        // TODO\n        return (\n            <div>\n                This is empty\n            </div>\n        );\n    }\n\n    render() {\n        console.log(this.props.programs);\n\n        if (this.props.programs === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        let rows = this.props.programs.map((program, index) => {\n            //TODO: onClick\n            return (\n                <SectionRow key={ index }>\n                    <SectionRowContent large>{ program.name }</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <div>\n                <Section>\n                    <SectionTitle>{ this.props.children }</SectionTitle>\n                    <SectionTable className=\"memorandums-accordion\">\n                        { rows }\n                    </SectionTable>\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default Programs;"]}