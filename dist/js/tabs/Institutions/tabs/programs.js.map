{"version":3,"sources":["../../../../../js/tabs/Institutions/tabs/programs.js"],"names":["makeYearsQuery","query","makeProgramsQuery","institutionID","year","Programs","props","state","yearList","activeYear","programList","activeProgram","addProgramIsShowing","error","fetchYears","bind","fetchPrograms","setActiveYear","setActiveProgram","toggleAddProgram","setState","then","result","academic_years","map","academicYear","academic_year_start","length","institution","id","catch","outbound_programs","program","setSidebarContent","nextProps","onRetryButtonClick","toString","ProgramsHead","years","index","onYearChange","event","target","value","name","localStorage","userType","ProgramsTable","emptyState","programs","currentProgram","setCurrentProgram","ProgramsListSection","rows","isActive","children"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAIA;;AAOA;;AACA;;AACA;;;;;;;;;;;;AAGA,SAASA,cAAT,GAA0B;AACtB,WAAO,kBAAQC,KAAR,8FAAP;AAOH;;AAED,SAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,IAA1C,EAAgD;AAC5C,WAAO,kBAAQH,KAAR,qDAE6BE,aAF7B,eAEoDC,IAFpD,gNAAP;AAcH;;IAEKC,Q;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wHACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,sBAAW,IADF;AAETC,wBAAa,IAFJ;AAGTC,yBAAc,IAHL;AAITC,2BAAgB,IAJP;AAKTC,iCAAsB,KALb;AAMTC,mBAAQ;AANC,SAAb;;AASA,cAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AACA,cAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,OAArB;AACA,cAAKE,aAAL,GAAqB,MAAKA,aAAL,CAAmBF,IAAnB,OAArB;AACA,cAAKG,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBH,IAAtB,OAAxB;AACA,cAAKI,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBJ,IAAtB,OAAxB;;AAEA,cAAKD,UAAL;AAlBe;AAmBlB;;;;qCAEY;AAAA;;AACT,gBAAI,KAAKP,KAAL,CAAWM,KAAf,EAAsB;AAClB,qBAAKO,QAAL,CAAc;AACVP,2BAAQ;AADE,iBAAd;AAGH;;AAEDb,6BACKqB,IADL,CACU,kBAAU;AACZ,oBAAMb,WAAWc,OAAOC,cAAP,CAAsBC,GAAtB,CAA0B;AAAA,2BAAgBC,aAAaC,mBAA7B;AAAA,iBAA1B,CAAjB;;AAEA,oBAAIlB,SAASmB,MAAT,KAAoB,CAAxB,EAA2B;AACvB,2BAAKP,QAAL,CAAc;AACVZ,kCAAW;AADD,qBAAd;;AAIA;AACH;;AAED,oBAAMC,aAAaD,SAAS,CAAT,CAAnB;;AAEA,uBAAKY,QAAL,CAAc;AACVZ,8BAAWA,QADD;AAEVC,gCAAaA;AAFH,iBAAd;;AAKA,uBAAKO,aAAL,CAAmB,OAAKV,KAAL,CAAWsB,WAAX,CAAuBC,EAA1C,EAA8CpB,UAA9C;AACH,aApBL,EAqBKqB,KArBL,CAqBW;AAAA,uBAAS,OAAKV,QAAL,CAAc;AAC1BP,2BAAQA;AADkB,iBAAd,CAAT;AAAA,aArBX;AAwBH;;AAED;;;;sCACce,W,EAAaxB,I,EAAM;AAAA;;AAC7B,gBAAI,KAAKG,KAAL,CAAWM,KAAf,EAAsB;AAClB,qBAAKO,QAAL,CAAc;AACVP,2BAAQ;AADE,iBAAd;AAGH;;AAEDX,8BAAkB0B,WAAlB,EAA+BxB,IAA/B,EACKiB,IADL,CACU,kBAAU;AACZ,uBAAKD,QAAL,CAAc;AACVV,iCAAcY,OAAOS;AADX,iBAAd;AAGH,aALL,EAMKD,KANL,CAMW;AAAA,uBAAS,OAAKV,QAAL,CAAc;AAC1BP,2BAAQA;AADkB,iBAAd,CAAT;AAAA,aANX;AAUH;;;2CAEkB;AACf,iBAAKO,QAAL,CAAc;AACVR,qCAAsB,CAAC,KAAKL,KAAL,CAAWK;AADxB,aAAd;AAGH;;;sCAEaR,I,EAAM;AAChB,iBAAKgB,QAAL,CAAc;AACVX,4BAAaL,IADH;AAEVO,+BAAgB,IAFN;AAGVD,6BAAc;AAHJ,aAAd;;AAMA,iBAAKM,aAAL,CAAmB,KAAKV,KAAL,CAAWsB,WAAX,CAAuBC,EAA1C,EAA8CzB,IAA9C;AACH;;;yCAEgB4B,O,EAAS;AACtB,gBAAIA,YAAY,IAAhB,EAAsB;AAClB,qBAAK1B,KAAL,CAAW2B,iBAAX,CAA6B,IAA7B;AACH;;AAED,iBAAK3B,KAAL,CAAW2B,iBAAX,CACI,mEAAoB,SAAUD,OAA9B,GADJ;;AAIA,iBAAKZ,QAAL,CAAc;AACVT,+BAAgBqB;AADN,aAAd;AAGH;;;kDAEyBE,S,EAAW;AACjC,gBAAI,KAAK5B,KAAL,CAAWsB,WAAX,CAAuBC,EAAvB,KAA8BK,UAAUN,WAAV,CAAsBC,EAAxD,EAA4D;AACxD;AACH;;AAED,iBAAKvB,KAAL,CAAW2B,iBAAX,CAA6B,IAA7B;;AAEA,iBAAKb,QAAL,CAAc;AACVV,6BAAc,IADJ;AAEVC,+BAAgB;AAFN,aAAd;;AAKA,iBAAKK,aAAL,CAAmBkB,UAAUN,WAAV,CAAsBC,EAAzC,EAA6C,KAAKtB,KAAL,CAAWE,UAAxD;AACH;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKF,KAAL,CAAWM,KAAf,EAAsB;AAClB,oBAAMsB,qBAAqB,KAAK5B,KAAL,CAAWC,QAAX,KAAwB,IAAxB,GACvB;AAAA,2BAAM,OAAKM,UAAL,EAAN;AAAA,iBADuB,GAEvB;AAAA,2BAAM,OAAKE,aAAL,CAAmB,OAAKV,KAAL,CAAWsB,WAAX,CAAuBC,EAA1C,EAA8C,OAAKtB,KAAL,CAAWE,UAAzD,CAAN;AAAA,iBAFJ;;AAIA,uBACI;AAAA;AAAA,sBAAY,oBAAqB0B,kBAAjC;AACM,yBAAK5B,KAAL,CAAWM,KAAX,CAAiBuB,QAAjB;AADN,iBADJ;AAKH;;AAED,gBAAI,KAAK7B,KAAL,CAAWC,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,uBAAO,sDAAP;AACH;;AAGD,mBACI;AAAA;AAAA,kBAAK,WAAU,gCAAf;AACI,8CAAC,YAAD,IAAc,aAAc,KAAKF,KAAL,CAAWsB,WAAvC;AACc,2BAAQ,KAAKrB,KAAL,CAAWC,QADjC;AAEc,sCAAmB,KAAKW,gBAFtC;AAGc,mCAAgB,KAAKF,aAHnC,GADJ;AAKI,8CAAC,aAAD,IAAe,UAAW,KAAKV,KAAL,CAAWG,WAArC;AACe,oCAAiB,KAAKH,KAAL,CAAWI,aAD3C;AAEe,sCAAmB,KAAKQ,gBAFvC;AAGe,uCAAoB,KAAKD,gBAHxC,GALJ;AASI,0EAAkB,QAAS,KAAKC,gBAAhC;AACkB,6BAAU;AAAA,+BAAM,OAAKH,aAAL,CAAmB,OAAKV,KAAL,CAAWsB,WAAX,CAAuBC,EAA1C,EAA8C,OAAKtB,KAAL,CAAWE,UAAzD,CAAN;AAAA,qBAD5B;AAEkB,4BAAS,KAAKF,KAAL,CAAWK,mBAFtC;AAGkB,iCAAc,KAAKN,KAAL,CAAWsB,WAAX,CAAuBC,EAHvD;AATJ,aADJ;AAgBH;;;;;;IAGCQ,Y;;;AACF,0BAAY/B,KAAZ,EAAmB;AAAA;;AAAA,2HACTA,KADS;AAElB;;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKA,KAAL,CAAWgC,KAAX,KAAqB,IAAzB,EAA+B;AAC3B,uBAAO,sDAAP;AACH;;AAED,gBAAMA,QAAQ,KAAKhC,KAAL,CAAWgC,KAAX,CAAiBd,GAAjB,CAAqB,UAACpB,IAAD,EAAOmC,KAAP,EAAiB;AAChD,uBAAO;AAAA;AAAA,sBAAQ,KAAMA,KAAd;AACQ,+BAAQnC,IADhB;AACyBA,wBADzB;AAAA;AACoCA,2BAAO;AAD3C,iBAAP;AAEH,aAHa,CAAd;;AAKA,gBAAMoC,eAAe,SAAfA,YAAe,QAAS;AAC1B,uBAAKlC,KAAL,CAAWW,aAAX,CAAyBwB,MAAMC,MAAN,CAAaC,KAAtC;AACH,aAFD;;AAIA,mBACI;AAAA;AAAA,kBAAK,WAAU,gDAAf;AACI;AAAA;AAAA,sBAAK,WAAU,SAAf;AACI;AAAA;AAAA,0BAAI,WAAU,qBAAd;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA,0BAAI,WAAU,sBAAd;AAAuC,6BAAKrC,KAAL,CAAWsB,WAAX,CAAuBgB;AAA9D;AAFJ,iBADJ;AAMI;AAAA;AAAA,sBAAK,WAAU,mDAAf;AACM,yBAAKtC,KAAL,CAAWgC,KAAX,CAAiBX,MAAjB,KAA4B,CAA5B,IACF;AAAA;AAAA,0BAAK,WAAU,yBAAf;AACI;AAAA;AAAA,8BAAO,WAAU,qBAAjB;AAAA;AAAA,yBADJ;AAEI;AAAA;AAAA,8BAAO,MAAK,QAAZ;AACO,0CAAWa,YADlB;AAEO,2CAAU,wCAFjB;AAGMF;AAHN;AAFJ,qBAFJ;AAWMO,iCAAaC,QAAb,KAA0B,0BAA1B,IAAwD;AAAA;AAAA,0BAAQ,aAAR;AACQ,kCAAK,IADb;AAEQ,qCAAU,KAAKxC,KAAL,CAAWa,gBAF7B;AAGQ,mCAAM,SAHd;AAAA;AAAA;AAX9D;AANJ,aADJ;AA2BH;;;;;;IAGC4B,a;;;AACF,2BAAYzC,KAAZ,EAAmB;AAAA;;AAAA,mIACTA,KADS;;AAGf,eAAK0C,UAAL,GAAkB,OAAKA,UAAL,CAAgBjC,IAAhB,QAAlB;AAHe;AAIlB;;;;qCAEY;AACT,mBACI;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACI;AAAA;AAAA;AAAA;AAAA,iBADJ;AAEI;AAAA;AAAA;AAAA;AAAA,iBAFJ;AAGM8B,6BAAaC,QAAb,KAA0B,0BAA1B,IAAwD;AAAA;AAAA,sBAAQ,aAAR;AACQ,iCAAU,KAAKxC,KAAL,CAAWa,gBAD7B;AAEQ,+BAAM,SAFd;AAAA;AAAA;AAH9D,aADJ;AAUH;;;iCAEQ;AACL,gBAAI,KAAKb,KAAL,CAAW2C,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,uBAAO,sDAAP;AACH;;AAGD,gBAAI,KAAK3C,KAAL,CAAW2C,QAAX,CAAoBtB,MAApB,KAA+B,CAAnC,EAAsC;AAClC,uBAAO,KAAKqB,UAAL,EAAP;AACH;;AAED,mBACI;AAAA;AAAA,kBAAK,WAAU,gCAAf;AACI,8CAAC,mBAAD,IAAqB,UAAW,KAAK1C,KAAL,CAAW2C,QAA3C;AACqB,oCAAiB,KAAK3C,KAAL,CAAW4C,cADjD;AAEqB,uCAAoB,KAAK5C,KAAL,CAAW6C,iBAFpD;AADJ,aADJ;AAOH;;;;;;IAGCC,mB;;;AACF,iCAAY9C,KAAZ,EAAmB;AAAA;;AAAA,yIACTA,KADS;AAElB;;;;iCAEQ;AAAA;;AACL,gBAAI+C,OAAO,KAAK/C,KAAL,CAAW2C,QAAX,CAAoBzB,GAApB,CAAwB,UAACQ,OAAD,EAAUO,KAAV,EAAoB;AACnD,oBAAIe,WAAW,KAAf;;AAEA,oBAAI,OAAKhD,KAAL,CAAW4C,cAAX,KAA8B,IAAlC,EAAwC;AACpCI,+BAAW,OAAKhD,KAAL,CAAW4C,cAAX,CAA0BrB,EAA1B,KAAiCG,QAAQH,EAApD;AACH;;AAED,oBAAMsB,oBAAoB,SAApBA,iBAAoB;AAAA,2BAAM,OAAK7C,KAAL,CAAW6C,iBAAX,CAA6BnB,OAA7B,CAAN;AAAA,iBAA1B;;AAEA,uBACI;AAAA;AAAA,sBAAY,KAAMO,KAAlB;AACY,iCAAUY,iBADtB;AAEY,gCAASG,QAFrB;AAGI;AAAA;AAAA,0BAAmB,WAAnB;AAA2BtB,gCAAQY;AAAnC;AAHJ,iBADJ;AAOH,aAhBU,CAAX;;AAkBA,mBACI;AAAA;AAAA;AACI;AAAA;AAAA;AACI;AAAA;AAAA;AAAgB,6BAAKtC,KAAL,CAAWiD;AAA3B,qBADJ;AAEI;AAAA;AAAA,0BAAc,WAAU,uBAAxB;AACMF;AADN;AAFJ;AADJ,aADJ;AAUH;;;;;;kBAGUhD,Q","file":"programs.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport {\n    Button,\n    Input,\n} from \"reactstrap\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n    SectionTitle,\n} from \"../../../components/section\";\nimport { ProgramSidebarPane } from \"./sidebar_panes\";\nimport { ProgramFormModal } from \"../modals\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeYearsQuery() {\n    return graphql.query(`\n    {\n        academic_years {\n            academic_year_start\n        }\n    }\n    `);\n}\n\nfunction makeProgramsQuery(institutionID, year) {\n    return graphql.query(`\n    {\n        outbound_programs(institution:${institutionID}, year:${year}) {\n            id\n            name\n            linkage {\n                name\n            }\n            academic_year {\n                academic_year_start\n            }\n        }\n    }\n    `);\n}\n\nclass Programs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            yearList : null,\n            activeYear : null,\n            programList : null,\n            activeProgram : null,\n            addProgramIsShowing : false,\n            error : null,\n        };\n\n        this.fetchYears = this.fetchYears.bind(this);\n        this.fetchPrograms = this.fetchPrograms.bind(this);\n        this.setActiveYear = this.setActiveYear.bind(this);\n        this.setActiveProgram = this.setActiveProgram.bind(this);\n        this.toggleAddProgram = this.toggleAddProgram.bind(this);\n\n        this.fetchYears();\n    }\n\n    fetchYears() {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeYearsQuery()\n            .then(result => {\n                const yearList = result.academic_years.map(academicYear => academicYear.academic_year_start);\n\n                if (yearList.length === 0) {\n                    this.setState({\n                        yearList : [],\n                    });\n\n                    return;\n                }\n\n                const activeYear = yearList[0];\n\n                this.setState({\n                    yearList : yearList,\n                    activeYear : activeYear,\n                });\n\n                this.fetchPrograms(this.props.institution.id, activeYear);\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    // There might be a need to check for the activeYear\n    fetchPrograms(institution, year) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeProgramsQuery(institution, year)\n            .then(result => {\n                this.setState({\n                    programList : result.outbound_programs,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }))\n        ;\n    }\n\n    toggleAddProgram() {\n        this.setState({\n            addProgramIsShowing : !this.state.addProgramIsShowing,\n        });\n    }\n\n    setActiveYear(year) {\n        this.setState({\n            activeYear : year,\n            activeProgram : null,\n            programList : null,\n        });\n\n        this.fetchPrograms(this.props.institution.id, year);\n    }\n\n    setActiveProgram(program) {\n        if (program === null) {\n            this.props.setSidebarContent(null);\n        }\n\n        this.props.setSidebarContent(\n            <ProgramSidebarPane program={ program }/>,\n        );\n\n        this.setState({\n            activeProgram : program,\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.institution.id === nextProps.institution.id) {\n            return;\n        }\n\n        this.props.setSidebarContent(null);\n\n        this.setState({\n            programList : null,\n            activeProgram : null,\n        });\n\n        this.fetchPrograms(nextProps.institution.id, this.state.activeYear);\n    }\n\n    render() {\n        if (this.state.error) {\n            const onRetryButtonClick = this.state.yearList === null ?\n                () => this.fetchYears() :\n                () => this.fetchPrograms(this.props.institution.id, this.state.activeYear);\n\n            return (\n                <ErrorState onRetryButtonClick={ onRetryButtonClick }>\n                    { this.state.error.toString() }\n                </ErrorState>\n            );\n        }\n\n        if (this.state.yearList === null) {\n            return <LoadingSpinner/>;\n        }\n\n\n        return (\n            <div className=\"w-100 h-100 d-flex flex-column\">\n                <ProgramsHead institution={ this.props.institution }\n                              years={ this.state.yearList }\n                              toggleAddProgram={ this.toggleAddProgram }\n                              setActiveYear={ this.setActiveYear }/>\n                <ProgramsTable programs={ this.state.programList }\n                               currentProgram={ this.state.activeProgram }\n                               toggleAddProgram={ this.toggleAddProgram }\n                               setCurrentProgram={ this.setActiveProgram }/>\n                <ProgramFormModal toggle={ this.toggleAddProgram }\n                                  refresh={ () => this.fetchPrograms(this.props.institution.id, this.state.activeYear) }\n                                  isOpen={ this.state.addProgramIsShowing }\n                                  institution={ this.props.institution.id }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsHead extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        if (this.props.years === null) {\n            return <LoadingSpinner/>;\n        }\n\n        const years = this.props.years.map((year, index) => {\n            return <option key={ index }\n                           value={ year }>{ year } - { year + 1 }</option>;\n        });\n\n        const onYearChange = event => {\n            this.props.setActiveYear(event.target.value);\n        };\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Programs</h5>\n                    <h4 className=\"page-head-title mb-0\">{ this.props.institution.name }</h4>\n                </div>\n\n                <div className=\"page-head-actions d-flex flex-row align-items-end\">\n                    { this.props.years.length !== 0 &&\n                    <div className=\"d-flex flex-column mr-2\">\n                        <label className=\"mr-3 text-dark mb-1\">Academic Year</label>\n                        <Input type=\"select\"\n                               onChange={ onYearChange }\n                               className=\"mr-3 btn btn-outline-success select-sm\">\n                            { years }\n                        </Input>\n                    </div>\n                    }\n                    { localStorage.userType !== \"administrative_assistant\" && <Button outline\n                                                                                      size=\"sm\"\n                                                                                      onClick={ this.props.toggleAddProgram }\n                                                                                      color=\"success\">\n                        Add a Program\n                    </Button> }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ProgramsTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There's nothing here.</h3>\n                <p>When added, Programs will show up here.</p>\n                { localStorage.userType !== \"administrative_assistant\" && <Button outline\n                                                                                  onClick={ this.props.toggleAddProgram }\n                                                                                  color=\"success\">Add a\n                    program</Button> }\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.programs === null) {\n            return <LoadingSpinner/>;\n        }\n\n\n        if (this.props.programs.length === 0) {\n            return this.emptyState();\n        }\n\n        return (\n            <div className=\"w-100 h-100 d-flex flex-column\">\n                <ProgramsListSection programs={ this.props.programs }\n                                     currentProgram={ this.props.currentProgram }\n                                     setCurrentProgram={ this.props.setCurrentProgram }/>\n            </div>\n        );\n    }\n}\n\nclass ProgramsListSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let rows = this.props.programs.map((program, index) => {\n            let isActive = false;\n\n            if (this.props.currentProgram !== null) {\n                isActive = this.props.currentProgram.id === program.id;\n            }\n\n            const setCurrentProgram = () => this.props.setCurrentProgram(program);\n\n            return (\n                <SectionRow key={ index }\n                            onClick={ setCurrentProgram }\n                            active={ isActive }>\n                    <SectionRowContent large>{ program.name }</SectionRowContent>\n                </SectionRow>\n            );\n        });\n\n        return (\n            <div>\n                <Section>\n                    <SectionTitle>{ this.props.children }</SectionTitle>\n                    <SectionTable className=\"memorandums-accordion\">\n                        { rows }\n                    </SectionTable>\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default Programs;"]}