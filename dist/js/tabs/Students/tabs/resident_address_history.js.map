{"version":3,"sources":["../../../../../js/tabs/Students/tabs/resident_address_history.js"],"names":["fetchHistory","id","onResult","query","then","ResidentAddressHistory","props","state","student","studentId","residenceList","activeResidenceId","setState","result","residencies","setActiveResidence","bind","refreshResidences","residence","console","log","setSidebarContent","nextProps","HistoryHead","addResidenceIsShowing","toggleAddResidence","first_name","middle_name","family_name","id_number","HistoryBody","emptyState","residences","length","rows","map","index","onResidenceRowClick","isActive","ResidenceRow","formatDate","date","format","dateEffective","date_effective","onClick","latest"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;AAUA;;;;;;;;;;AADA;;;AAGA,SAASA,YAAT,CAAsBC,EAAtB,EAA0BC,QAA1B,EAAoC;AAChC,sBAAQC,KAAR,kCAEiBF,EAFjB,6WAkBAG,IAlBA,CAkBKF,QAlBL;AAmBH;;IAEKG,sB;;;AACF,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA,oJACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,qBAAUF,MAAME,OADP;AAETC,uBAAYH,MAAME,OAAN,CAAcP,EAFjB;AAGTS,2BAAgB,IAHP;AAITC,+BAAoB;AAJX,SAAb;;AAOAX,qBAAa,MAAKO,KAAL,CAAWE,SAAxB,EAAmC,kBAAU;AACzC,kBAAKG,QAAL,CAAc;AACVF,+BAAgBG,OAAOL,OAAP,CAAeM;AADrB,aAAd;AAGH,SAJD;;AAMA,cAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,OAA1B;AACA,cAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,OAAzB;AAjBe;AAkBlB;;;;2CAEkBE,S,EAAW;AAC1BC,oBAAQC,GAAR,CAAYF,SAAZ;AACA,gBAAIA,cAAc,IAAlB,EAAwB;AACpB,qBAAKZ,KAAL,CAAWe,iBAAX,CAA6B,IAA7B;AACH;;AAED,iBAAKf,KAAL,CAAWe,iBAAX,CACI,qEAAsB,WAAYH,SAAlC,GADJ;;AAIA,iBAAKN,QAAL,CAAc;AACVD,mCAAoBO,UAAUjB;AADpB,aAAd;AAGH;;;4CAEmB;AAAA;;AAChBD,yBAAa,KAAKO,KAAL,CAAWE,SAAxB,EAAmC,kBAAU;AACzC,uBAAKG,QAAL,CAAc;AACVF,mCAAgBG,OAAOL,OAAP,CAAeM;AADrB,iBAAd;AAGH,aAJD;AAKH;;;kDAEyBQ,S,EAAW;AAAA;;AACjC,gBAAI,KAAKf,KAAL,CAAWE,SAAX,KAAyBa,UAAUd,OAAV,CAAkBP,EAA/C,EAAmD;AAC/C;AACH;;AAED;;AAEA,iBAAKW,QAAL,CAAc;AACVH,2BAAYa,UAAUd,OAAV,CAAkBP,EADpB;AAEVO,yBAAUc,UAAUd,OAFV;AAGVG,mCAAoB;AAHV,aAAd;;AAMAX,yBAAa,KAAKO,KAAL,CAAWE,SAAxB,EAAmC,kBAAU;AACzC,uBAAKG,QAAL,CAAc;AACVF,mCAAgBG,OAAOL,OAAP,CAAeM;AADrB,iBAAd;AAGH,aAJD;AAKH;;;iCAEQ;AACL,gBAAI,KAAKP,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC7B,uBAAO,sDAAP;AACH;;AAED,mBACI;AAAA;AAAA,kBAAK,WAAU,8BAAf;AACI,8CAAC,WAAD,IAAa,SAAU,KAAKD,KAAL,CAAWC,OAAlC,GADJ;AAEI,8CAAC,WAAD,IAAa,YAAa,KAAKD,KAAL,CAAWG,aAArC;AACa,uCAAoB,KAAKH,KAAL,CAAWI,iBAD5C;AAEa,wCAAqB,KAAKI,kBAFvC;AAFJ,aADJ;AAQH;;;;;;IAGCQ,W;;;AACF,yBAAYjB,KAAZ,EAAmB;AAAA;;AAAA,+HACTA,KADS;;AAGf,eAAKC,KAAL,GAAa;AACTiB,mCAAwB;AADf,SAAb;;AAIA,eAAKC,kBAAL,GAA0B,OAAKA,kBAAL,CAAwBT,IAAxB,QAA1B;AAPe;AAQlB;;;;6CAEoB;AACjB,iBAAKJ,QAAL,CAAc;AACVY,uCAAwB,CAAC,KAAKjB,KAAL,CAAWiB;AAD1B,aAAd;AAGH;;;iCAEQ;AACL,gBAAMhB,UAAU,KAAKF,KAAL,CAAWE,OAA3B;;AAEA,mBACI;AAAA;AAAA,kBAAK,WAAU,gDAAf;AACI;AAAA;AAAA,sBAAK,WAAU,SAAf;AACI;AAAA;AAAA,0BAAI,WAAU,qBAAd;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA,0BAAI,WAAU,sBAAd;AACMA,gCAAQkB,UADd;AAAA;AAC6BlB,gCAAQmB,WADrC;AAAA;AACqDnB,gCAAQoB,WAD7D;AAEI;AAAA;AAAA,8BAAO,WAAU,iBAAjB;AAAqC,iCAAKtB,KAAL,CAAWE,OAAX,CAAmBqB;AAAxD;AAFJ;AAFJ,iBADJ;AASI;AAAA;AAAA,sBAAK,WAAU,mBAAf;AACI;AAAA;AAAA,0BAAQ,aAAR,EAAgB,MAAK,IAArB,EAA0B,OAAM,SAAhC,EAA0C,SAAU,KAAKJ,kBAAzD;AAAA;AAAA;AADJ;AATJ,aADJ;AAkBH;;;;;;IAGCK,W;;;AACF,yBAAYxB,KAAZ,EAAmB;AAAA;;AAAA,+HACTA,KADS;;AAGf,eAAKyB,UAAL,GAAkB,OAAKA,UAAL,CAAgBf,IAAhB,QAAlB;AAHe;AAIlB;;;;qCAEY;AACT,mBACI;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACI;AAAA;AAAA;AAAA;AAAA;AADJ,aADJ;AAKH;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKV,KAAL,CAAW0B,UAAX,KAA0B,IAA9B,EAAoC;AAChC,uBAAO,sDAAP;AACH;;AAED,gBAAI,KAAK1B,KAAL,CAAW0B,UAAX,CAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,uBAAO,KAAKF,UAAL,EAAP;AACH;;AAED,gBAAMG,OAAO,KAAK5B,KAAL,CAAW0B,UAAX,CAAsBG,GAAtB,CAA0B,UAACjB,SAAD,EAAYkB,KAAZ,EAAsB;AACzD,oBAAMC,sBAAsB,SAAtBA,mBAAsB;AAAA,2BAAM,OAAK/B,KAAL,CAAWS,kBAAX,CAA8BG,SAA9B,CAAN;AAAA,iBAA5B;;AAEA,oBAAIoB,WAAW,KAAf;;AAEA,oBAAI,OAAKhC,KAAL,CAAWK,iBAAX,KAAiC,IAArC,EAA2C;AACvC2B,+BAAW,OAAKhC,KAAL,CAAWK,iBAAX,KAAiCO,UAAUjB,EAAtD;AACH;;AAED,uBAAO,8BAAC,YAAD,IAAc,KAAMmC,KAApB;AACc,+BAAYlB,SAD1B;AAEc,8BAAWoB,QAFzB;AAGc,6BAAUD,mBAHxB;AAIc,4BAASD,UAAU,CAJjC,GAAP;AAKH,aAdY,CAAb;;AAgBA,mBACI;AAAA;AAAA,kBAAK,WAAU,iBAAf;AACI;AAAA;AAAA,sBAAK,WAAU,2BAAf;AACI;AAAA;AAAA,0BAAK,WAAU,OAAf;AACI;AAAA;AAAA;AAAA;AAAA,yBADJ;AAEI;AAAA;AAAA;AACMF;AADN;AAFJ;AADJ;AADJ,aADJ;AAYH;;;;;;IAGCK,Y;;;AACF,0BAAYjC,KAAZ,EAAmB;AAAA;;AAAA,2HACTA,KADS;AAElB;;;;iCAEQ;AACL,gBAAMY,YAAY,KAAKZ,KAAL,CAAWY,SAA7B;;AAEA,qBAASsB,UAAT,CAAoBC,IAApB,EAA0B;AACtB,uBAAO,sBAAOA,IAAP,EAAaC,MAAb,CAAoB,IAApB,CAAP;AACH;;AAED,gBAAMC,gBAAgBH,WAAWtB,UAAU0B,cAArB,CAAtB;;AAEA,mBACI;AAAA;AAAA,kBAAY,gBAAZ;AACY,6BAAU,KAAKtC,KAAL,CAAWuC,OADjC;AAEY,4BAAS,KAAKvC,KAAL,CAAWgC,QAFhC;AAGM,qBAAKhC,KAAL,CAAWwC,MAAX,IACF;AAAA;AAAA;AAAA;AAAA,iBAJJ;AAMI;AAAA;AAAA,sBAAmB,WAAnB;AAAA;AAAqCH;AAArC;AANJ,aADJ;AAUH;;;;;;kBAGUtC,sB","file":"resident_address_history.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\n\nimport { Button, } from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\n\n// TODO: import modals for editing and adding\nimport { ResidenceSidebarPane } from \"./sidebar_panes\";\n\nfunction fetchHistory(id, onResult) {\n    graphql.query(`\n    {\n        student(id:${id}) {\n            id\n            id_number\n            first_name\n            middle_name\n            family_name\n            residencies {\n                id\n                date_effective\n                contact_person_name\n                contact_person_number\n                address\n                residence\n            }\n        }\n\t}\n\t`).then(onResult);\n}\n\nclass ResidentAddressHistory extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : props.student,\n            studentId : props.student.id,\n            residenceList : null,\n            activeResidenceId : null,\n        };\n\n        fetchHistory(this.state.studentId, result => {\n            this.setState({\n                residenceList : result.student.residencies,\n            });\n        });\n\n        this.setActiveResidence = this.setActiveResidence.bind(this);\n        this.refreshResidences = this.refreshResidences.bind(this);\n    }\n\n    setActiveResidence(residence) {\n        console.log(residence);\n        if (residence === null) {\n            this.props.setSidebarContent(null);\n        }\n\n        this.props.setSidebarContent(\n            <ResidenceSidebarPane residence={ residence }/>,\n        );\n\n        this.setState({\n            activeResidenceId : residence.id,\n        });\n    }\n\n    refreshResidences() {\n        fetchHistory(this.state.studentId, result => {\n            this.setState({\n                residenceList : result.student.residencies,\n            });\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.studentId === nextProps.student.id) {\n            return;\n        }\n\n        // TODO: set sidebar content to null\n\n        this.setState({\n            studentId : nextProps.student.id,\n            student : nextProps.student,\n            activeResidenceId : null,\n        });\n\n        fetchHistory(this.state.studentId, result => {\n            this.setState({\n                residenceList : result.student.residencies,\n            });\n        });\n    }\n\n    render() {\n        if (this.state.student === null) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <HistoryHead student={ this.state.student }/>\n                <HistoryBody residences={ this.state.residenceList }\n                             activeResidenceId={ this.state.activeResidenceId }\n                             setActiveResidence={ this.setActiveResidence }/>\n            </div>\n        );\n    }\n}\n\nclass HistoryHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            addResidenceIsShowing : false,\n        };\n\n        this.toggleAddResidence = this.toggleAddResidence.bind(this);\n    }\n\n    toggleAddResidence() {\n        this.setState({\n            addResidenceIsShowing : !this.state.addResidenceIsShowing,\n        });\n    }\n\n    render() {\n        const student = this.props.student;\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Resident Address History</h5>\n                    <h4 className=\"page-head-title mb-0\">\n                        { student.first_name } { student.middle_name } { student.family_name }\n                        <small className=\"text-muted ml-2\">{ this.props.student.id_number }</small>\n                    </h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline size=\"sm\" color=\"success\" onClick={ this.toggleAddResidence }>Add a\n                        Residence</Button>\n                </div>\n\n                { /* Residence Form Modal */ }\n            </div>\n        );\n    }\n}\n\nclass HistoryBody extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There are no residences for this student</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.residences === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.residences.length === 0) {\n            return this.emptyState();\n        }\n\n        const rows = this.props.residences.map((residence, index) => {\n            const onResidenceRowClick = () => this.props.setActiveResidence(residence);\n\n            let isActive = false;\n\n            if (this.props.activeResidenceId !== null) {\n                isActive = this.props.activeResidenceId === residence.id;\n            }\n\n            return <ResidenceRow key={ index }\n                                 residence={ residence }\n                                 isActive={ isActive }\n                                 onClick={ onResidenceRowClick }\n                                 latest={ index === 0 }/>;\n        });\n\n        return (\n            <div className=\"page-body w-100\">\n                <div className=\"d-flex h-100 p-0 flex-row\">\n                    <div className=\"w-100\">\n                        <SectionTitle>Residences</SectionTitle>\n                        <SectionTable>\n                            { rows }\n                        </SectionTable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ResidenceRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const residence = this.props.residence;\n\n        function formatDate(date) {\n            return moment(date).format(\"LL\");\n        }\n\n        const dateEffective = formatDate(residence.date_effective);\n\n        return (\n            <SectionRow selectable\n                        onClick={ this.props.onClick }\n                        active={ this.props.isActive }>\n                { this.props.latest &&\n                <SectionRowTitle>Latest Residence</SectionRowTitle>\n                }\n                <SectionRowContent large>Effective { dateEffective }</SectionRowContent>\n            </SectionRow>\n        );\n    }\n}\n\nexport default ResidentAddressHistory;"]}