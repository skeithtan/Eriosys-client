{"version":3,"sources":["../../../../../js/tabs/Students/tabs/resident_address_history.js"],"names":["fetchHistory","id","onResult","query","then","ResidentAddressHistory","props","state","student","studentId","residenceList","activeResidenceId","addResidenceIsShowing","setState","result","residencies","toggleAddResidence","bind","setActiveResidence","refreshResidences","residence","setSidebarContent","HistoryHead","first_name","middle_name","family_name","id_number","HistoryBody","emptyState","residences","length","sections","map","index","onResidenceRowClick","isActive","ResidenceRow","formatDate","date","format","dateEffective","date_effective","onClick","latest","address"],"mappings":"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","file":"resident_address_history.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\n\nimport { Button, } from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\n\n// TODO: import modals for editing and adding\nimport { ResidenceSidebarPane } from \"./sidebar_panes\";\nimport { ResidenceAddressFormModal } from \"../modals\";\n\n\nfunction fetchHistory(id, onResult) {\n    graphql.query(`\n    {\n        student(id:${id}) {\n            id\n            id_number\n            first_name\n            middle_name\n            family_name\n            residencies {\n                id\n                date_effective\n                contact_person_name\n                contact_person_number\n                address\n                residence\n            }\n        }\n\t}\n\t`).then(onResult);\n}\n\nclass ResidentAddressHistory extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : props.student,\n            studentId : props.student.id,\n            residenceList : null,\n            activeResidenceId : null,\n            addResidenceIsShowing : false,\n        };\n\n        fetchHistory(this.state.studentId, result => {\n            this.setState({\n                residenceList : result.student.residencies,\n            });\n        });\n\n        this.toggleAddResidence = this.toggleAddResidence.bind(this);\n        this.setActiveResidence = this.setActiveResidence.bind(this);\n        this.refreshResidences = this.refreshResidences.bind(this);\n    }\n\n    toggleAddResidence() {\n        this.setState({\n            addResidenceIsShowing : !this.state.addResidenceIsShowing,\n        });\n    }\n\n    setActiveResidence(residence) {\n        if (residence === null) {\n            this.props.setSidebarContent(null);\n        }\n\n        this.props.setSidebarContent(\n            <ResidenceSidebarPane residence={residence}/>,\n        );\n\n        this.setState({\n            activeResidenceId : residence.id,\n        });\n    }\n\n    refreshResidences() {\n        fetchHistory(this.state.studentId, result => {\n            this.setState({\n                residenceList : result.student.residencies,\n            });\n        });\n    }\n\n    componentWillReceiveProps(props) {\n        if (this.state.studentId === props.student.id) {\n            return;\n        }\n\n        // TODO: set sidebar content to null\n\n        this.setState({\n            studentId : props.student.id,\n            student : props.student,\n            activeResidenceId : null,\n            residenceList : null,\n        });\n\n        fetchHistory(props.student.id, result => {\n            this.setState({\n                residenceList : result.student.residencies,\n            });\n        });\n    }\n\n    render() {\n        if (this.state.student === null) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <HistoryHead student={this.state.student}\n                             toggleAddResidence={this.toggleAddResidence}/>\n\n                <HistoryBody residences={this.state.residenceList}\n                             activeResidenceId={this.state.activeResidenceId}\n                             setActiveResidence={this.setActiveResidence}/>\n\n                <ResidenceAddressFormModal isOpen={this.state.addResidenceIsShowing}\n                                           student={this.state.student}\n                                           toggle={this.toggleAddResidence}/>\n            </div>\n        );\n    }\n}\n\nclass HistoryHead extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const student = this.props.student;\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Resident Address History</h5>\n                    <h4 className=\"page-head-title mb-0\">\n                        {student.first_name} {student.middle_name} {student.family_name}\n                        <small className=\"text-muted ml-2\">{this.props.student.id_number}</small>\n                    </h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline\n                            size=\"sm\"\n                            color=\"success\"\n                            onClick={this.props.toggleAddResidence}>\n                        Add a Residence\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass HistoryBody extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There are no residences for this student</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.residences === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.residences.length === 0) {\n            return this.emptyState();\n        }\n\n        const sections = this.props.residences.map((residence, index) => {\n            const onResidenceRowClick = () => this.props.setActiveResidence(residence);\n\n            let isActive = false;\n\n            if (this.props.activeResidenceId !== null) {\n                isActive = this.props.activeResidenceId === residence.id;\n            }\n\n            return <ResidenceRow key={index}\n                                 residence={residence}\n                                 isActive={isActive}\n                                 onClick={onResidenceRowClick}\n                                 latest={index === 0}/>;\n        });\n\n        return (\n            <div className=\"page-body w-100\">\n                <div className=\"d-flex h-100 p-0 flex-row\">\n                    <div className=\"w-100\">\n                        <SectionTable>\n                            {sections}\n                        </SectionTable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ResidenceRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const residence = this.props.residence;\n\n        function formatDate(date) {\n            return moment(date).format(\"LL\");\n        }\n\n        const dateEffective = formatDate(residence.date_effective);\n\n        return (\n            <Section>\n                <SectionTitle>{dateEffective}</SectionTitle>\n                <SectionRow selectable\n                            onClick={this.props.onClick}\n                            active={this.props.isActive}>\n                    {this.props.latest &&\n                    <SectionRowTitle>Latest Residence</SectionRowTitle>\n                    }\n                    <SectionRowContent large>{residence.address}</SectionRowContent>\n                </SectionRow>\n            </Section>\n        );\n    }\n}\n\nexport default ResidentAddressHistory;"]}