{"version":3,"sources":["../../../../../js/tabs/Students/tabs/resident_address_history.js"],"names":["makeResidencyQuery","studentId","query","studentIsFetched","student","residencies","undefined","ResidentAddressHistory","props","state","activeResidence","addResidenceIsShowing","editResidenceIsShowing","error","fetchHistory","bind","setActiveResidence","toggleAddResidence","toggleEditResidence","id","setState","then","result","catch","residence","setSidebarContent","toString","HistoryHead","first_name","middle_name","family_name","id_number","localStorage","userType","HistoryBody","emptyState","residences","length","sections","map","index","onResidenceRowClick","isActive","ResidenceRow","formatDate","date","format","dateEffective","date_effective","onClick","latest","address"],"mappings":"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","file":"resident_address_history.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\n\nimport { Button, } from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\n\nimport { ResidenceSidebarPane } from \"./sidebar_panes\";\nimport { ResidenceAddressFormModal } from \"../modals\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeResidencyQuery(studentId) {\n    return graphql.query(`\n    {\n        student(id:${studentId}) {\n            residencies {\n                id\n                date_effective\n                contact_person_name\n                contact_person_number\n                address\n                residence\n            }\n        }\n\t}\n\t`);\n}\n\nfunction studentIsFetched(student) {\n    return student.residencies !== undefined;\n}\n\nclass ResidentAddressHistory extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : props.student,\n            activeResidence : null,\n            addResidenceIsShowing : false,\n            editResidenceIsShowing : false,\n            error : null,\n        };\n\n        this.fetchHistory = this.fetchHistory.bind(this);\n        this.setActiveResidence = this.setActiveResidence.bind(this);\n        this.toggleAddResidence = this.toggleAddResidence.bind(this);\n        this.toggleEditResidence = this.toggleEditResidence.bind(this);\n\n        this.fetchHistory(props.student.id);\n    }\n\n    fetchHistory(studentId) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeResidencyQuery(studentId)\n            .then(result => {\n                //ID from when query was made must be the same ID now\n                if (studentId !== this.props.student.id) {\n                    return;\n                }\n\n                this.state.student.residencies = result.student.residencies;\n                this.setState({\n                    student : this.state.student,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    toggleAddResidence() {\n        this.setState({\n            addResidenceIsShowing : !this.state.addResidenceIsShowing,\n        });\n    }\n\n    toggleEditResidence() {\n        this.setState({\n            editResidenceIsShowing : !this.state.editResidenceIsShowing,\n        });\n    }\n\n    setActiveResidence(residence) {\n        if (residence === null) {\n            this.props.setSidebarContent(null);\n        }\n\n        this.props.setSidebarContent(\n            <ResidenceSidebarPane toggleEditResidence={ this.toggleEditResidence }\n                                  residence={ residence }\n            />,\n        );\n\n        this.setState({\n            activeResidence : residence,\n        });\n\n    }\n\n    componentWillReceiveProps(props) {\n        if (this.state.student !== null &&\n            this.state.student.id === props.student.id) {\n            return;\n        }\n\n        // If new student, clear sidebar\n        this.props.setSidebarContent(null);\n\n        this.setState({\n            student : props.student,\n            activeResidence : null,\n        });\n\n        if (!studentIsFetched(props.student)) {\n            this.fetchHistory(props.student.id);\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={ () => this.fetchHistory(this.state.student.id) }>\n                    { this.state.error.toString() }\n                </ErrorState>\n            );\n        }\n\n        if (!studentIsFetched(this.state.student)) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <HistoryHead student={ this.state.student }\n                             toggleAddResidence={ this.toggleAddResidence }/>\n\n                <HistoryBody residences={ this.state.student.residencies }\n                             activeResidence={ this.state.activeResidence }\n                             setActiveResidence={ this.setActiveResidence }/>\n\n                {\n                    //Keep the key because otherwise the ResidenceAddressFormModal\n                    // won't change when there's a new activeResidence\n                }\n                <ResidenceAddressFormModal edit\n                                           key={ this.state.activeResidence === null ? 0 : this.state.activeResidence.id }\n                                           isOpen={ this.state.editResidenceIsShowing }\n                                           student={ this.state.student }\n                                           residence={ this.state.activeResidence }\n                                           refreshResidences={ () => this.fetchHistory(this.state.student.id) }\n                                           toggle={ this.toggleEditResidence }/>\n\n                <ResidenceAddressFormModal isOpen={ this.state.addResidenceIsShowing }\n                                           student={ this.state.student }\n                                           refreshResidences={ () => this.fetchHistory(this.state.student.id) }\n                                           toggle={ this.toggleAddResidence }/>\n            </div>\n        );\n    }\n}\n\nclass HistoryHead extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const student = this.props.student;\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Resident Address History</h5>\n                    <h4 className=\"page-head-title mb-0\">\n                        { student.first_name } { student.middle_name } { student.family_name }\n                        <small className=\"text-muted ml-2\">{ this.props.student.id_number }</small>\n                    </h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    { localStorage.userType !== \"administrative_assistant\" && <Button outline\n                                                                                      size=\"sm\"\n                                                                                      color=\"success\"\n                                                                                      onClick={ this.props.toggleAddResidence }>\n                        Add a Residence\n                    </Button> }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass HistoryBody extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There are no residences for this student</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.residences === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.residences.length === 0) {\n            return this.emptyState();\n        }\n\n        const sections = this.props.residences.map((residence, index) => {\n            const onResidenceRowClick = () => this.props.setActiveResidence(residence);\n\n            let isActive = false;\n\n            if (this.props.activeResidence !== null) {\n                isActive = this.props.activeResidence.id === residence.id;\n            }\n\n            return <ResidenceRow key={ index }\n                                 residence={ residence }\n                                 isActive={ isActive }\n                                 onClick={ onResidenceRowClick }\n                                 latest={ index === 0 }/>;\n        });\n\n        return (\n            <div className=\"page-body w-100\">\n                <div className=\"d-flex h-100 p-0 flex-row\">\n                    <div className=\"w-100\">\n                        <SectionTable>\n                            { sections }\n                        </SectionTable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ResidenceRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const residence = this.props.residence;\n\n        function formatDate(date) {\n            return moment(date).format(\"LL\");\n        }\n\n        const dateEffective = formatDate(residence.date_effective);\n\n        return (\n            <Section>\n                <SectionTitle>{ dateEffective }</SectionTitle>\n                <SectionRow selectable\n                            onClick={ this.props.onClick }\n                            active={ this.props.isActive }>\n                    { this.props.latest &&\n                    <SectionRowTitle>Latest Residence</SectionRowTitle>\n                    }\n                    <SectionRowContent large>{ residence.address }</SectionRowContent>\n                </SectionRow>\n            </Section>\n        );\n    }\n}\n\nexport default ResidentAddressHistory;"]}