{"version":3,"sources":["../../../../../js/tabs/Students/tabs/resident_address_history.js"],"names":["makeResidencyQuery","studentId","query","studentIsFetched","student","residencies","undefined","ResidentAddressHistory","props","state","activeResidence","addResidenceIsShowing","editResidenceIsShowing","error","fetchHistory","bind","setActiveResidence","toggleAddResidence","toggleEditResidence","id","setState","then","result","catch","residence","setSidebarContent","toString","refreshResidences","HistoryHead","first_name","middle_name","family_name","id_number","HistoryBody","emptyState","residences","length","sections","map","index","onResidenceRowClick","isActive","ResidenceRow","formatDate","date","format","dateEffective","date_effective","onClick","latest","address"],"mappings":"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","file":"resident_address_history.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\n\nimport { Button, } from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\n\n// TODO: import modals for editing and adding\nimport { ResidenceSidebarPane } from \"./sidebar_panes\";\nimport { ResidenceAddressFormModal } from \"../modals\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeResidencyQuery(studentId) {\n    return graphql.query(`\n    {\n        student(id:${studentId}) {\n            residencies {\n                id\n                date_effective\n                contact_person_name\n                contact_person_number\n                address\n                residence\n            }\n        }\n\t}\n\t`);\n}\n\nfunction studentIsFetched(student) {\n    return student.residencies !== undefined;\n}\n\nclass ResidentAddressHistory extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : props.student,\n            activeResidence : null,\n            addResidenceIsShowing : false,\n            editResidenceIsShowing : false,\n            error : null,\n        };\n\n        this.fetchHistory = this.fetchHistory.bind(this);\n        this.setActiveResidence = this.setActiveResidence.bind(this);\n        this.toggleAddResidence = this.toggleAddResidence.bind(this);\n        this.toggleEditResidence = this.toggleEditResidence.bind(this);\n\n        this.fetchHistory(props.student.id);\n    }\n\n    fetchHistory(studentId) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeResidencyQuery(studentId)\n            .then(result => {\n                this.state.student.residencies = result.student.residencies;\n                this.setState({\n                    student : this.state.student,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    toggleAddResidence() {\n        this.setState({\n            addResidenceIsShowing : !this.state.addResidenceIsShowing,\n        });\n    }\n\n    toggleEditResidence() {\n        this.setState({\n            editResidenceIsShowing : !this.state.editResidenceIsShowing,\n        });\n    }\n\n    setActiveResidence(residence) {\n        if (residence === null) {\n            this.props.setSidebarContent(null);\n        }\n\n        this.props.setSidebarContent(\n            <ResidenceSidebarPane toggleEditResidence={this.toggleEditResidence}\n                                  residence={residence}\n            />,\n        );\n\n        this.setState({\n            activeResidence : residence,\n        });\n\n    }\n\n    componentWillReceiveProps(props) {\n        if (this.state.student !== null &&\n            this.state.student.id === props.student.id) {\n            return;\n        }\n\n        // If new student, clear sidebar\n        this.props.setSidebarContent(null);\n\n        this.setState({\n            student : props.student,\n            activeResidence : null,\n        });\n\n        if (!studentIsFetched(props.student)) {\n            this.fetchHistory(props.student.id);\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.fetchHistory(this.state.student.id)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        if (!studentIsFetched(this.state.student)) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <HistoryHead student={this.state.student}\n                             toggleAddResidence={this.toggleAddResidence}/>\n\n                <HistoryBody residences={this.state.student.residencies}\n                             activeResidence={this.state.activeResidence}\n                             setActiveResidence={this.setActiveResidence}/>\n\n                {\n                    //Keep the key because otherwise the ResidenceAddressFormModal\n                    // won't change when there's a new activeResidence\n                }\n                <ResidenceAddressFormModal edit\n                                           key={this.state.activeResidence === null ? 0 : this.state.activeResidence.id}\n                                           isOpen={this.state.editResidenceIsShowing}\n                                           student={this.state.student}\n                                           residence={this.state.activeResidence}\n                                           refreshResidences={this.refreshResidences}\n                                           toggle={this.toggleEditResidence}/>\n\n                <ResidenceAddressFormModal isOpen={this.state.addResidenceIsShowing}\n                                           student={this.state.student}\n                                           refreshResidences={this.refreshResidences}\n                                           toggle={this.toggleAddResidence}/>\n            </div>\n        );\n    }\n}\n\nclass HistoryHead extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const student = this.props.student;\n\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Resident Address History</h5>\n                    <h4 className=\"page-head-title mb-0\">\n                        {student.first_name} {student.middle_name} {student.family_name}\n                        <small className=\"text-muted ml-2\">{this.props.student.id_number}</small>\n                    </h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline\n                            size=\"sm\"\n                            color=\"success\"\n                            onClick={this.props.toggleAddResidence}>\n                        Add a Residence\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass HistoryBody extends Component {\n    constructor(props) {\n        super(props);\n\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There are no residences for this student</h3>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.residences === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.residences.length === 0) {\n            return this.emptyState();\n        }\n\n        const sections = this.props.residences.map((residence, index) => {\n            const onResidenceRowClick = () => this.props.setActiveResidence(residence);\n\n            let isActive = false;\n\n            if (this.props.activeResidence !== null) {\n                isActive = this.props.activeResidence.id === residence.id;\n            }\n\n            return <ResidenceRow key={index}\n                                 residence={residence}\n                                 isActive={isActive}\n                                 onClick={onResidenceRowClick}\n                                 latest={index === 0}/>;\n        });\n\n        return (\n            <div className=\"page-body w-100\">\n                <div className=\"d-flex h-100 p-0 flex-row\">\n                    <div className=\"w-100\">\n                        <SectionTable>\n                            {sections}\n                        </SectionTable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ResidenceRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const residence = this.props.residence;\n\n        function formatDate(date) {\n            return moment(date).format(\"LL\");\n        }\n\n        const dateEffective = formatDate(residence.date_effective);\n\n        return (\n            <Section>\n                <SectionTitle>{dateEffective}</SectionTitle>\n                <SectionRow selectable\n                            onClick={this.props.onClick}\n                            active={this.props.isActive}>\n                    {this.props.latest &&\n                    <SectionRowTitle>Latest Residence</SectionRowTitle>\n                    }\n                    <SectionRowContent large>{residence.address}</SectionRowContent>\n                </SectionRow>\n            </Section>\n        );\n    }\n}\n\nexport default ResidentAddressHistory;"]}