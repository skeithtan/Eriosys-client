{"version":3,"sources":["../../../../../js/tabs/Students/tabs/residency_address_history.js"],"names":["fetchResidencyAddressHistory","onResult","query","then","ResidentAddressHistory","props","state","student","studentId","id","activeResidenceId","setActiveResidence","bind","residence","setState","nextProps","residences","latestResidence","latest_residence","HistoryHead","addResidenceIsShowing","toggleAddResidence","HistoryBody","HistorySection","HistoryRow"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;;;;;;;AASA;AACA;;AAEA,SAASA,4BAAT,CAAsCC,QAAtC,EAAgD;AAC5C,sBAAQC,KAAR,+BAIAC,IAJA,CAIKF,QAJL;AAKH;;IAEKG,sB;;;AACF,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA,oJACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,qBAAU,IADD;AAETC,uBAAYH,MAAME,OAAN,CAAcE,EAFjB;AAGTC,+BAAoB;AAHX,SAAb;;AAMA;;AAEA,cAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,OAA1B;AAXe;AAYlB;;;;2CAEkBC,S,EAAW;AAC1B;;AAEA;;AAEA,iBAAKC,QAAL,CAAc;AACVJ,mCAAoBG,UAAUJ;AADpB,aAAd;AAGH;;;4CAEmB;AAChB,iBAAKK,QAAL,CAAc;AACVP,yBAAU;AADA,aAAd;;AAIA;AACH;;;kDAEyBQ,S,EAAW;AACjC,gBAAI,KAAKT,KAAL,CAAWE,SAAX,KAAyBO,UAAUR,OAAV,CAAkBE,EAA/C,EAAmD;AAC/C;AACH;;AAED;;AAEA,iBAAKK,QAAL,CAAc;AACVN,2BAAYO,UAAUR,OAAV,CAAkBE,EADpB;AAEVF,yBAAU,IAFA;AAGVG,mCAAoB;AAHV,aAAd;;AAMA;AACH;;;iCAEQ;AACL,gBAAI,KAAKJ,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC7B,uBAAO,sDAAP;AACH;;AAED,gBAAMS,aAAa;AACfA,4BAAa,KAAKV,KAAL,CAAWC,OAAX,CAAmBS,UADjB;AAEfC,iCAAkB,KAAKX,KAAL,CAAWC,OAAX,CAAmBW;AAFtB,aAAnB;;AAKA,mBACI,uCAAK,WAAU,8BAAf,GADJ;AAKH;;;;;;IAGCC,W;;;AACF,yBAAYd,KAAZ,EAAmB;AAAA;;AAAA,+HACTA,KADS;;AAGf,eAAKC,KAAL,GAAa;AACTc,mCAAwB;AADf,SAAb;;AAIA,eAAKC,kBAAL,GAA0B,OAAKA,kBAAL,CAAwBT,IAAxB,QAA1B;AAPe;AAQlB;;;;6CAEoB;AACjB,iBAAKE,QAAL,CAAc;AACVM,uCAAwB,CAAC,KAAKd,KAAL,CAAWc;AAD1B,aAAd;AAGH;;;iCAEQ;AACL,mBACI;AAAA;AAAA,kBAAK,WAAU,gDAAf;AACI;AAAA;AAAA,sBAAK,WAAU,SAAf;AACI;AAAA;AAAA,0BAAI,WAAU,qBAAd;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA,0BAAI,WAAU,sBAAd;AAAA;AAAA;AAFJ,iBADJ;AAMI;AAAA;AAAA,sBAAK,WAAU,mBAAf;AACI;AAAA;AAAA,0BAAQ,aAAR,EAAgB,MAAK,IAArB,EAA0B,OAAM,SAAhC,EAA0C,SAAU,KAAKC,kBAAzD;AAAA;AAAA;AADJ;AANJ,aADJ;AAeH;;;;;;IAGCC,W;;;AACF,yBAAYjB,KAAZ,EAAmB;AAAA;;AAAA,yHACTA,KADS;AAElB;;;;iCAEQ,CAER;;;;;;IAGCkB,c;;;AACF,4BAAYlB,KAAZ,EAAmB;AAAA;;AAAA,+HACTA,KADS;AAElB;;;;iCAEQ,CAER;;;;;;IAGCmB,U;;;AACF,wBAAYnB,KAAZ,EAAmB;AAAA;;AAAA,uHACTA,KADS;AAElB;;;;iCAEQ,CAER;;;;;;kBAGUD,sB","file":"residency_address_history.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport graphql from \"../../../graphql\";\nimport LoadingSpinner from \"../../../components/loading\";\n\nimport { Button, } from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\n\n// TODO: import modals for editing and adding\n// TODO: import sidebarpane for residency details\n\nfunction fetchResidencyAddressHistory(onResult) {\n    graphql.query(`\n    {\n        \n\t}\n\t`).then(onResult);\n}\n\nclass ResidentAddressHistory extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : null,\n            studentId : props.student.id,\n            activeResidenceId : null,\n        };\n\n        // TODO: fetch the resident address through student\n\n        this.setActiveResidence = this.setActiveResidence.bind(this);\n    }\n\n    setActiveResidence(residence) {\n        // TODO: set sidebar content to null if residence is null\n\n        // TODO: set sidebar content with props\n\n        this.setState({\n            activeResidenceId : residence.id,\n        });\n    }\n\n    refreshResidences() {\n        this.setState({\n            student : null,\n        });\n\n        // TODO: fetch residence\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.studentId === nextProps.student.id) {\n            return;\n        }\n\n        // TODO: set sidebar content to null\n\n        this.setState({\n            studentId : nextProps.student.id,\n            student : null,\n            activeResidenceId : null,\n        });\n\n        // TODO: fetch residences\n    }\n\n    render() {\n        if (this.state.student === null) {\n            return <LoadingSpinner/>;\n        }\n\n        const residences = {\n            residences : this.state.student.residences,\n            latestResidence : this.state.student.latest_residence,\n        };\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n\n            </div>\n        );\n    }\n}\n\nclass HistoryHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            addResidenceIsShowing : false,\n        };\n\n        this.toggleAddResidence = this.toggleAddResidence.bind(this);\n    }\n\n    toggleAddResidence() {\n        this.setState({\n            addResidenceIsShowing : !this.state.addResidenceIsShowing,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Resident Address History</h5>\n                    <h4 className=\"page-head-title mb-0\">[Student Name]</h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline size=\"sm\" color=\"success\" onClick={ this.toggleAddResidence }>Add a\n                        Residence</Button>\n                </div>\n\n                { /* Residence Form Modal */ }\n            </div>\n        );\n    }\n}\n\nclass HistoryBody extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n    }\n}\n\nclass HistorySection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n    }\n}\n\nclass HistoryRow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n    }\n}\n\nexport default ResidentAddressHistory;"]}