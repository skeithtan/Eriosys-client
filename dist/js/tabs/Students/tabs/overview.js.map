{"version":3,"sources":["../../../../../js/tabs/Students/tabs/overview.js"],"names":["makeStudentOverviewQuery","id","query","studentIsFetched","student","nickname","undefined","StudentOverview","props","state","error","fetchStudent","bind","setState","then","Object","assign","result","catch","nextProps","toString","onArchiveActiveStudent","applicant","OverviewHead","editStudentIsShowing","confirmArchive","toggleEditStudent","first","first_name","middle","middle_name","last","family_name","name","confirm","dismissToast","title","message","ajax","url","serverURL","method","beforeSend","success","onArchiveStudent","progressBar","console","log","response","id_number","onEditStudent","OverviewBody","StudentDetails","sex","civilStatus","civilStatuses","civil_status","birthDate","birth_date","format","length","sidebar","home_address","nationality","archived","confirmRestore","ContactDetails","phone_number","email","emergency_contact_name","emergency_contact_relationship","emergency_contact_number","UniversityDetails","college","colleges","type","category","institution","default"],"mappings":"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","file":"overview.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport graphql from \"../../../graphql\";\nimport { Button } from \"reactstrap\";\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowTitle,\n    SectionRowContent,\n} from \"../../../components/section\";\nimport { StudentFormModal, } from \"../modals\";\nimport moment from \"moment\";\nimport settings from \"../../../settings\";\nimport ErrorState from \"../../../components/error_state\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\nimport { makeInfoToast } from \"../../../dismissable_toast_maker\";\nimport authorizeXHR from \"../../../authorization\";\n\n\nfunction makeStudentOverviewQuery(id) {\n    return graphql.query(`\n    {\n        student(id:${id}) {\n            category\n            college\n            nickname\n            nationality\n            home_address\n            phone_number\n            birth_date\n            sex\n            emergency_contact_name\n            emergency_contact_relationship\n            emergency_contact_number\n            email\n            civil_status\n            institution {\n                name\n            }\n        }\n    }    \n    `);\n}\n\nfunction studentIsFetched(student) {\n    return student.nickname !== undefined;\n}\n\nclass StudentOverview extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : props.student,\n            error : null,\n        };\n\n        this.fetchStudent = this.fetchStudent.bind(this);\n\n        this.fetchStudent(props.student.id);\n    }\n\n    fetchStudent(id) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeStudentOverviewQuery(id)\n            .then(result => {\n                //ID from when query was made must be the same ID now\n                if (id !== this.props.student.id) {\n                    return;\n                }\n\n                Object.assign(this.state.student, result.student);\n\n                this.setState({\n                    student : this.state.student,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.student !== null &&\n            this.state.student.id === nextProps.student.id) {\n            return;\n        }\n\n        this.setState({\n            student : nextProps.student,\n        });\n\n        if (!studentIsFetched(nextProps.student)) {\n            this.fetchStudent(nextProps.student.id);\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={ () => this.fetchStudent(this.state.student.id) }>\n                    { this.state.error.toString() }\n                </ErrorState>\n            );\n        }\n\n        if (!studentIsFetched(this.state.student)) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <OverviewHead student={ this.state.student }\n                              onArchiveStudent={ this.props.onArchiveActiveStudent }\n                              onEditStudent={ () => this.fetchStudent(this.state.student.id) }\n                              applicant={ this.props.applicant }/>\n                <OverviewBody student={ this.state.student }/>\n            </div>\n        );\n    }\n}\n\nclass OverviewHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editStudentIsShowing : false,\n        };\n\n        this.confirmArchive = this.confirmArchive.bind(this);\n        this.toggleEditStudent = this.toggleEditStudent.bind(this);\n    }\n\n    toggleEditStudent() {\n        this.setState({\n            editStudentIsShowing : !this.state.editStudentIsShowing,\n        });\n    }\n\n    confirmArchive() {\n        const first = this.props.student.first_name;\n        const middle = this.props.student.middle_name;\n        const last = this.props.student.family_name;\n        const name = first + \" \" + middle + \" \" + last;\n\n        if (!confirm(`Are you sure you want to archive ${name}?`)) {\n            return;\n        }\n        const dismissToast = makeInfoToast({\n            title : \"Archiving\",\n            message : \"Archiving student...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/students/${this.props.student.id}/`,\n            method : \"DELETE\",\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.onArchiveStudent();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Student archived\",\n                    progressBar : false,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to archive student\",\n                    progressBar : false,\n                });\n            },\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-center\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Overview</h5>\n                    <h4 className=\"page-head-title justify-content-left d-inline-block mb-0 mr-2\">\n                        { this.props.student.first_name } { this.props.student.middle_name } { this.props.student.family_name }\n                        <small className=\"text-muted ml-2\">{ this.props.student.id_number }</small>\n                    </h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline\n                            size=\"sm\"\n                            color=\"success\"\n                            className=\"mr-2\"\n                            onClick={ this.toggleEditStudent }>\n                        Edit Student\n                    </Button>\n\n                    { !this.props.applicant && <Button outline\n                                                        size=\"sm\"\n                                                        color=\"warning\"\n                                                        onClick={ this.confirmArchive }>Archive</Button> }\n                </div>\n\n                <StudentFormModal edit\n                                  isOpen={ this.state.editStudentIsShowing }\n                                  student={ this.props.student }\n                                  refresh={ this.props.onEditStudent }\n                                  toggle={ this.toggleEditStudent }/>\n            </div>\n        );\n    }\n}\n\nclass OverviewBody extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-body\">\n                <StudentDetails student={ this.props.student }/>\n                <ContactDetails student={ this.props.student }/>\n                <UniversityDetails student={ this.props.student }/>\n            </div>\n        );\n    }\n}\n\nclass StudentDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const sex = student.sex === \"F\" ? \"Female\" : \"Male\";\n        const civilStatus = settings.civilStatuses[student.civil_status];\n        const birthDate = moment(student.birth_date).format(\"LL\");\n\n        return (\n            <Section>\n                <SectionTitle>Student Details</SectionTitle>\n                <SectionTable>\n\n                    { student.nickname.length > 0 && //Only show if student nickname exists\n                    <SectionRow>\n                        <SectionRowTitle>Nickname</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.nickname }</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>Sex</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ sex }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Home Address</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.home_address }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Date of Birth</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ birthDate }</SectionRowContent>\n                    </SectionRow>\n\n                    { student.nationality.length > 0 &&\n                    <SectionRow>\n                        <SectionRowTitle>Nationality</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.nationality }</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>Civil Status</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ civilStatus }</SectionRowContent>\n                    </SectionRow>\n\n                    { this.props.archived &&\n                    <SectionRow>\n                        <SectionRowContent className=\"d-flex\">\n                            <Button outline\n                                    color=\"primary\"\n                                    size=\"sm\"\n                                    className=\"ml-auto\"\n                                    onClick={ this.props.confirmRestore }>Restore</Button>\n                        </SectionRowContent>\n                    </SectionRow>\n                    }\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nclass ContactDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n\n        return (\n            <Section>\n                <SectionTitle>Contact Details</SectionTitle>\n                <SectionTable>\n\n                    <SectionRow>\n                        <SectionRowTitle>Phone Number</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.phone_number }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Email</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.email }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Emergency Contact</SectionRowTitle>\n                        <SectionRowContent\n                            large={ !this.props.sidebar }>{ `${student.emergency_contact_name} (${student.emergency_contact_relationship})` }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Emergency Contact Number</SectionRowTitle>\n                        <SectionRowContent\n                            large={ !this.props.sidebar }>{ student.emergency_contact_number }</SectionRowContent>\n                    </SectionRow>\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nclass UniversityDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const college = settings.colleges[student.college];\n        const type = student.category === \"OUT\" ? \"Outbound\" : \"Inbound\";\n\n        return (\n            <Section>\n                <SectionTitle>University Details</SectionTitle>\n                <SectionTable>\n\n                    <SectionRow>\n                        <SectionRowTitle>Student Type</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ type }</SectionRowContent>\n                    </SectionRow>\n\n                    { student.category === \"IN\" &&\n                    <SectionRow>\n                        <SectionRowTitle>Institution</SectionRowTitle>\n                        <SectionRowContent\n                            large={ !this.props.sidebar }>{ student.institution.name }</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>College</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ college }</SectionRowContent>\n                    </SectionRow>\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport {\n    StudentOverview as default,\n    StudentDetails,\n    ContactDetails,\n    UniversityDetails,\n    makeStudentOverviewQuery,\n};"]}