{"version":3,"sources":["../../../../../js/tabs/Students/tabs/overview.js"],"names":["fetchStudent","id","onResult","query","then","StudentOverview","props","state","student","studentID","onEditStudent","bind","result","setState","nextProps","refreshStudents","onDeleteActiveStudent","OverviewHead","deleteStudentIsShowing","editStudentIsShowing","first_name","middle_name","family_name","id_number","toggleEditStudent","toggleDeleteStudent","onDeleteStudent","OverviewBody","StudentDetails","sex","civilStatus","civilStatuses","civil_status","birthDate","birth_date","format","nickname","length","sidebar","home_address","nationality","ContactDetails","phone_number","email","emergency_contact_name","emergency_contact_relationship","emergency_contact_number","UniversityDetails","college","colleges","type","category","institution","name"],"mappings":"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","file":"overview.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport graphql from \"../../../graphql\";\nimport { Button } from \"reactstrap\";\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowTitle,\n    SectionRowContent,\n} from \"../../../components/section\";\nimport {\n    ArchiveStudentModal,\n    StudentFormModal,\n\n} from \"../modals\";\nimport moment from \"moment\";\nimport settings from \"../../../settings\";\n\nfunction fetchStudent(id, onResult) {\n    graphql.query(`\n    {\n        student(id:${id}) {\n            id\n            category\n            id_number\n            college\n            family_name\n            first_name\n            middle_name\n            nickname\n            nationality\n            home_address\n            phone_number\n            birth_date\n            sex\n            emergency_contact_name\n            emergency_contact_relationship\n            emergency_contact_number\n            email\n            civil_status\n            institution {\n                name\n            }\n        }\n    }    \n    `).then(onResult);\n}\n\nclass StudentOverview extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : null,\n            studentID : props.student.id,\n        };\n\n        this.onEditStudent = this.onEditStudent.bind(this);\n\n        fetchStudent(props.student.id, result => {\n            const student = result.student;\n\n            this.setState({\n                student : student,\n            });\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            studentID : nextProps.student.id,\n            student : null,\n        });\n\n        fetchStudent(nextProps.student.id, result => {\n            const student = result.student;\n            this.setState({\n                student : student,\n            });\n        });\n    }\n\n    onEditStudent() {\n        this.setState({\n            student : null,\n        });\n\n        fetchStudent(this.state.studentID, result => {\n            const student = result.student;\n            this.setState({\n                student : student,\n            });\n\n            this.props.refreshStudents();\n        });\n    }\n\n    render() {\n        if (this.state.student === null) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <OverviewHead student={ this.state.student }\n                              onDeleteStudent={ this.props.onDeleteActiveStudent }\n                              onEditStudent={ this.onEditStudent }/>\n                <OverviewBody student={ this.state.student }/>\n            </div>\n        );\n    }\n}\n\nclass OverviewHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deleteStudentIsShowing : false,\n            editStudentIsShowing : false,\n        };\n    }\n\n    toggleEditStudent() {\n        this.setState({\n            editStudentIsShowing : !this.state.editStudentIsShowing,\n        });\n    }\n\n    toggleDeleteStudent() {\n        this.setState({\n            deleteStudentIsShowing : !this.state.deleteStudentIsShowing,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-center\">\n                <div className=\"mr-auto\">\n                    <h4 className=\"page-head-title justify-content-left d-inline-block mb-0 mr-2\">\n                        { this.props.student.first_name } { this.props.student.middle_name } { this.props.student.family_name }\n                        <small className=\"text-muted ml-2\">{ this.props.student.id_number }</small>\n                    </h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline\n                            size=\"sm\"\n                            color=\"success\"\n                            className=\"mr-2\"\n                            onClick={ this.toggleEditStudent }>\n                        Edit Student\n                    </Button>\n\n                    <Button outline\n                            size=\"sm\"\n                            color=\"warning\"\n                            onClick={ this.toggleDeleteStudent }>Archive</Button>\n                </div>\n\n                <ArchiveStudentModal isOpen={ this.state.deleteStudentIsShowing }\n                                     student={ this.props.student }\n                                     toggle={ this.toggleDeleteStudent }\n                                     refresh={ this.props.onDeleteStudent }/>\n\n                <StudentFormModal edit\n                                  isOpen={ this.state.editStudentIsShowing }\n                                  student={ this.props.student }\n                                  refresh={ this.props.onEditStudent }\n                                  toggle={ this.toggleEditStudent }/>\n            </div>\n        );\n    }\n}\n\nclass OverviewBody extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-body\">\n                <StudentDetails student={ this.props.student }/>\n                <ContactDetails student={ this.props.student }/>\n                <UniversityDetails student={ this.props.student }/>\n            </div>\n        );\n    }\n}\n\nclass StudentDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const sex = student.sex === \"F\" ? \"Female\" : \"Male\";\n        const civilStatus = settings.civilStatuses[student.civil_status];\n        const birthDate = moment(student.birth_date).format(\"LL\");\n\n        return (\n            <Section>\n                <SectionTitle>Student Details</SectionTitle>\n                <SectionTable>\n\n                    { student.nickname.length > 0 && //Only show if student nickname exists\n                    <SectionRow>\n                        <SectionRowTitle>Nickname</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.nickname }</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>Sex</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ sex }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Home Address</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.home_address }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Date of Birth</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ birthDate }</SectionRowContent>\n                    </SectionRow>\n\n                    { student.nationality.length > 0 &&\n                    <SectionRow>\n                        <SectionRowTitle>Nationality</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.nationality }</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>Civil Status</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ civilStatus }</SectionRowContent>\n                    </SectionRow>\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nclass ContactDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n\n        return (\n            <Section>\n                <SectionTitle>Contact Details</SectionTitle>\n                <SectionTable>\n\n                    <SectionRow>\n                        <SectionRowTitle>Phone Number</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.phone_number }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Email</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ student.email }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Emergency Contact</SectionRowTitle>\n                        <SectionRowContent\n                            large={ !this.props.sidebar }>{ `${student.emergency_contact_name} (${student.emergency_contact_relationship})` }</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Emergency Contact Number</SectionRowTitle>\n                        <SectionRowContent\n                            large={ !this.props.sidebar }>{ student.emergency_contact_number }</SectionRowContent>\n                    </SectionRow>\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nclass UniversityDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const college = settings.colleges[student.college];\n        const type = student.category === \"OUT\" ? \"Outbound\" : \"Inbound\";\n\n        return (\n            <Section>\n                <SectionTitle>University Details</SectionTitle>\n                <SectionTable>\n\n                    <SectionRow>\n                        <SectionRowTitle>Student Type</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ type }</SectionRowContent>\n                    </SectionRow>\n\n                    { student.category === \"IN\" &&\n                    <SectionRow>\n                        <SectionRowTitle>Institution</SectionRowTitle>\n                        <SectionRowContent\n                            large={ !this.props.sidebar }>{ student.institution.name }</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>College</SectionRowTitle>\n                        <SectionRowContent large={ !this.props.sidebar }>{ college }</SectionRowContent>\n                    </SectionRow>\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default StudentOverview;"]}