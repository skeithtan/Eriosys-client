{"version":3,"sources":["../../../../../js/tabs/Students/tabs/overview.js"],"names":["makeStudentOverviewQuery","id","query","studentIsFetched","student","nickname","undefined","StudentOverview","props","state","error","fetchStudent","bind","setState","then","Object","assign","result","catch","nextProps","toString","onArchiveActiveStudent","OverviewHead","archiveStudentIsShowing","editStudentIsShowing","toggleEditStudent","toggleArchiveStudent","first_name","middle_name","family_name","id_number","onArchiveStudent","onEditStudent","OverviewBody","StudentDetails","sex","civilStatus","civilStatuses","civil_status","birthDate","birth_date","format","length","sidebar","home_address","nationality","archived","toggleRestoreStudent","ContactDetails","phone_number","email","emergency_contact_name","emergency_contact_relationship","emergency_contact_number","UniversityDetails","college","colleges","type","category","institution","name","default"],"mappings":"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","file":"overview.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport graphql from \"../../../graphql\";\nimport { Button } from \"reactstrap\";\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n    SectionRowTitle,\n    SectionRowContent,\n} from \"../../../components/section\";\nimport {\n    ArchiveStudentModal,\n    StudentFormModal,\n\n} from \"../modals\";\nimport moment from \"moment\";\nimport settings from \"../../../settings\";\nimport ErrorState from \"../../../components/error_state\";\n\n\nfunction makeStudentOverviewQuery(id) {\n    return graphql.query(`\n    {\n        student(id:${id}) {\n            category\n            college\n            nickname\n            nationality\n            home_address\n            phone_number\n            birth_date\n            sex\n            emergency_contact_name\n            emergency_contact_relationship\n            emergency_contact_number\n            email\n            civil_status\n            institution {\n                name\n            }\n        }\n    }    \n    `);\n}\n\nfunction studentIsFetched(student) {\n    return student.nickname !== undefined;\n}\n\nclass StudentOverview extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            student : props.student,\n            error : null,\n        };\n\n        this.fetchStudent = this.fetchStudent.bind(this);\n\n        this.fetchStudent(props.student.id);\n    }\n\n    fetchStudent(id) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeStudentOverviewQuery(id)\n            .then(result => {\n                Object.assign(this.state.student, result.student);\n\n                this.setState({\n                    student : this.state.student,\n                });\n            })\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.student !== null &&\n            this.state.student.id === nextProps.student.id) {\n            return;\n        }\n\n        this.setState({\n            student : nextProps.student,\n        });\n\n        if (!studentIsFetched(nextProps.student)) {\n            this.fetchStudent(nextProps.student.id);\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.fetchStudent(this.state.student.id)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        if (!studentIsFetched(this.state.student)) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"d-flex flex-column p-0 h-100\">\n                <OverviewHead student={this.state.student}\n                              onArchiveStudent={this.props.onArchiveActiveStudent}\n                              onEditStudent={() =>  this.fetchStudent(this.state.student.id)}/>\n                <OverviewBody student={this.state.student}/>\n            </div>\n        );\n    }\n}\n\nclass OverviewHead extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            archiveStudentIsShowing : false,\n            editStudentIsShowing : false,\n        };\n\n        this.toggleEditStudent = this.toggleEditStudent.bind(this);\n        this.toggleArchiveStudent = this.toggleArchiveStudent.bind(this);\n    }\n\n    toggleEditStudent() {\n        this.setState({\n            editStudentIsShowing : !this.state.editStudentIsShowing,\n        });\n    }\n\n    toggleArchiveStudent() {\n        this.setState({\n            archiveStudentIsShowing : !this.state.archiveStudentIsShowing,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-center\">\n                <div className=\"mr-auto\">\n                    <h5 className=\"mb-0 text-secondary\">Overview</h5>\n                    <h4 className=\"page-head-title justify-content-left d-inline-block mb-0 mr-2\">\n                        {this.props.student.first_name} {this.props.student.middle_name} {this.props.student.family_name}\n                        <small className=\"text-muted ml-2\">{this.props.student.id_number}</small>\n                    </h4>\n                </div>\n\n                <div className=\"page-head-actions\">\n                    <Button outline\n                            size=\"sm\"\n                            color=\"success\"\n                            className=\"mr-2\"\n                            onClick={this.toggleEditStudent}>\n                        Edit Student\n                    </Button>\n\n                    <Button outline\n                            size=\"sm\"\n                            color=\"warning\"\n                            onClick={this.toggleArchiveStudent}>Archive</Button>\n                </div>\n\n                <ArchiveStudentModal isOpen={this.state.archiveStudentIsShowing}\n                                     student={this.props.student}\n                                     toggle={this.toggleArchiveStudent}\n                                     refresh={this.props.onArchiveStudent}/>\n\n                <StudentFormModal edit\n                                  isOpen={this.state.editStudentIsShowing}\n                                  student={this.props.student}\n                                  refresh={this.props.onEditStudent}\n                                  toggle={this.toggleEditStudent}/>\n            </div>\n        );\n    }\n}\n\nclass OverviewBody extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"page-body\">\n                <StudentDetails student={this.props.student}/>\n                <ContactDetails student={this.props.student}/>\n                <UniversityDetails student={this.props.student}/>\n            </div>\n        );\n    }\n}\n\nclass StudentDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const sex = student.sex === \"F\" ? \"Female\" : \"Male\";\n        const civilStatus = settings.civilStatuses[student.civil_status];\n        const birthDate = moment(student.birth_date).format(\"LL\");\n\n        return (\n            <Section>\n                <SectionTitle>Student Details</SectionTitle>\n                <SectionTable>\n\n                    {student.nickname.length > 0 && //Only show if student nickname exists\n                    <SectionRow>\n                        <SectionRowTitle>Nickname</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{student.nickname}</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>Sex</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{sex}</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Home Address</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{student.home_address}</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Date of Birth</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{birthDate}</SectionRowContent>\n                    </SectionRow>\n\n                    {student.nationality.length > 0 &&\n                    <SectionRow>\n                        <SectionRowTitle>Nationality</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{student.nationality}</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>Civil Status</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{civilStatus}</SectionRowContent>\n                    </SectionRow>\n\n                    {this.props.archived &&\n                    <SectionRow>\n                        <SectionRowContent className=\"d-flex\">\n                            <Button outline\n                                    color=\"primary\"\n                                    size=\"sm\"\n                                    className=\"ml-auto\"\n                                    onClick={this.props.toggleRestoreStudent}>Restore</Button>\n                        </SectionRowContent>\n                    </SectionRow>\n                    }\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nclass ContactDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n\n        return (\n            <Section>\n                <SectionTitle>Contact Details</SectionTitle>\n                <SectionTable>\n\n                    <SectionRow>\n                        <SectionRowTitle>Phone Number</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{student.phone_number}</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Email</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{student.email}</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Emergency Contact</SectionRowTitle>\n                        <SectionRowContent\n                            large={!this.props.sidebar}>{`${student.emergency_contact_name} (${student.emergency_contact_relationship})`}</SectionRowContent>\n                    </SectionRow>\n\n                    <SectionRow>\n                        <SectionRowTitle>Emergency Contact Number</SectionRowTitle>\n                        <SectionRowContent\n                            large={!this.props.sidebar}>{student.emergency_contact_number}</SectionRowContent>\n                    </SectionRow>\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nclass UniversityDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const student = this.props.student;\n        const college = settings.colleges[student.college];\n        const type = student.category === \"OUT\" ? \"Outbound\" : \"Inbound\";\n\n        return (\n            <Section>\n                <SectionTitle>University Details</SectionTitle>\n                <SectionTable>\n\n                    <SectionRow>\n                        <SectionRowTitle>Student Type</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{type}</SectionRowContent>\n                    </SectionRow>\n\n                    {student.category === \"IN\" &&\n                    <SectionRow>\n                        <SectionRowTitle>Institution</SectionRowTitle>\n                        <SectionRowContent\n                            large={!this.props.sidebar}>{student.institution.name}</SectionRowContent>\n                    </SectionRow>\n                    }\n\n                    <SectionRow>\n                        <SectionRowTitle>College</SectionRowTitle>\n                        <SectionRowContent large={!this.props.sidebar}>{college}</SectionRowContent>\n                    </SectionRow>\n\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport {\n    StudentOverview as default,\n    StudentDetails,\n    ContactDetails,\n    UniversityDetails,\n    makeStudentOverviewQuery\n};"]}