{"version":3,"sources":["../../../../js/tabs/Students/students.js"],"names":["tabs","name","image","activeImage","makeInboundQuery","query","makeOutboundQuery","Students","props","state","allStudents","activeStudent","activeTab","error","onAddStudent","bind","setActiveTab","fetchStudents","setActiveStudent","onArchiveActiveStudent","extractStudentsFromProgram","tabName","category","setState","then","result","inbound_student_programs","catch","outbound_student_programs","tab","student","students","forEach","push","toString","refresh"],"mappings":"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","file":"students.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../graphql\";\nimport StudentList from \"./student_list\";\nimport StudentDetail from \"./student_detail\";\nimport { StudentFormModal, } from \"./modals\";\nimport ErrorState from \"../../components/error_state\";\n\n\nconst tabs = [\n    {\n        name : \"Inbound\",\n        image : \"./images/inboundgrey.png\",\n        activeImage : \"./images/inboundgreen.png\",\n    },\n    {\n        name : \"Outbound\",\n        image : \"./images/airplanegrey.png\",\n        activeImage : \"./images/airplanegreen.png\",\n    },\n];\n\n\nfunction makeInboundQuery() {\n    return graphql.query(`\n        {\n            inbound_student_programs(accepted:true) {\n                student {\n                    id\n                    id_number\n                    family_name\n                    first_name\n                    middle_name\n                }\n            }\n        }\n        `);\n}\n\nfunction makeOutboundQuery() {\n    return graphql.query(`\n    {\n        outbound_student_programs(deployed:true) {\n            student {\n                id\n                id_number\n                family_name\n                first_name\n                middle_name\n            }\n        }\n    }\n    `);\n}\n\nclass Students extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            allStudents : null,\n            activeStudent : null,\n            activeTab : tabs[0],\n            error : null,\n        };\n\n        this.onAddStudent = this.onAddStudent.bind(this);\n        this.setActiveTab = this.setActiveTab.bind(this);\n        this.fetchStudents = this.fetchStudents.bind(this);\n        this.setActiveStudent = this.setActiveStudent.bind(this);\n        this.onArchiveActiveStudent = this.onArchiveActiveStudent.bind(this);\n        this.extractStudentsFromProgram = this.extractStudentsFromProgram.bind(this);\n\n        this.fetchStudents(this.state.activeTab.name);\n    }\n\n    fetchStudents(tabName) {\n        const category = tabName === \"Inbound\" ? \"IN\" : \"OUT\";\n\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        if (category === \"IN\") {\n            makeInboundQuery()\n                .then(result => this.setState({\n                    allStudents : result.inbound_student_programs,\n                }))\n                .catch(error => this.setState({\n                    error : error,\n                }));\n        } else {\n            makeOutboundQuery()\n                .then(result => this.setState({\n                    allStudents : result.outbound_student_programs,\n                }))\n                .catch(error => this.setState({\n                    error : error,\n                }));\n        }\n    }\n\n    setActiveTab(tab) {\n        this.setState({\n            activeTab : tab,\n            activeStudent : null, //Student is no longer in the same category\n            allStudents : null,\n        });\n\n        this.fetchStudents(tab.name);\n    }\n\n    onAddStudent(student) {\n        // Only set new student as active if user is currently looking at inbounds\n        // Only inbound because the only type of student you can add here is inbound\n        if (this.state.tab.name === \"Inbound\") {\n            this.setState({\n                activeStudent : student,\n            });\n        }\n    }\n\n    onArchiveActiveStudent() {\n        this.setState({\n            activeStudent : null,\n        });\n\n        // Refresh students\n        this.fetchStudents(this.state.activeTab.name);\n    }\n\n    setActiveStudent(student) {\n        this.setState({\n            activeStudent : student,\n        });\n    }\n\n    extractStudentsFromProgram() {\n        if (this.state.allStudents === null) {\n            return null;\n        }\n\n        const students = [];\n\n        this.state.allStudents.forEach(student => {\n            students.push(student.student);\n        });\n\n        return students;\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={ () => this.fetchStudents(this.state.activeTab.name) }>\n                    { this.state.error.toString() }\n                </ErrorState>\n            );\n        }\n\n        const students = this.extractStudentsFromProgram();\n\n        const refresh = () => this.fetchStudents(this.state.activeTab.name);\n\n        return (\n            <div className=\"container-fluid d-flex flex-row p-0 h-100\">\n                <StudentList students={ students }\n                             activeStudent={ this.state.activeStudent }\n                             setActiveStudent={ this.setActiveStudent }\n                             setActiveTab={ this.setActiveTab }\n                             activeTab={ this.state.activeTab }\n                             tabs={ tabs }/>\n                <StudentDetail student={ this.state.activeStudent }\n                               onArchiveActiveStudent={ this.onArchiveActiveStudent }\n                               refreshStudents={ refresh }/>\n            </div>\n        );\n    }\n}\n\nexport default Students;"]}