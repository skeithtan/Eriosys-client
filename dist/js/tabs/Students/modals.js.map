{"version":3,"sources":["../../../../js/tabs/Students/modals.js"],"names":["fetchInstitutions","onResult","query","then","fetchInboundPrograms","fetchOutboundPrograms","StudentFormModal","props","state","form","id_number","first_name","middle_name","family_name","nickname","birth_date","sex","home_address","nationality","civil_status","phone_number","email","emergency_contact_name","emergency_contact_relationship","emergency_contact_number","college","category","studentProgramForm","terms_duration","application_requirements","programs","institutions","resetForm","bind","getFormErrors","getChangeHandler","getSecondChangeHandler","submitAddStudentForm","submitEditStudentForm","fetchingInstitutions","fetchingPrograms","noInstitutions","onSubmitAddStudentForm","setPrograms","onCategoryChange","onTermClick","applicantForm","getApplicantFormErrors","result","length","institution","id","setState","applicant","edit","Object","assign","student","inbound_programs","program","outbound_programs","name","characterLimit","value","customValidators","isValid","fieldValue","errorMessage","fieldName","optional","test","toString","event","target","term","index","indexOf","push","splice","console","log","post","url","serverURL","data","beforeSend","done","fail","response","dismissToast","title","message","JSON","stringify","contentType","success","refresh","error","toggle","ajax","method","isOpen","map","termButtons","includes","formErrors","formHasErrors","fieldErrors","unshift","fieldError","ResidenceAddressFormModal","date_effective","contact_person_name","contact_person_number","address","residence","submitAddResidenceAddressForm","submitEditResidenceAddressForm","refreshResidences"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport authorizeXHR from \"../../authorization\";\nimport { makeInfoToast } from \"../../dismissable_toast_maker\";\nimport validateForm from \"../../form_validator\";\nimport graphql from \"../../graphql\";\nimport settings from \"../../settings\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\n\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    FormFeedback, ButtonGroup,\n} from \"reactstrap\";\n\n\nfunction fetchInstitutions(onResult) {\n    graphql.query(`\n    {\n        institutions {\n            id\n            name\n        }\n    }\n    `).then(onResult);\n}\n\nfunction fetchInboundPrograms(onResult) {\n    graphql.query(`\n    {\n        inbound_programs {\n            id\n            name\n        }\n    }\n    `).then(onResult);\n}\n\nfunction fetchOutboundPrograms(onResult) {\n    graphql.query(`\n    {\n        outbound_programs {\n            id\n            name\n        }\n    }\n    `).then(onResult);\n}\n\nclass StudentFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                id_number : \"\",\n                first_name : \"\",\n                middle_name : \"\",\n                family_name : \"\",\n                nickname : \"\",\n                birth_date : \"\",\n                sex : \"F\",\n                home_address : \"\",\n                nationality : \"\",\n                civil_status : \"S\",\n                phone_number : \"\",\n                email : \"\",\n                emergency_contact_name : \"\",\n                emergency_contact_relationship : \"\",\n                emergency_contact_number : \"\",\n                college : \"CCS\",\n                category : \"IN\",\n            },\n            studentProgramForm : {\n                terms_duration : [],\n                application_requirements : [],\n            },\n            programs : null,\n            institutions : null,\n        };\n\n        this.resetForm = this.resetForm.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.getSecondChangeHandler = this.getSecondChangeHandler.bind(this);\n        this.submitAddStudentForm = this.submitAddStudentForm.bind(this);\n        this.submitEditStudentForm = this.submitEditStudentForm.bind(this);\n        this.fetchingInstitutions = this.fetchingInstitutions.bind(this);\n        this.fetchingPrograms = this.fetchingPrograms.bind(this);\n        this.noInstitutions = this.noInstitutions.bind(this);\n        this.onSubmitAddStudentForm = this.onSubmitAddStudentForm.bind(this);\n        this.setPrograms = this.setPrograms.bind(this);\n        this.onCategoryChange = this.onCategoryChange.bind(this);\n        this.onTermClick = this.onTermClick.bind(this);\n        this.applicantForm = this.applicantForm.bind(this);\n        this.getApplicantFormErrors = this.getApplicantFormErrors.bind(this);\n\n        fetchInstitutions(result => {\n            const institutions = result.institutions;\n            const form = this.state.form;\n\n            // Set default institution if institutions exist\n            if (institutions.length > 0) {\n                form.institution = institutions[0].id;\n            }\n\n            this.setState({\n                institutions : institutions,\n                form : form,\n            });\n        });\n\n        if (this.props.applicant) {\n            this.setPrograms(\"IN\");\n        }\n\n        if (props.edit) {\n            // Copy the object, do not equate, otherwise the object changes along with the form.\n            Object.assign(this.state.form, props.student);\n\n            if (props.student.category === \"IN\") {\n                this.state.form.institution = props.student.institution.id;\n            }\n        }\n    }\n\n    setPrograms(category) {\n        if (category === \"IN\") {\n            fetchInboundPrograms(result => {\n                const programs = result.inbound_programs;\n                const form = this.state.studentProgramForm;\n\n                if (programs.length > 0) {\n                    form.program = programs[0].id;\n                }\n\n                this.setState({\n                    programs : programs,\n                    studentProgramForm : form,\n                });\n            });\n        } else {\n            fetchOutboundPrograms(result => {\n                const programs = result.outbound_programs;\n                const form = this.state.studentProgramForm;\n\n                if (programs.length > 0) {\n                    form.program = programs[0].id;\n                }\n\n                this.setState({\n                    programs : programs,\n                    studentProgramForm : form,\n                });\n            });\n        }\n    }\n\n    resetForm() {\n        this.setState({\n            form : {\n                id_number : \"\",\n                first_name : \"\",\n                middle_name : \"\",\n                family_name : \"\",\n                nickname : \"\",\n                birth_date : \"\",\n                sex : \"F\",\n                home_address : \"\",\n                nationality : \"\",\n                civil_status : \"S\",\n                phone_number : \"\",\n                email : \"\",\n                emergency_contact_name : \"\",\n                emergency_contact_relationship : \"\",\n                emergency_contact_number : \"\",\n                college : \"CCS\",\n                category : \"IN\",\n            },\n        });\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"ID Number\",\n                characterLimit : 8,\n                value : this.state.form.id_number,\n                customValidators : [{\n                    isValid : fieldValue => fieldValue.length === 8,\n                    errorMessage : fieldName => `${fieldName} must be exactly 8 characters.`,\n                }],\n            },\n            {\n                name : \"First name\",\n                characterLimit : 64,\n                value : this.state.form.first_name,\n            },\n            {\n                name : \"Middle name\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.middle_name,\n            },\n            {\n                name : \"Family name\",\n                characterLimit : 64,\n                value : this.state.form.family_name,\n            },\n            {\n                name : \"Nickname\",\n                characterLimit : 64,\n                value : this.state.form.nickname,\n                optional : true,\n            },\n            {\n                name : \"Birth date\",\n                characterLimit : null,\n                value : this.state.form.birth_date,\n            },\n            {\n                name : \"Home address\",\n                characterLimit : 256,\n                value : this.state.form.home_address,\n            },\n            {\n                name : \"Nationality\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.nationality,\n            },\n            {\n                name : \"Phone number\",\n                characterLimit : 64,\n                value : this.state.form.phone_number,\n            },\n            {\n                name : \"Email\",\n                characterLimit : 256,\n                value : this.state.form.email,\n                customValidators : [{\n                    // isValid checks if the form value is a valid email through this messy regex.\n                    isValid : fieldValue => /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(fieldValue),\n                    errorMessage : fieldName => `${fieldName} must be a valid email.`,\n                }],\n            },\n            {\n                name : \"Emergency contact name\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_name,\n            },\n            {\n                name : \"Emergency contact relationship\",\n                characterLimit : 32,\n                value : this.state.form.emergency_contact_relationship,\n            },\n            {\n                name : \"Emergency contact number\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_number,\n            },\n        ]);\n    }\n\n    getApplicantFormErrors() {\n        return validateForm([\n            {\n                name : \"ID Number\",\n                characterLimit : 8,\n                value : this.state.form.id_number,\n                customValidators : [{\n                    isValid : fieldValue => fieldValue.length === 8,\n                    errorMessage : fieldName => `${fieldName} must be exactly 8 characters.`,\n                }],\n            },\n            {\n                name : \"First name\",\n                characterLimit : 64,\n                value : this.state.form.first_name,\n            },\n            {\n                name : \"Middle name\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.middle_name,\n            },\n            {\n                name : \"Family name\",\n                characterLimit : 64,\n                value : this.state.form.family_name,\n            },\n            {\n                name : \"Nickname\",\n                characterLimit : 64,\n                value : this.state.form.nickname,\n                optional : true,\n            },\n            {\n                name : \"Birth date\",\n                characterLimit : null,\n                value : this.state.form.birth_date,\n            },\n            {\n                name : \"Home address\",\n                characterLimit : 256,\n                value : this.state.form.home_address,\n            },\n            {\n                name : \"Nationality\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.nationality,\n            },\n            {\n                name : \"Phone number\",\n                characterLimit : 64,\n                value : this.state.form.phone_number,\n            },\n            {\n                name : \"Email\",\n                characterLimit : 256,\n                value : this.state.form.email,\n                customValidators : [{\n                    // isValid checks if the form value is a valid email through this messy regex.\n                    isValid : fieldValue => /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(fieldValue),\n                    errorMessage : fieldName => `${fieldName} must be a valid email.`,\n                }],\n            },\n            {\n                name : \"Emergency contact name\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_name,\n            },\n            {\n                name : \"Emergency contact relationship\",\n                characterLimit : 32,\n                value : this.state.form.emergency_contact_relationship,\n            },\n            {\n                name : \"Emergency contact number\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_number,\n            },\n            {\n                name : \"Terms duration\",\n                characterLimit : null,\n                value : this.state.studentProgramForm.terms_duration.toString(),\n                customValidators : [{\n                    isValid : fieldValue => [1, 3].toString() !== fieldValue,\n                    errorMessage : fieldName => `${fieldName} must be consecutive`,\n                }],\n            },\n        ]);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n        return event => {\n            if (fieldName === \"category\") {\n                this.setPrograms(event.target.value);\n            }\n\n            form[fieldName] = event.target.value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    getSecondChangeHandler(fieldName) {\n        const form = this.state.studentProgramForm;\n        return event => {\n            form[fieldName] = event.target.value;\n            this.setState({\n                studentProgramForm : form,\n            });\n        };\n    }\n\n    onCategoryChange(category) {\n        this.setPrograms(category);\n    }\n\n    onTermClick(term) {\n        const index = this.state.studentProgramForm.terms_duration.indexOf(term);\n        if (index < 0) {\n            this.state.studentProgramForm.terms_duration.push(term);\n        } else {\n            this.state.studentProgramForm.terms_duration.splice(index, 1);\n        }\n\n        this.setState({\n            studentProgramForm : this.state.studentProgramForm,\n        });\n        console.log(this.state.studentProgramForm.terms_duration);\n    }\n\n    submitAddStudentForm() {\n        $.post({\n            url : `${settings.serverURL}/students/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n        }).done(student => {\n            const form = this.state.studentProgramForm;\n            form.student = student.id;\n            this.setState({\n                studentProgramForm : form,\n            });\n            this.onSubmitAddStudentForm(student);\n        }).fail(response => {\n            console.log(response);\n        });\n    }\n\n    onSubmitAddStudentForm(student) {\n        let url = \"/programs/\";\n        if (student.category === \"IN\") {\n            url += \"inbound/\";\n        } else {\n            url += \"outbound/\";\n        }\n\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new applicant...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}${url}${this.state.studentProgramForm.program}/students/`,\n            data : JSON.stringify(this.state.studentProgramForm),\n            contentType : \"application/json\",\n            beforeSend : authorizeXHR,\n        }).done(student => {\n            dismissToast();\n            iziToast.success({\n                title : \"Added\",\n                message : \"Successfully added applicant\",\n            });\n            this.resetForm();\n            this.props.refresh();\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add applicant\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditStudentForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing student...\",\n        });\n\n        if (this.state.form.category === \"OUT\") {\n            // Outbound students do not have an institution\n            this.state.form.institution = null;\n        }\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/students/${this.state.form.id}/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.resetForm();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully modified student\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to edit student\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    fetchingInstitutions() {\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    Please wait...\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    Institutions are loading...\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    noInstitutions() {\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    Institutions need to be configured first.\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    Institutions must exist students can be added.\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    fetchingPrograms() {\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    Please wait...\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    Programs are loading...\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    applicantForm() {\n        if (!this.props.applicant) {\n            return null;\n        }\n\n        if (this.state.programs !== null) {\n            const programs = this.state.programs.map(program => {\n                return <option value={ program.id } key={ program.id }>{ program.name }</option>;\n            });\n\n            const termButtons = [1, 2, 3].map(term =>\n                <Button outline\n                        color=\"success\"\n                        key={ term }\n                        onClick={ () => this.onTermClick(term) }\n                        active={ this.state.studentProgramForm.terms_duration.includes(term) }>\n                    { term }\n                </Button>,\n            );\n\n            return (\n                <div>\n                    <br/>\n                    <h5 className=\"mb-3\">Program Details</h5>\n                    <FormGroup>\n                        <Label>Program</Label>\n                        <Input type=\"select\"\n                               onChange={ this.getSecondChangeHandler(\"program\") }\n                               value={ this.state.studentProgramForm.program }>\n                            { programs }\n                        </Input>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label>Terms Available</Label>\n                        <div className=\"d-block w-100\">\n                            <ButtonGroup>\n                                { termButtons }\n                            </ButtonGroup>\n                        </div>\n                    </FormGroup>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        const formErrors = this.props.applicant ? this.getApplicantFormErrors() : this.getFormErrors();\n        const formHasErrors = formErrors.formHasErrors;\n        const fieldErrors = formErrors.fieldErrors;\n\n        if (this.state.institutions === null) {\n            return this.fetchingInstitutions();\n        }\n\n        if (this.state.institutions.length === 0) {\n            return this.noInstitutions();\n        }\n\n        if (this.props.applicant) {\n            if (this.state.programs === null) {\n                return this.fetchingPrograms();\n            }\n        }\n\n        const institutions = this.state.institutions.map(institution => {\n            return <option value={ institution.id }\n                           key={ institution.id }>{ institution.name }</option>;\n        });\n\n        institutions.unshift(\n            <option value={ \"\" } key={ 0 }>Select an institution</option>,\n        );\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    { this.props.edit ? `Edit ${this.state.form.first_name} ${this.state.form.family_name}` : \"Add a Student\" }\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <h5 className=\"mb-3\">Student Details</h5>\n\n                        <FormGroup>\n                            <Label>ID Number</Label>\n                            <Input placeholder=\"ID Number\"\n                                   onChange={ this.getChangeHandler(\"id_number\") }\n                                   valid={ isValid(\"ID Number\") }\n                                   value={ this.state.form.id_number }/>\n                            <FormFeedback>{ fieldError(\"ID Number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>First Name</Label>\n                            <Input placeholder=\"First Name\"\n                                   onChange={ this.getChangeHandler(\"first_name\") }\n                                   valid={ isValid(\"First name\") }\n                                   value={ this.state.form.first_name }/>\n                            <FormFeedback>{ fieldError(\"First name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Middle Name</Label>\n                            <Input placeholder=\"Middle Name\"\n                                   onChange={ this.getChangeHandler(\"middle_name\") }\n                                   valid={ isValid(\"Middle name\") }\n                                   value={ this.state.form.middle_name }/>\n                            <FormFeedback>{ fieldError(\"Middle name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Family Name</Label>\n                            <Input placeholder=\"Last Name\"\n                                   onChange={ this.getChangeHandler(\"family_name\") }\n                                   valid={ isValid(\"Family name\") }\n                                   value={ this.state.form.family_name }/>\n                            <FormFeedback>{ fieldError(\"Family name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Nickname</Label>\n                            <Input placeholder=\"Nickname\"\n                                   onChange={ this.getChangeHandler(\"nickname\") }\n                                   valid={ isValid(\"Nickname\") }\n                                   value={ this.state.form.nickname }/>\n                            <FormFeedback>{ fieldError(\"Nickname\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Birth Date</Label>\n                            <Input type=\"date\"\n                                   placeholder=\"Birth Date\"\n                                   onChange={ this.getChangeHandler(\"birth_date\") }\n                                   valid={ isValid(\"Birth date\") }\n                                   value={ this.state.form.birth_date }/>\n                            <FormFeedback>{ fieldError(\"Birth date\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Sex</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"sex\") }\n                                   value={ this.state.form.sex }>\n                                <option value=\"F\">Female</option>\n                                <option value=\"M\">Male</option>\n                            </Input>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Home Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Home Address\"\n                                   onChange={ this.getChangeHandler(\"home_address\") }\n                                   valid={ isValid(\"Home address\") }\n                                   value={ this.state.form.home_address }/>\n                            <FormFeedback>{ fieldError(\"Home address\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Nationality</Label>\n                            <Input placeholder=\"Nationality\"\n                                   onChange={ this.getChangeHandler(\"nationality\") }\n                                   valid={ isValid(\"Nationality\") }\n                                   value={ this.state.form.nationality }/>\n                            <FormFeedback>{ fieldError(\"Nationality\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Civil Status</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"civil_status\") }\n                                   value={ this.state.form.civil_status }>\n                                <option value=\"S\">Single</option>\n                                <option value=\"M\">Married</option>\n                                <option value=\"D\">Divorced</option>\n                                <option value=\"W\">Widowed</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br/>\n                        <h5 className=\"mb-3\">Contact Details</h5>\n                        <FormGroup>\n                            <Label>Phone Number</Label>\n                            <Input placeholder=\"Phone Number\"\n                                   onChange={ this.getChangeHandler(\"phone_number\") }\n                                   valid={ isValid(\"Phone number\") }\n                                   value={ this.state.form.phone_number }/>\n                            <FormFeedback>{ fieldError(\"Phone number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Email</Label>\n                            <Input placeholder=\"Email\"\n                                   onChange={ this.getChangeHandler(\"email\") }\n                                   valid={ isValid(\"Email\") }\n                                   value={ this.state.form.email }/>\n                            <FormFeedback>{ fieldError(\"Email\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Name</Label>\n                            <Input placeholder=\"Emergency Contact Name\"\n                                   onChange={ this.getChangeHandler(\"emergency_contact_name\") }\n                                   valid={ isValid(\"Emergency contact name\") }\n                                   value={ this.state.form.emergency_contact_name }/>\n                            <FormFeedback>{ fieldError(\"Emergency contact name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Relationship</Label>\n                            <Input placeholder=\"Emergency Contact Relationship\"\n                                   onChange={ this.getChangeHandler(\"emergency_contact_relationship\") }\n                                   valid={ isValid(\"Emergency contact relationship\") }\n                                   value={ this.state.form.emergency_contact_relationship }/>\n                            <FormFeedback>{ fieldError(\"Emergency contact relationship\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Number</Label>\n                            <Input placeholder=\"Emergency Contact Number\"\n                                   onChange={ this.getChangeHandler(\"emergency_contact_number\") }\n                                   valid={ isValid(\"Emergency contact number\") }\n                                   value={ this.state.form.emergency_contact_number }/>\n                            <FormFeedback>{ fieldError(\"Emergency contact number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <br/>\n                        <h5 className=\"mb-3\">University Details</h5>\n                        <FormGroup>\n                            <Label>Student Category</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"category\") }\n                                   value={ this.state.form.category }>\n                                <option value=\"IN\">Inbound</option>\n                                <option value=\"OUT\">Outbound</option>\n                            </Input>\n                        </FormGroup>\n\n                        { this.state.form.category === \"IN\" &&\n                        <FormGroup>\n                            <Label>Institution</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"institution\") }\n                                   value={ this.state.form.institution }>\n                                { institutions }\n                            </Input>\n                        </FormGroup>\n                        }\n\n                        <FormGroup>\n                            <Label>College</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"college\") }\n                                   value={ this.state.form.college }>\n                                <option value=\"CCS\">College of Computer Studies</option>\n                                <option value=\"RVRCOB\">Ramon V. del Rosario College of Business</option>\n                                <option value=\"CLA\">College of Liberal Arts</option>\n                                <option value=\"SOE\">School of Economics</option>\n                                <option value=\"GCOE\">Gokongwei College of Engineering</option>\n                                <option value=\"COL\">College of Law</option>\n                                <option value=\"BAGCED\">Brother Andrew Gonzales College of Education</option>\n                            </Input>\n                        </FormGroup>\n\n                        { this.applicantForm() }\n\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={ this.props.edit ? this.submitEditStudentForm : this.submitAddStudentForm }\n                            disabled={ formHasErrors }>\n                        { this.props.edit ? \"Save changes\" : \"Add\" }\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n}\n\nclass ResidenceAddressFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                date_effective : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                address : \"\",\n                residence : \"\",\n            },\n        };\n\n        this.resetForm = this.resetForm.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddResidenceAddressForm = this.submitAddResidenceAddressForm.bind(this);\n        this.submitEditResidenceAddressForm = this.submitEditResidenceAddressForm.bind(this);\n\n        if (this.props.edit) {\n            Object.assign(this.state.form, props.residence);\n        }\n    }\n\n    resetForm() {\n        this.setState({\n            form : {\n                date_effective : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                address : \"\",\n                residence : \"\",\n            },\n        });\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Date effective\",\n                value : this.state.form.date_effective,\n            },\n            {\n                name : \"Contact person name\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_name,\n            },\n            {\n                name : \"Contact person number\",\n                characterLimit : 64,\n                value : this.state.form.contact_person_number,\n            },\n            {\n                name : \"Address\",\n                characterLimit : 256,\n                value : this.state.form.address,\n            },\n            {\n                name : \"Residence type\",\n                characterLimit : 64,\n                value : this.state.form.residence,\n            },\n        ]);\n    }\n\n    submitEditResidenceAddressForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing residence address...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/students/${this.props.student.id}/residency/${this.props.residence.id}/`,\n            method : \"PUT\",\n            beforeSend : authorizeXHR,\n            data : this.state.form,\n        }).done(() => {\n            dismissToast();\n            this.resetForm();\n            iziToast.success({\n                title : \"Edited\",\n                message : \"Successfully edited residence address\",\n            });\n\n            this.props.refreshResidences();\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to edit residence address\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    submitAddResidenceAddressForm() {\n        this.props.toggle();\n\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new residence address...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/students/${this.props.student.id}/residency/`,\n            beforeSend : authorizeXHR,\n            data : this.state.form,\n        }).done(() => {\n            dismissToast();\n            this.resetForm();\n            iziToast.success({\n                title : \"Added\",\n                message : \"Successfully added residence address\",\n            });\n\n            this.props.refreshResidences();\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add residence address\",\n            });\n        });\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    render() {\n        const {formHasErrors, fieldErrors} = this.getFormErrors();\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader>\n                    { this.props.edit ? \"Edit Residence Address\" : \"Add a Residence Address\" }\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <FormGroup>\n                            <Label>Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Address\"\n                                   onChange={ this.getChangeHandler(\"address\") }\n                                   valid={ isValid(\"Address\") }\n                                   value={ this.state.form.address }/>\n                            <FormFeedback>{ fieldError(\"Address\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Person</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={ this.getChangeHandler(\"contact_person_name\") }\n                                   valid={ isValid(\"Contact person name\") }\n                                   value={ this.state.form.contact_person_name }/>\n                            <FormFeedback>{ fieldError(\"Contact person name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Number</Label>\n                            <Input placeholder=\"Number\"\n                                   onChange={ this.getChangeHandler(\"contact_person_number\") }\n                                   valid={ isValid(\"Contact person number\") }\n                                   value={ this.state.form.contact_person_number }/>\n                            <FormFeedback>{ fieldError(\"Contact person number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Residence Type</Label>\n                            <Input placeholder=\"Residence Type\"\n                                   onChange={ this.getChangeHandler(\"residence\") }\n                                   valid={ isValid(\"Residence type\") }\n                                   value={ this.state.form.residence }/>\n                            <FormFeedback>{ fieldError(\"Residence type\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Date Effective</Label>\n                            <Input type=\"date\"\n                                   value={ this.state.form.date_effective }\n                                   onChange={ this.getChangeHandler(\"date_effective\") }\n                                   valid={ isValid(\"Date effective\") }/>\n                            <FormFeedback>{ fieldError(\"Date effective\") }</FormFeedback>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={ formHasErrors }\n                            onClick={ this.props.edit ? this.submitEditResidenceAddressForm : this.submitAddResidenceAddressForm }>\n                        { this.props.edit ? \"Save changes\" : \"Add\" }\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nexport {\n    StudentFormModal,\n    ResidenceAddressFormModal,\n};"]}