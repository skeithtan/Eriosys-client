{"version":3,"sources":["../../../../js/tabs/Students/modals.js"],"names":["fetchInstitutions","onResult","query","then","StudentFormModal","props","state","form","id_number","first_name","middle_name","family_name","nickname","birth_date","sex","home_address","nationality","civil_status","phone_number","email","emergency_contact_name","emergency_contact_relationship","emergency_contact_number","college","category","institutions","getFormErrors","bind","getChangeHandler","submitAddStudentForm","submitEditStudentForm","fetchingInstitutions","noInstitutions","result","length","institution","id","setState","edit","Object","assign","student","name","characterLimit","value","customValidators","isValid","fieldValue","errorMessage","fieldName","optional","test","event","target","dismissToast","title","message","post","url","serverURL","data","beforeSend","done","refresh","onAddStudent","success","fail","console","log","response","error","toggle","ajax","method","isOpen","formErrors","formHasErrors","fieldErrors","map","fieldError","ArchiveStudentModal","confirmArchive","progressBar","first","middle","last","ResidenceAddressFormModal","date_effective","contact_person_name","contact_person_number","address","residence","submitAddResidenceAddressForm","refreshResidences"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport authorizeXHR from \"../../authorization\";\nimport makeInfoToast from \"../../dismissable_toast_maker\";\nimport validateForm from \"../../form_validator\";\nimport graphql from \"../../graphql\";\nimport settings from \"../../settings\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\n\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    FormFeedback,\n} from \"reactstrap\";\n\n\nfunction fetchInstitutions(onResult) {\n    graphql.query(`\n    {\n        institutions {\n            id\n            name\n        }\n    }\n    `).then(onResult);\n}\n\nclass StudentFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                id_number : \"\",\n                first_name : \"\",\n                middle_name : \"\",\n                family_name : \"\",\n                nickname : \"\",\n                birth_date : \"\",\n                sex : \"F\",\n                home_address : \"\",\n                nationality : \"\",\n                civil_status : \"S\",\n                phone_number : \"\",\n                email : \"\",\n                emergency_contact_name : \"\",\n                emergency_contact_relationship : \"\",\n                emergency_contact_number : \"\",\n                college : \"CCS\",\n                category : \"IN\",\n            },\n            institutions : null,\n        };\n\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddStudentForm = this.submitAddStudentForm.bind(this);\n        this.submitEditStudentForm = this.submitEditStudentForm.bind(this);\n        this.fetchingInstitutions = this.fetchingInstitutions.bind(this);\n        this.noInstitutions = this.noInstitutions.bind(this);\n\n        fetchInstitutions(result => {\n            const institutions = result.institutions;\n            const form = this.state.form;\n\n            // Set default institution if institutions exist\n            if (institutions.length > 0) {\n                form.institution = institutions[0].id;\n            }\n\n            this.setState({\n                institutions : institutions,\n                form : form,\n            });\n        });\n\n        if (props.edit) {\n            // Copy the object, do not equate, otherwise the object changes along with the form.\n            Object.assign(this.state.form, props.student);\n\n            if (props.student.category === \"IN\") {\n                this.state.form.institution = props.student.institution.id;\n            }\n        }\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"ID Number\",\n                characterLimit : 8,\n                value : this.state.form.id_number,\n                customValidators : [{\n                    isValid : fieldValue => fieldValue.length === 8,\n                    errorMessage : fieldName => `${fieldName} must be exactly 8 characters.`,\n                }],\n            },\n            {\n                name : \"First name\",\n                characterLimit : 64,\n                value : this.state.form.first_name,\n            },\n            {\n                name : \"Middle name\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.middle_name,\n            },\n            {\n                name : \"Family name\",\n                characterLimit : 64,\n                value : this.state.form.family_name,\n            },\n            {\n                name : \"Nickname\",\n                characterLimit : 64,\n                value : this.state.form.nickname,\n                optional : true,\n            },\n            {\n                name : \"Birth date\",\n                characterLimit : null,\n                value : this.state.form.birth_date,\n            },\n            {\n                name : \"Home address\",\n                characterLimit : 256,\n                value : this.state.form.home_address,\n            },\n            {\n                name : \"Nationality\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.nationality,\n            },\n            {\n                name : \"Phone number\",\n                characterLimit : 64,\n                value : this.state.form.phone_number,\n            },\n            {\n                name : \"Email\",\n                characterLimit : 256,\n                value : this.state.form.email,\n                customValidators : [{\n                    // isValid checks if the form value is a valid email through this messy regex.\n                    isValid : fieldValue => /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(fieldValue),\n                    errorMessage : fieldName => `${fieldName} must be a valid email.`,\n                }],\n            },\n            {\n                name : \"Emergency contact name\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_name,\n            },\n            {\n                name : \"Emergency contact relationship\",\n                characterLimit : 32,\n                value : this.state.form.emergency_contact_relationship,\n            },\n            {\n                name : \"Emergency contact number\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_number,\n            },\n        ]);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n        return event => {\n            form[fieldName] = event.target.value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    submitAddStudentForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new student...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/students/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n        }).done(student => {\n            dismissToast();\n            this.props.refresh();\n            this.props.onAddStudent(student);\n            iziToast.success({\n                title : \"Added\",\n                message : \"Successfully added student\",\n            });\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add student\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditStudentForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing student...\",\n        });\n\n        if (this.state.form.category === \"OUT\") {\n            // Outbound students do not have an institution\n            this.state.form.institution = null;\n        }\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/students/${this.state.form.id}/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully modified student\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to edit student\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    fetchingInstitutions() {\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    Please wait...\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    Institutions are loading...\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    noInstitutions() {\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    Institutions need to be configured first.\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    Institutions must exist students can be added.\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    render() {\n        const formErrors = this.getFormErrors();\n        const formHasErrors = formErrors.formHasErrors;\n        const fieldErrors = formErrors.fieldErrors;\n\n        if (this.state.institutions === null) {\n            return this.fetchingInstitutions();\n        }\n\n        if (this.state.institutions.length === 0) {\n            return this.noInstitutions();\n        }\n\n        const institutions = this.state.institutions.map(institution => {\n            return <option value={institution.id}\n                           key={institution.id}>{institution.name}</option>;\n        });\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader toggle={this.props.toggle}>\n                    {this.props.edit ? `Edit ${this.state.form.first_name} ${this.state.form.family_name}` : \"Add a Student\"}\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <h5 className=\"mb-3\">Student Details</h5>\n\n                        <FormGroup>\n                            <Label>ID Number</Label>\n                            <Input placeholder=\"ID Number\"\n                                   onChange={this.getChangeHandler(\"id_number\")}\n                                   valid={isValid(\"ID Number\")}\n                                   defaultValue={this.state.form.id_number}/>\n                            <FormFeedback>{fieldError(\"ID Number\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>First Name</Label>\n                            <Input placeholder=\"First Name\"\n                                   onChange={this.getChangeHandler(\"first_name\")}\n                                   valid={isValid(\"First name\")}\n                                   defaultValue={this.state.form.first_name}/>\n                            <FormFeedback>{fieldError(\"First name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Middle Name</Label>\n                            <Input placeholder=\"Middle Name\"\n                                   onChange={this.getChangeHandler(\"middle_name\")}\n                                   valid={isValid(\"Middle name\")}\n                                   defaultValue={this.state.form.middle_name}/>\n                            <FormFeedback>{fieldError(\"Middle name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Family Name</Label>\n                            <Input placeholder=\"Last Name\"\n                                   onChange={this.getChangeHandler(\"family_name\")}\n                                   valid={isValid(\"Family name\")}\n                                   defaultValue={this.state.form.family_name}/>\n                            <FormFeedback>{fieldError(\"Family name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Nickname</Label>\n                            <Input placeholder=\"Nickname\"\n                                   onChange={this.getChangeHandler(\"nickname\")}\n                                   valid={isValid(\"Nickname\")}\n                                   defaultValue={this.state.form.nickname}/>\n                            <FormFeedback>{fieldError(\"Nickname\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Birth Date</Label>\n                            <Input type=\"date\"\n                                   placeholder=\"Birth Date\"\n                                   onChange={this.getChangeHandler(\"birth_date\")}\n                                   valid={isValid(\"Birth date\")}\n                                   defaultValue={this.state.form.birth_date}/>\n                            <FormFeedback>{fieldError(\"Birth date\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Sex</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"sex\")}\n                                   defaultValue={this.state.form.sex}>\n                                <option value=\"F\">Female</option>\n                                <option value=\"M\">Male</option>\n                            </Input>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Home Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Home Address\"\n                                   onChange={this.getChangeHandler(\"home_address\")}\n                                   valid={isValid(\"Home address\")}\n                                   defaultValue={this.state.form.home_address}/>\n                            <FormFeedback>{fieldError(\"Home address\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Nationality</Label>\n                            <Input placeholder=\"Nationality\"\n                                   onChange={this.getChangeHandler(\"nationality\")}\n                                   valid={isValid(\"Nationality\")}\n                                   defaultValue={this.state.form.nationality}/>\n                            <FormFeedback>{fieldError(\"Nationality\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Civil Status</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"civil_status\")}\n                                   defaultValue={this.state.form.civil_status}>\n                                <option value=\"S\">Single</option>\n                                <option value=\"M\">Married</option>\n                                <option value=\"D\">Divorced</option>\n                                <option value=\"W\">Widowed</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br/>\n                        <h5 className=\"mb-3\">Contact Details</h5>\n                        <FormGroup>\n                            <Label>Phone Number</Label>\n                            <Input placeholder=\"Phone Number\"\n                                   onChange={this.getChangeHandler(\"phone_number\")}\n                                   valid={isValid(\"Phone number\")}\n                                   defaultValue={this.state.form.phone_number}/>\n                            <FormFeedback>{fieldError(\"Phone number\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Email</Label>\n                            <Input placeholder=\"Email\"\n                                   onChange={this.getChangeHandler(\"email\")}\n                                   valid={isValid(\"Email\")}\n                                   defaultValue={this.state.form.email}/>\n                            <FormFeedback>{fieldError(\"Email\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Name</Label>\n                            <Input placeholder=\"Emergency Contact Name\"\n                                   onChange={this.getChangeHandler(\"emergency_contact_name\")}\n                                   valid={isValid(\"Emergency contact name\")}\n                                   defaultValue={this.state.form.emergency_contact_name}/>\n                            <FormFeedback>{fieldError(\"Emergency contact name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Relationship</Label>\n                            <Input placeholder=\"Emergency Contact Relationship\"\n                                   onChange={this.getChangeHandler(\"emergency_contact_relationship\")}\n                                   valid={isValid(\"Emergency contact relationship\")}\n                                   defaultValue={this.state.form.emergency_contact_relationship}/>\n                            <FormFeedback>{fieldError(\"Emergency contact relationship\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Number</Label>\n                            <Input placeholder=\"Emergency Contact Number\"\n                                   onChange={this.getChangeHandler(\"emergency_contact_number\")}\n                                   valid={isValid(\"Emergency contact number\")}\n                                   defaultValue={this.state.form.emergency_contact_number}/>\n                            <FormFeedback>{fieldError(\"Emergency contact number\")}</FormFeedback>\n                        </FormGroup>\n\n                        <br/>\n                        <h5 className=\"mb-3\">University Details</h5>\n                        <FormGroup>\n                            <Label>Institution</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"institution\")}\n                                   defaultValue={this.state.form.institution}>\n                                {institutions}\n                            </Input>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>College</Label>\n                            <Input type=\"select\"\n                                   onChange={this.getChangeHandler(\"college\")}\n                                   defaultValue={this.state.form.college}>\n                                <option value=\"CCS\">College of Computer Studies</option>\n                                <option value=\"RVRCOB\">Ramon V. del Rosario College of Business</option>\n                                <option value=\"CLA\">College of Liberal Arts</option>\n                                <option value=\"SOE\">School of Economics</option>\n                                <option value=\"GCOE\">Gokongwei College of Engineering</option>\n                                <option value=\"COL\">College of Law</option>\n                                <option value=\"BAGCED\">Brother Andrew Gonzales College of Education</option>\n                            </Input>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={this.props.edit ? this.submitEditStudentForm : this.submitAddStudentForm}\n                            disabled={formHasErrors}>\n                        {this.props.edit ? \"Save changes\" : \"Add\"}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n}\n\nclass ArchiveStudentModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.confirmArchive = this.confirmArchive.bind(this);\n    }\n\n    confirmArchive() {\n        const dismissToast = makeInfoToast({\n            title : \"Archiving\",\n            message : \"Archiving student...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/students/${this.props.student.id}/`,\n            method : \"DELETE\",\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Student archived\",\n                    progressBar : false,\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to archive student\",\n                    progressBar : false,\n                });\n            },\n        });\n        this.props.toggle();\n    }\n\n    render() {\n        const first = this.props.student.first_name;\n        const middle = this.props.student.middle_name;\n        const last = this.props.student.family_name;\n        const name = first + \" \" + middle + \" \" + last;\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}\n                   id=\"archive-student-modal\">\n                <ModalHeader className=\"text-yellow\">\n                    Are you sure you want to archive {name}?\n                </ModalHeader>\n                <ModalFooter>\n                    <Button outline\n                            color=\"warning\"\n                            onClick={this.confirmArchive}>Confirm Archive</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass ResidenceAddressFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                date_effective : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                address : \"\",\n                residence : \"\",\n            },\n        };\n\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddResidenceAddressForm = this.submitAddResidenceAddressForm.bind(this);\n\n        if (this.props.edit) {\n            Object.assign(this.state.form, props.residence);\n        }\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Date effective\",\n                value : this.state.form.date_effective,\n            },\n            {\n                name : \"Contact person name\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_name,\n            },\n            {\n                name : \"Contact person number\",\n                characterLimit : 64,\n                value : this.state.form.contact_person_number,\n            },\n            {\n                name : \"Address\",\n                characterLimit : 256,\n                value : this.state.form.address,\n            },\n            {\n                name : \"Residence type\",\n                characterLimit : 64,\n                value : this.state.form.residence,\n            },\n        ]);\n    }\n\n    submitEditResidenceAddressForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing residence address...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/students/${this.props.student.id}/residency/${this.props.residence.id}/`,\n            method : \"PUT\",\n            beforeSend : authorizeXHR,\n            data : this.state.form,\n        }).done(() => {\n            dismissToast();\n            iziToast.success({\n                title : \"Edited\",\n                message : \"Successfully edited residence address\",\n            });\n\n            this.props.refreshResidences();\n        }).error(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to edit residence address\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    submitAddResidenceAddressForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new residence address...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/students/${this.props.student.id}/residency/`,\n            beforeSend : authorizeXHR,\n            data : this.state.form,\n        }).done(() => {\n            dismissToast();\n            iziToast.success({\n                title : \"Added\",\n                message : \"Successfully added residence address\",\n            });\n\n            this.props.refreshResidences();\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add residence address\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = this.getFormErrors();\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   backdrop={true}>\n                <ModalHeader>\n                    {this.props.edit ? \"Edit Residence Address\" : \"Add a Residence Address\"}\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <FormGroup>\n                            <Label>Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Address\"\n                                   onChange={this.getChangeHandler(\"address\")}\n                                   valid={isValid(\"Address\")}\n                                   defaultValue={this.state.form.address}/>\n                            <FormFeedback>{fieldError(\"Address\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Person</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={this.getChangeHandler(\"contact_person_name\")}\n                                   valid={isValid(\"Contact person name\")}\n                                   defaultValue={this.state.form.contact_person_name}/>\n                            <FormFeedback>{fieldError(\"Contact person name\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Number</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={this.getChangeHandler(\"contact_person_number\")}\n                                   valid={isValid(\"Contact person number\")}\n                                   defaultValue={this.state.form.contact_person_number}/>\n                            <FormFeedback>{fieldError(\"Contact person number\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Residence Type</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={this.getChangeHandler(\"residence\")}\n                                   valid={isValid(\"Residence type\")}\n                                   defaultValue={this.state.form.residence}/>\n                            <FormFeedback>{fieldError(\"Residence type\")}</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Date Effective</Label>\n                            <Input type=\"date\"\n                                   defaultValue={this.state.form.date_effective}\n                                   onChange={this.getChangeHandler(\"date_effective\")}\n                                   valid={isValid(\"Date effective\")}/>\n                            <FormFeedback>{fieldError(\"Date effective\")}</FormFeedback>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={formHasErrors}\n                            onClick={this.props.edit ? this.submitAddResidenceAddressForm : this.submitAddResidenceAddressForm}>\n                        {this.props.edit ? \"Save changes\" : \"Add\"}\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nexport {\n    StudentFormModal,\n    ArchiveStudentModal,\n    ResidenceAddressFormModal,\n};"]}