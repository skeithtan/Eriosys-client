{"version":3,"sources":["../../../../js/tabs/Students/modals.js"],"names":["fetchInstitutions","onResult","query","then","StudentFormModal","props","state","form","id_number","first_name","middle_name","family_name","nickname","birth_date","sex","home_address","nationality","civil_status","phone_number","email","emergency_contact_name","emergency_contact_relationship","emergency_contact_number","college","category","institutions","resetForm","bind","getFormErrors","getChangeHandler","submitAddStudentForm","submitEditStudentForm","fetchingInstitutions","noInstitutions","result","length","institution","id","setState","edit","Object","assign","student","name","characterLimit","value","customValidators","isValid","fieldValue","errorMessage","fieldName","optional","test","event","target","dismissToast","title","message","post","url","serverURL","data","beforeSend","done","refresh","success","fail","console","log","response","error","toggle","ajax","method","isOpen","formErrors","formHasErrors","fieldErrors","map","unshift","fieldError","ResidenceAddressFormModal","date_effective","contact_person_name","contact_person_number","address","residence","submitAddResidenceAddressForm","submitEditResidenceAddressForm","refreshResidences"],"mappings":"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","file":"modals.js","sourcesContent":["import React, { Component } from \"react\";\nimport authorizeXHR from \"../../authorization\";\nimport { makeInfoToast } from \"../../dismissable_toast_maker\";\nimport validateForm from \"../../form_validator\";\nimport graphql from \"../../graphql\";\nimport settings from \"../../settings\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\n\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    FormFeedback,\n} from \"reactstrap\";\n\n\nfunction fetchInstitutions(onResult) {\n    graphql.query(`\n    {\n        institutions {\n            id\n            name\n        }\n    }\n    `).then(onResult);\n}\n\nclass StudentFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                id_number : \"\",\n                first_name : \"\",\n                middle_name : \"\",\n                family_name : \"\",\n                nickname : \"\",\n                birth_date : \"\",\n                sex : \"F\",\n                home_address : \"\",\n                nationality : \"\",\n                civil_status : \"S\",\n                phone_number : \"\",\n                email : \"\",\n                emergency_contact_name : \"\",\n                emergency_contact_relationship : \"\",\n                emergency_contact_number : \"\",\n                college : \"CCS\",\n                category : \"IN\",\n            },\n            institutions : null,\n        };\n\n        this.resetForm = this.resetForm.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddStudentForm = this.submitAddStudentForm.bind(this);\n        this.submitEditStudentForm = this.submitEditStudentForm.bind(this);\n        this.fetchingInstitutions = this.fetchingInstitutions.bind(this);\n        this.noInstitutions = this.noInstitutions.bind(this);\n\n        fetchInstitutions(result => {\n            const institutions = result.institutions;\n            const form = this.state.form;\n\n            // Set default institution if institutions exist\n            if (institutions.length > 0) {\n                form.institution = institutions[0].id;\n            }\n\n            this.setState({\n                institutions : institutions,\n                form : form,\n            });\n        });\n\n        if (props.edit) {\n            // Copy the object, do not equate, otherwise the object changes along with the form.\n            Object.assign(this.state.form, props.student);\n\n            if (props.student.category === \"IN\") {\n                this.state.form.institution = props.student.institution.id;\n            }\n        }\n    }\n\n    resetForm() {\n        this.setState({\n            form : {\n                id_number : \"\",\n                first_name : \"\",\n                middle_name : \"\",\n                family_name : \"\",\n                nickname : \"\",\n                birth_date : \"\",\n                sex : \"F\",\n                home_address : \"\",\n                nationality : \"\",\n                civil_status : \"S\",\n                phone_number : \"\",\n                email : \"\",\n                emergency_contact_name : \"\",\n                emergency_contact_relationship : \"\",\n                emergency_contact_number : \"\",\n                college : \"CCS\",\n                category : \"IN\",\n            },\n        });\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"ID Number\",\n                characterLimit : 8,\n                value : this.state.form.id_number,\n                customValidators : [{\n                    isValid : fieldValue => fieldValue.length === 8,\n                    errorMessage : fieldName => `${fieldName} must be exactly 8 characters.`,\n                }],\n            },\n            {\n                name : \"First name\",\n                characterLimit : 64,\n                value : this.state.form.first_name,\n            },\n            {\n                name : \"Middle name\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.middle_name,\n            },\n            {\n                name : \"Family name\",\n                characterLimit : 64,\n                value : this.state.form.family_name,\n            },\n            {\n                name : \"Nickname\",\n                characterLimit : 64,\n                value : this.state.form.nickname,\n                optional : true,\n            },\n            {\n                name : \"Birth date\",\n                characterLimit : null,\n                value : this.state.form.birth_date,\n            },\n            {\n                name : \"Home address\",\n                characterLimit : 256,\n                value : this.state.form.home_address,\n            },\n            {\n                name : \"Nationality\",\n                characterLimit : 64,\n                optional : true,\n                value : this.state.form.nationality,\n            },\n            {\n                name : \"Phone number\",\n                characterLimit : 64,\n                value : this.state.form.phone_number,\n            },\n            {\n                name : \"Email\",\n                characterLimit : 256,\n                value : this.state.form.email,\n                customValidators : [{\n                    // isValid checks if the form value is a valid email through this messy regex.\n                    isValid : fieldValue => /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(fieldValue),\n                    errorMessage : fieldName => `${fieldName} must be a valid email.`,\n                }],\n            },\n            {\n                name : \"Emergency contact name\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_name,\n            },\n            {\n                name : \"Emergency contact relationship\",\n                characterLimit : 32,\n                value : this.state.form.emergency_contact_relationship,\n            },\n            {\n                name : \"Emergency contact number\",\n                characterLimit : 64,\n                value : this.state.form.emergency_contact_number,\n            },\n        ]);\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n        return event => {\n            form[fieldName] = event.target.value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    submitAddStudentForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new student...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/students/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n        }).done(student => {\n            dismissToast();\n            this.resetForm();\n            this.props.refresh();\n            // this.props.onAddStudent(student);\n            iziToast.success({\n                title : \"Added\",\n                message : \"Successfully added student\",\n            });\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add student\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    submitEditStudentForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing student...\",\n        });\n\n        if (this.state.form.category === \"OUT\") {\n            // Outbound students do not have an institution\n            this.state.form.institution = null;\n        }\n\n        $.ajax({\n            method : \"PUT\",\n            url : `${settings.serverURL}/students/${this.state.form.id}/`,\n            data : this.state.form,\n            beforeSend : authorizeXHR,\n            success : () => {\n                dismissToast();\n                this.resetForm();\n                this.props.refresh();\n                iziToast.success({\n                    title : \"Success\",\n                    message : \"Successfully modified student\",\n                });\n            },\n            error : response => {\n                dismissToast();\n                console.log(response);\n                iziToast.error({\n                    title : \"Error\",\n                    message : \"Unable to edit student\",\n                });\n            },\n        });\n\n        this.props.toggle();\n    }\n\n    fetchingInstitutions() {\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    Please wait...\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    Institutions are loading...\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    noInstitutions() {\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    Institutions need to be configured first.\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    Institutions must exist students can be added.\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    render() {\n        const formErrors = this.getFormErrors();\n        const formHasErrors = formErrors.formHasErrors;\n        const fieldErrors = formErrors.fieldErrors;\n\n        if (this.state.institutions === null) {\n            return this.fetchingInstitutions();\n        }\n\n        if (this.state.institutions.length === 0) {\n            return this.noInstitutions();\n        }\n\n        const institutions = this.state.institutions.map(institution => {\n            return <option value={ institution.id }\n                           key={ institution.id }>{ institution.name }</option>;\n        });\n\n        institutions.unshift(\n            <option value={ \"\" } key={ 0 }>Select an institution</option>,\n        );\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader toggle={ this.props.toggle }>\n                    { this.props.edit ? `Edit ${this.state.form.first_name} ${this.state.form.family_name}` : \"Add a Student\" }\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <h5 className=\"mb-3\">Student Details</h5>\n\n                        <FormGroup>\n                            <Label>ID Number</Label>\n                            <Input placeholder=\"ID Number\"\n                                   onChange={ this.getChangeHandler(\"id_number\") }\n                                   valid={ isValid(\"ID Number\") }\n                                   value={ this.state.form.id_number }/>\n                            <FormFeedback>{ fieldError(\"ID Number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>First Name</Label>\n                            <Input placeholder=\"First Name\"\n                                   onChange={ this.getChangeHandler(\"first_name\") }\n                                   valid={ isValid(\"First name\") }\n                                   value={ this.state.form.first_name }/>\n                            <FormFeedback>{ fieldError(\"First name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Middle Name</Label>\n                            <Input placeholder=\"Middle Name\"\n                                   onChange={ this.getChangeHandler(\"middle_name\") }\n                                   valid={ isValid(\"Middle name\") }\n                                   value={ this.state.form.middle_name }/>\n                            <FormFeedback>{ fieldError(\"Middle name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Family Name</Label>\n                            <Input placeholder=\"Last Name\"\n                                   onChange={ this.getChangeHandler(\"family_name\") }\n                                   valid={ isValid(\"Family name\") }\n                                   value={ this.state.form.family_name }/>\n                            <FormFeedback>{ fieldError(\"Family name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Nickname</Label>\n                            <Input placeholder=\"Nickname\"\n                                   onChange={ this.getChangeHandler(\"nickname\") }\n                                   valid={ isValid(\"Nickname\") }\n                                   value={ this.state.form.nickname }/>\n                            <FormFeedback>{ fieldError(\"Nickname\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Birth Date</Label>\n                            <Input type=\"date\"\n                                   placeholder=\"Birth Date\"\n                                   onChange={ this.getChangeHandler(\"birth_date\") }\n                                   valid={ isValid(\"Birth date\") }\n                                   value={ this.state.form.birth_date }/>\n                            <FormFeedback>{ fieldError(\"Birth date\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Sex</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"sex\") }\n                                   value={ this.state.form.sex }>\n                                <option value=\"F\">Female</option>\n                                <option value=\"M\">Male</option>\n                            </Input>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Home Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Home Address\"\n                                   onChange={ this.getChangeHandler(\"home_address\") }\n                                   valid={ isValid(\"Home address\") }\n                                   value={ this.state.form.home_address }/>\n                            <FormFeedback>{ fieldError(\"Home address\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Nationality</Label>\n                            <Input placeholder=\"Nationality\"\n                                   onChange={ this.getChangeHandler(\"nationality\") }\n                                   valid={ isValid(\"Nationality\") }\n                                   value={ this.state.form.nationality }/>\n                            <FormFeedback>{ fieldError(\"Nationality\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Civil Status</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"civil_status\") }\n                                   value={ this.state.form.civil_status }>\n                                <option value=\"S\">Single</option>\n                                <option value=\"M\">Married</option>\n                                <option value=\"D\">Divorced</option>\n                                <option value=\"W\">Widowed</option>\n                            </Input>\n                        </FormGroup>\n\n                        <br/>\n                        <h5 className=\"mb-3\">Contact Details</h5>\n                        <FormGroup>\n                            <Label>Phone Number</Label>\n                            <Input placeholder=\"Phone Number\"\n                                   onChange={ this.getChangeHandler(\"phone_number\") }\n                                   valid={ isValid(\"Phone number\") }\n                                   value={ this.state.form.phone_number }/>\n                            <FormFeedback>{ fieldError(\"Phone number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Email</Label>\n                            <Input placeholder=\"Email\"\n                                   onChange={ this.getChangeHandler(\"email\") }\n                                   valid={ isValid(\"Email\") }\n                                   value={ this.state.form.email }/>\n                            <FormFeedback>{ fieldError(\"Email\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Name</Label>\n                            <Input placeholder=\"Emergency Contact Name\"\n                                   onChange={ this.getChangeHandler(\"emergency_contact_name\") }\n                                   valid={ isValid(\"Emergency contact name\") }\n                                   value={ this.state.form.emergency_contact_name }/>\n                            <FormFeedback>{ fieldError(\"Emergency contact name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Relationship</Label>\n                            <Input placeholder=\"Emergency Contact Relationship\"\n                                   onChange={ this.getChangeHandler(\"emergency_contact_relationship\") }\n                                   valid={ isValid(\"Emergency contact relationship\") }\n                                   value={ this.state.form.emergency_contact_relationship }/>\n                            <FormFeedback>{ fieldError(\"Emergency contact relationship\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Emergency Contact Number</Label>\n                            <Input placeholder=\"Emergency Contact Number\"\n                                   onChange={ this.getChangeHandler(\"emergency_contact_number\") }\n                                   valid={ isValid(\"Emergency contact number\") }\n                                   value={ this.state.form.emergency_contact_number }/>\n                            <FormFeedback>{ fieldError(\"Emergency contact number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <br/>\n                        <h5 className=\"mb-3\">University Details</h5>\n                        <FormGroup>\n                            <Label>Student Category</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"category\") }\n                                   value={ this.state.form.category }>\n                                <option value=\"IN\">Inbound</option>\n                                <option value=\"OUT\">Outbound</option>\n                            </Input>\n                        </FormGroup>\n\n                        { this.state.form.category === \"IN\" &&\n                        <FormGroup>\n                            <Label>Institution</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"institution\") }\n                                   value={ this.state.form.institution }>\n                                { institutions }\n                            </Input>\n                        </FormGroup>\n                        }\n\n                        <FormGroup>\n                            <Label>College</Label>\n                            <Input type=\"select\"\n                                   onChange={ this.getChangeHandler(\"college\") }\n                                   value={ this.state.form.college }>\n                                <option value=\"CCS\">College of Computer Studies</option>\n                                <option value=\"RVRCOB\">Ramon V. del Rosario College of Business</option>\n                                <option value=\"CLA\">College of Liberal Arts</option>\n                                <option value=\"SOE\">School of Economics</option>\n                                <option value=\"GCOE\">Gokongwei College of Engineering</option>\n                                <option value=\"COL\">College of Law</option>\n                                <option value=\"BAGCED\">Brother Andrew Gonzales College of Education</option>\n                            </Input>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={ this.props.edit ? this.submitEditStudentForm : this.submitAddStudentForm }\n                            disabled={ formHasErrors }>\n                        { this.props.edit ? \"Save changes\" : \"Add\" }\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n}\n\nclass ResidenceAddressFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                date_effective : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                address : \"\",\n                residence : \"\",\n            },\n        };\n\n        this.resetForm = this.resetForm.bind(this);\n        this.getFormErrors = this.getFormErrors.bind(this);\n        this.getChangeHandler = this.getChangeHandler.bind(this);\n        this.submitAddResidenceAddressForm = this.submitAddResidenceAddressForm.bind(this);\n        this.submitEditResidenceAddressForm = this.submitEditResidenceAddressForm.bind(this);\n\n        if (this.props.edit) {\n            Object.assign(this.state.form, props.residence);\n        }\n    }\n\n    resetForm() {\n        this.setState({\n            form : {\n                date_effective : \"\",\n                contact_person_name : \"\",\n                contact_person_number : \"\",\n                address : \"\",\n                residence : \"\",\n            },\n        });\n    }\n\n    getFormErrors() {\n        return validateForm([\n            {\n                name : \"Date effective\",\n                value : this.state.form.date_effective,\n            },\n            {\n                name : \"Contact person name\",\n                characterLimit : 256,\n                value : this.state.form.contact_person_name,\n            },\n            {\n                name : \"Contact person number\",\n                characterLimit : 64,\n                value : this.state.form.contact_person_number,\n            },\n            {\n                name : \"Address\",\n                characterLimit : 256,\n                value : this.state.form.address,\n            },\n            {\n                name : \"Residence type\",\n                characterLimit : 64,\n                value : this.state.form.residence,\n            },\n        ]);\n    }\n\n    submitEditResidenceAddressForm() {\n        const dismissToast = makeInfoToast({\n            title : \"Editing\",\n            message : \"Editing residence address...\",\n        });\n\n        $.ajax({\n            url : `${settings.serverURL}/students/${this.props.student.id}/residency/${this.props.residence.id}/`,\n            method : \"PUT\",\n            beforeSend : authorizeXHR,\n            data : this.state.form,\n        }).done(() => {\n            dismissToast();\n            this.resetForm();\n            iziToast.success({\n                title : \"Edited\",\n                message : \"Successfully edited residence address\",\n            });\n\n            this.props.refreshResidences();\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to edit residence address\",\n            });\n        });\n\n        this.props.toggle();\n    }\n\n    submitAddResidenceAddressForm() {\n        this.props.toggle();\n\n        const dismissToast = makeInfoToast({\n            title : \"Adding\",\n            message : \"Adding new residence address...\",\n        });\n\n        $.post({\n            url : `${settings.serverURL}/students/${this.props.student.id}/residency/`,\n            beforeSend : authorizeXHR,\n            data : this.state.form,\n        }).done(() => {\n            dismissToast();\n            this.resetForm();\n            iziToast.success({\n                title : \"Added\",\n                message : \"Successfully added residence address\",\n            });\n\n            this.props.refreshResidences();\n        }).fail(response => {\n            dismissToast();\n            console.log(response);\n            iziToast.error({\n                title : \"Error\",\n                message : \"Unable to add residence address\",\n            });\n        });\n    }\n\n    getChangeHandler(fieldName) {\n        const form = this.state.form;\n\n        return event => {\n            const value = event.target.value;\n\n            form[fieldName] = value;\n            this.setState({\n                form : form,\n            });\n        };\n    }\n\n    render() {\n        const {formHasErrors, fieldErrors} = this.getFormErrors();\n\n        function isValid(fieldName) {\n            return fieldErrors[fieldName].length === 0;\n        }\n\n        function fieldError(fieldName) {\n            return fieldErrors[fieldName][0];\n        }\n\n        return (\n            <Modal isOpen={ this.props.isOpen }\n                   toggle={ this.props.toggle }\n                   backdrop={ true }>\n                <ModalHeader>\n                    { this.props.edit ? \"Edit Residence Address\" : \"Add a Residence Address\" }\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <FormGroup>\n                            <Label>Address</Label>\n                            <Input type=\"textarea\"\n                                   placeholder=\"Address\"\n                                   onChange={ this.getChangeHandler(\"address\") }\n                                   valid={ isValid(\"Address\") }\n                                   value={ this.state.form.address }/>\n                            <FormFeedback>{ fieldError(\"Address\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Person</Label>\n                            <Input placeholder=\"Name\"\n                                   onChange={ this.getChangeHandler(\"contact_person_name\") }\n                                   valid={ isValid(\"Contact person name\") }\n                                   value={ this.state.form.contact_person_name }/>\n                            <FormFeedback>{ fieldError(\"Contact person name\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Contact Number</Label>\n                            <Input placeholder=\"Number\"\n                                   onChange={ this.getChangeHandler(\"contact_person_number\") }\n                                   valid={ isValid(\"Contact person number\") }\n                                   value={ this.state.form.contact_person_number }/>\n                            <FormFeedback>{ fieldError(\"Contact person number\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Residence Type</Label>\n                            <Input placeholder=\"Residence Type\"\n                                   onChange={ this.getChangeHandler(\"residence\") }\n                                   valid={ isValid(\"Residence type\") }\n                                   value={ this.state.form.residence }/>\n                            <FormFeedback>{ fieldError(\"Residence type\") }</FormFeedback>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label>Date Effective</Label>\n                            <Input type=\"date\"\n                                   value={ this.state.form.date_effective }\n                                   onChange={ this.getChangeHandler(\"date_effective\") }\n                                   valid={ isValid(\"Date effective\") }/>\n                            <FormFeedback>{ fieldError(\"Date effective\") }</FormFeedback>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            disabled={ formHasErrors }\n                            onClick={ this.props.edit ? this.submitEditResidenceAddressForm : this.submitAddResidenceAddressForm }>\n                        { this.props.edit ? \"Save changes\" : \"Add\" }\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nexport {\n    StudentFormModal,\n    ResidenceAddressFormModal,\n};"]}