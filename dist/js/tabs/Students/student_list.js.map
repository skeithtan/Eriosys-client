{"version":3,"sources":["../../../../js/tabs/Students/student_list.js"],"names":["StudentList","props","state","searchKeyword","setSearchKeyword","bind","getFilteredStudents","searchString","setState","students","toLowerCase","filter","fullName","student","firstName","middleName","familyName","includes","idNumber","isSearching","showingStudents","toggleAddStudent","activeStudent","setActiveStudent","StudentListHead","onSearchInputChange","event","searchInput","target","value","StudentListTable","getStudentsByFamilyNameInitials","emptyState","familyNameInitials","map","index","self","indexOf","sort","a","b","categorizedByInitial","forEach","push","initial","studentInitial","length","noResultsState","sections","familyNameInitial","StudentSection","rows","isActive","title"],"mappings":"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","file":"student_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../loading\";\n\nimport {\n    Input,\n    Button,\n} from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRowSelectable,\n} from \"../../components/section\";\n\n\nclass StudentList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchKeyword : null,\n        };\n\n        this.setSearchKeyword = this.setSearchKeyword.bind(this);\n        this.getFilteredStudents = this.getFilteredStudents.bind(this);\n    }\n\n    setSearchKeyword(searchString) {\n        //If the string is empty, that means the user isn't searching at all\n        const searchKeyword = searchString === \"\" ? null : searchString;\n        this.setState({\n            searchKeyword : searchKeyword,\n        });\n    }\n\n    getFilteredStudents() {\n        if (this.props.students === null || this.state.searchKeyword === null) {\n            return [];\n        }\n\n        const searchKeyword = this.state.searchKeyword.toLowerCase();\n\n        return this.props.students.filter(student => {\n            const fullName = `${student.firstName} ${student.middleName} ${student.familyName}`.toLowerCase();\n            return fullName.includes(searchKeyword) || student.idNumber.includes(searchKeyword);\n        });\n    }\n\n    render() {\n        const isSearching = this.state.searchKeyword !== null;\n        const showingStudents = isSearching ? this.getFilteredStudents() : this.props.students;\n\n        return (\n            <div className=\"sidebar h-100\" id=\"student-list\">\n                <StudentListHead setSearchKeyword={this.setSearchKeyword}\n                                 toggleAddStudent={this.props.toggleAddStudent}/>\n                <StudentListTable students={showingStudents}\n                                  activeStudent={this.props.activeStudent}\n                                  setActiveStudent={this.props.setActiveStudent}\n                                  isSearching={isSearching}/>\n            </div>\n        );\n    }\n}\n\nclass StudentListHead extends Component {\n    constructor(props) {\n        super(props);\n        this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    }\n\n    onSearchInputChange(event) {\n        const searchInput = event.target.value;\n        this.props.setSearchKeyword(searchInput);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <div className=\"btn-group ml-auto\">\n                        <Button outline color=\"success\" size=\"sm\" className=\"active\">Active</Button>\n                        <Button outline color=\"success\" size=\"sm\" className=\"\">Historical</Button>\n                    </div>\n                    <Button outline color=\"success\" size=\"sm\" className=\"ml-4\"\n                            onClick={this.props.toggleAddStudent}>Add</Button>\n                </div>\n                <h4 className=\"page-head-title\">Students</h4>\n                <Input type=\"search\" placeholder=\"Search\" className=\"search-input\" onChange={this.onSearchInputChange}/>\n            </div>\n        );\n    }\n}\n\nclass StudentListTable extends Component {\n    constructor(props) {\n        super(props);\n        this.getStudentsByFamilyNameInitials = this.getStudentsByFamilyNameInitials.bind(this);\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    // DO not make this static\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There's nothing here.</h4>\n                <p>When added, Students will show up here.</p>\n                <Button outline color=\"success\">Add a Student</Button>\n            </div>\n        );\n    }\n\n    static noResultsState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>No results found</h3>\n            </div>\n        );\n    }\n\n    getStudentsByFamilyNameInitials() {\n        //Get first letter\n        let familyNameInitials = this.props.students.map(student => student.familyName[0]);\n\n        //Get uniques only\n        familyNameInitials = familyNameInitials.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Sort alphabetically\n        familyNameInitials = familyNameInitials.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let categorizedByInitial = [];\n\n        // Categorize by family name initial\n        familyNameInitials.forEach(initial => {\n            let students = [];\n            categorizedByInitial.push({\n                initial : initial,\n                students : students,\n            });\n\n            this.props.students.forEach(student => {\n                const studentInitial = student.familyName[0];\n\n                if (studentInitial === initial) {\n                    students.push(student);\n                }\n            });\n\n        });\n\n        return categorizedByInitial;\n    }\n\n    render() {\n        if (this.props.students === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.students.length === 0) {\n            return this.props.isSearching ? StudentListTable.noResultsState() : this.emptyState();\n        }\n\n        const familyNameInitials = this.getStudentsByFamilyNameInitials();\n\n        const sections = familyNameInitials.map((familyNameInitial, index) => {\n            return <StudentSection key={index}\n                                   title={familyNameInitial.initial}\n                                   activeStudent={this.props.activeStudent}\n                                   students={familyNameInitial.students}\n                                   setActiveStudent={this.props.setActiveStudent}/>;\n        });\n\n\n        return (\n            <div className=\"page-body\">\n                {sections}\n            </div>\n        );\n    }\n}\n\nclass StudentSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        const rows = this.props.students.map(student => {\n            let isActive = false;\n\n            if (this.props.activeStudent !== null) {\n                isActive = this.props.activeStudent.idNumber === student.idNumber;\n            }\n\n            const setActiveStudent = () => this.props.setActiveStudent(student);\n\n            return (\n                <SectionRowSelectable onClick={setActiveStudent} isActive={isActive} key={student.idNumber}>\n                    <small className=\"d-block\">{student.idNumber}</small>\n                    <b>{student.familyName}</b>, {student.firstName} {student.middleName}\n                </SectionRowSelectable>\n            );\n        });\n\n        return (\n            <Section>\n                <SectionTitle>{this.props.title}</SectionTitle>\n                <SectionTable>\n                    {rows}\n                </SectionTable>\n            </Section>\n        );\n    }\n}\nexport default StudentList;"]}