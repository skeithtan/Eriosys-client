{"version":3,"sources":["../../../../js/tabs/Students/student_list.js"],"names":["StudentList","props","state","searchKeyword","setSearchKeyword","bind","getFilteredStudents","searchString","setState","students","toLowerCase","filteredStudents","filter","fullName","student","first_name","middle_name","family_name","includes","id_number","map","id","isSearching","toggleAddStudent","addButtonIsShowing","activeStudent","setActiveStudent","activeTab","name","tabs","setActiveTab","StudentListHead","onSearchInputChange","event","searchInput","target","value","StudentListTable","getStudentsByFamilyNameInitials","emptyState","currentStudentCategory","familyNameInitials","index","self","indexOf","sort","a","b","categorizedByInitial","forEach","push","initial","studentInitial","length","filtered","noResultsState","sections","familyNameInitial","collapsed","StudentSection","rows","isActive","title"],"mappings":"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","file":"student_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../components/loading\";\n\nimport {\n    Input,\n    Button,\n} from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n} from \"../../components/section\";\nimport TabBar from \"../../components/tab_bar\";\n\n\nclass StudentList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchKeyword : null,\n        };\n\n        this.setSearchKeyword = this.setSearchKeyword.bind(this);\n        this.getFilteredStudents = this.getFilteredStudents.bind(this);\n    }\n\n\n    setSearchKeyword(searchString) {\n        //If the string is empty, that means the user isn't searching at all\n        const searchKeyword = searchString === \"\" ? null : searchString;\n        this.setState({\n            searchKeyword : searchKeyword,\n        });\n    }\n\n    getFilteredStudents() {\n        if (this.props.students === null || this.state.searchKeyword === null) {\n            return null;\n        }\n\n        const searchKeyword = this.state.searchKeyword.toLowerCase();\n\n        const filteredStudents = this.props.students.filter(student => {\n            const fullName = `${student.first_name} ${student.middle_name} ${student.family_name}`.toLowerCase();\n            return fullName.includes(searchKeyword) || student.id_number.includes(searchKeyword);\n        });\n\n        return filteredStudents.map(student => student.id);\n    }\n\n    render() {\n        const isSearching = this.state.searchKeyword !== null;\n\n        return (\n            <div className=\"sidebar h-100\"\n                 id=\"student-list\">\n                <StudentListHead setSearchKeyword={ this.setSearchKeyword }\n                                 toggleAddStudent={ this.props.toggleAddStudent }\n                                 addButtonIsShowing={ this.props.addButtonIsShowing }/>\n                <StudentListTable students={ this.props.students }\n                                  filtered={ this.getFilteredStudents() }\n                                  activeStudent={ this.props.activeStudent }\n                                  setActiveStudent={ this.props.setActiveStudent }\n                                  toggleAddStudent={ this.props.toggleAddStudent }\n                                  currentStudentCategory={ this.props.activeTab.name }\n                                  isSearching={ isSearching }/>\n                <TabBar tabs={ this.props.tabs }\n                        activeTab={ this.props.activeTab }\n                        setActiveTab={ this.props.setActiveTab }/>\n            </div>\n        );\n    }\n}\n\nclass StudentListHead extends Component {\n    constructor(props) {\n        super(props);\n        this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    }\n\n    onSearchInputChange(event) {\n        const searchInput = event.target.value;\n        this.props.setSearchKeyword(searchInput);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <Button outline\n                            color=\"success\"\n                            size=\"sm\"\n                            className={`ml-auto ${!this.props.addButtonIsShowing && \"invisible\"}`}\n                            onClick={ this.props.toggleAddStudent }>Add Inbound</Button>\n                </div>\n                <h4 className=\"page-head-title\">Students</h4>\n                <Input type=\"search\"\n                       placeholder=\"Search\"\n                       className=\"search-input\"\n                       onChange={ this.onSearchInputChange }/>\n            </div>\n        );\n    }\n}\n\nclass StudentListTable extends Component {\n    constructor(props) {\n        super(props);\n        this.getStudentsByFamilyNameInitials = this.getStudentsByFamilyNameInitials.bind(this);\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    // DO not make this static\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There are no { this.props.currentStudentCategory } students.</h4>\n                <p>When added, { this.props.currentStudentCategory } students will show up here.</p>\n                <Button outline\n                        color=\"success\"\n                        onClick={ this.props.toggleAddStudent }>Add a Student</Button>\n            </div>\n        );\n    }\n\n    static noResultsState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>No results found</h3>\n            </div>\n        );\n    }\n\n    getStudentsByFamilyNameInitials() {\n        //Get first letter\n        let familyNameInitials = this.props.students.map(student => student.family_name[0]);\n\n        //Get uniques only\n        familyNameInitials = familyNameInitials.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Sort alphabetically\n        familyNameInitials = familyNameInitials.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let categorizedByInitial = [];\n\n        // Categorize by family name initial\n        familyNameInitials.forEach(initial => {\n            let students = [];\n            categorizedByInitial.push({\n                initial : initial,\n                students : students,\n            });\n\n            this.props.students.forEach(student => {\n                const studentInitial = student.family_name[0];\n\n                if (studentInitial === initial) {\n                    students.push(student);\n                }\n            });\n\n        });\n\n        return categorizedByInitial;\n    }\n\n    render() {\n        if (this.props.students === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.students.length === 0) {\n            return this.emptyState();\n        }\n\n        if (this.props.isSearching && this.props.filtered.length === 0) {\n            return StudentListTable.noResultsState();\n        }\n\n        const familyNameInitials = this.getStudentsByFamilyNameInitials();\n\n        const sections = familyNameInitials.map((familyNameInitial, index) => {\n\n            const students = familyNameInitial.students;\n\n            let collapsed = false;\n\n            if (this.props.isSearching) {\n                collapsed = true;\n\n                students.forEach(student => {\n                    if (this.props.filtered.includes(student.id)) {\n                        collapsed = false;\n                    }\n                });\n            }\n\n            return <StudentSection key={ index }\n                                   collapsed={ collapsed }\n                                   isSearching={ this.props.isSearching }\n                                   title={ familyNameInitial.initial }\n                                   activeStudent={ this.props.activeStudent }\n                                   students={ familyNameInitial.students }\n                                   filtered={ this.props.filtered }\n                                   setActiveStudent={ this.props.setActiveStudent }/>;\n        });\n\n\n        return (\n            <div className=\"page-body\">\n                { sections }\n            </div>\n        );\n    }\n}\n\nclass StudentSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        const rows = this.props.students.map(student => {\n            let isActive = false;\n\n            if (this.props.activeStudent !== null) {\n                isActive = this.props.activeStudent.id === student.id;\n            }\n\n            const setActiveStudent = () => this.props.setActiveStudent(student);\n\n            let collapsed = false;\n            if (this.props.isSearching) {\n                collapsed = !this.props.filtered.includes(student.id);\n            }\n\n            return (\n                <SectionRow selectable\n                            collapsed={ collapsed }\n                            onClick={ setActiveStudent }\n                            active={ isActive }\n                            key={ student.id }>\n                    <small className=\"d-block\">{ student.id_number }</small>\n                    <b>{ student.family_name }</b>, { student.first_name } { student.middle_name }\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section collapsed={ this.props.collapsed }>\n                <SectionTitle>{ this.props.title }</SectionTitle>\n                <SectionTable>\n                    { rows }\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default StudentList;"]}