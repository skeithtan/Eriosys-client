{"version":3,"sources":["../../../../js/tabs/Students/student_list.js"],"names":["StudentList","props","state","searchKeyword","toggleCollapse","bind","setSearchKeyword","getFilteredStudents","searchString","setState","students","toLowerCase","filteredStudents","filter","fullName","student","first_name","middle_name","family_name","includes","id_number","map","id","collapsed","isSearching","className","activeTab","activeStudent","setActiveStudent","name","tabs","setActiveTab","StudentListHead","onSearchInputChange","event","searchInput","target","value","StudentListTable","getStudentsByFamilyNameInitials","emptyState","currentStudentCategory","toggleAddStudent","familyNameInitials","index","self","indexOf","sort","a","b","categorizedByInitial","forEach","push","initial","studentInitial","length","filtered","noResultsState","sections","familyNameInitial","StudentSection","rows","isActive","toString","title"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;AAKA;;AAMA;;;;AACA;;;;;;;;;;IAOMA,W;;;AACF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,2BAAgB;AADP,SAAb;;AAIA,cAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,OAAtB;AACA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;AACA,cAAKE,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBF,IAAzB,OAA3B;AATe;AAUlB;;;;yCAGgBG,Y,EAAc;AAC3B;AACA,gBAAML,gBAAgBK,iBAAiB,EAAjB,GAAsB,IAAtB,GAA6BA,YAAnD;AACA,iBAAKC,QAAL,CAAc;AACVN,+BAAgBA;AADN,aAAd;AAGH;;;8CAEqB;AAClB,gBAAI,KAAKF,KAAL,CAAWS,QAAX,KAAwB,IAAxB,IAAgC,KAAKR,KAAL,CAAWC,aAAX,KAA6B,IAAjE,EAAuE;AACnE,uBAAO,IAAP;AACH;;AAED,gBAAMA,gBAAgB,KAAKD,KAAL,CAAWC,aAAX,CAAyBQ,WAAzB,EAAtB;;AAEA,gBAAMC,mBAAmB,KAAKX,KAAL,CAAWS,QAAX,CAAoBG,MAApB,CAA2B,mBAAW;AAC3D,oBAAMC,WAAW,CAAGC,QAAQC,UAAX,SAAyBD,QAAQE,WAAjC,SAAgDF,QAAQG,WAAxD,EAAsEP,WAAtE,EAAjB;AACA,uBAAOG,SAASK,QAAT,CAAkBhB,aAAlB,KAAoCY,QAAQK,SAAR,CAAkBD,QAAlB,CAA2BhB,aAA3B,CAA3C;AACH,aAHwB,CAAzB;;AAKA,mBAAOS,iBAAiBS,GAAjB,CAAqB;AAAA,uBAAWN,QAAQO,EAAnB;AAAA,aAArB,CAAP;AACH;;;yCAEgB;AACb,iBAAKb,QAAL,CAAc;AACVc,2BAAY,CAAC,KAAKrB,KAAL,CAAWqB;AADd,aAAd;AAGH;;;iCAEQ;AACL,gBAAMC,cAAc,KAAKtB,KAAL,CAAWC,aAAX,KAA6B,IAAjD;;AAEA,gBAAIsB,YAAY,4BAAhB;AACA,gBAAI,KAAKvB,KAAL,CAAWqB,SAAf,EAA0B;AACtBE,6BAAa,WAAb;AACH;;AAGD,mBACI;AAAA;AAAA,kBAAK,WAAWA,SAAhB;AACK,wBAAG,cADR;AAEI;AAAA;AAAA,sBAAe,WAAU,0BAAzB;AACI,kDAAC,eAAD,IAAiB,kBAAkB,KAAKnB,gBAAxC;AACiB,wCAAgB,KAAKF,cADtC;AAEiB,mCAAW,KAAKH,KAAL,CAAWyB,SAFvC,GADJ;AAII,kDAAC,gBAAD,IAAkB,UAAU,KAAKzB,KAAL,CAAWS,QAAvC;AACkB,kCAAU,KAAKH,mBAAL,EAD5B;AAEkB,uCAAe,KAAKN,KAAL,CAAW0B,aAF5C;AAGkB,0CAAkB,KAAK1B,KAAL,CAAW2B,gBAH/C;AAIkB,gDAAwB,KAAK3B,KAAL,CAAWyB,SAAX,CAAqBG,IAJ/D;AAKkB,qCAAaL,WAL/B,GAJJ;AAUI,uEAAQ,MAAM,KAAKvB,KAAL,CAAW6B,IAAzB;AACQ,mCAAW,KAAK7B,KAAL,CAAWyB,SAD9B;AAEQ,sCAAc,KAAKzB,KAAL,CAAW8B,YAFjC;AAVJ,iBAFJ;AAiBI,mFAAiB,OAAM,UAAvB;AACiB,4BAAQ,KAAK3B,cAD9B;AAjBJ,aADJ;AAsBH;;;;;;IAGC4B,e;;;AACF,6BAAY/B,KAAZ,EAAmB;AAAA;;AAAA,uIACTA,KADS;;AAEf,eAAKgC,mBAAL,GAA2B,OAAKA,mBAAL,CAAyB5B,IAAzB,QAA3B;AAFe;AAGlB;;;;4CAEmB6B,K,EAAO;AACvB,gBAAMC,cAAcD,MAAME,MAAN,CAAaC,KAAjC;AACA,iBAAKpC,KAAL,CAAWK,gBAAX,CAA4B6B,WAA5B;AACH;;;iCAEQ;AACL,mBACI;AAAA;AAAA,kBAAK,WAAU,WAAf;AACI;AAAA;AAAA,sBAAK,WAAU,oBAAf;AACI,sFAAgB,gBAAgB,KAAKlC,KAAL,CAAWG,cAA3C;AADJ,iBADJ;AAII;AAAA;AAAA,sBAAI,WAAU,iBAAd;AAAiC,yBAAKH,KAAL,CAAWyB,SAAX,CAAqBG,IAAtD;AAAA;AAAA,iBAJJ;AAKI,mEAAO,MAAK,QAAZ;AACO,iCAAY,QADnB;AAEO,+BAAU,cAFjB;AAGO,8BAAU,KAAKI,mBAHtB;AALJ,aADJ;AAYH;;;;;;IAGCK,gB;;;AACF,8BAAYrC,KAAZ,EAAmB;AAAA;;AAAA,yIACTA,KADS;;AAEf,eAAKsC,+BAAL,GAAuC,OAAKA,+BAAL,CAAqClC,IAArC,QAAvC;AACA,eAAKmC,UAAL,GAAkB,OAAKA,UAAL,CAAgBnC,IAAhB,QAAlB;AAHe;AAIlB;;AAED;;;;;qCACa;AACT,mBACI;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACI;AAAA;AAAA;AAAA;AAAkB,yBAAKJ,KAAL,CAAWwC,sBAA7B;AAAA;AAAA,iBADJ;AAEI;AAAA;AAAA;AAAA;AAAgB,yBAAKxC,KAAL,CAAWwC,sBAA3B;AAAA;AAAA,iBAFJ;AAGK,qBAAKxC,KAAL,CAAWwC,sBAAX,KAAsC,SAAtC,IACD;AAAA;AAAA,sBAAQ,aAAR;AACQ,+BAAM,SADd;AAEQ,iCAAS,KAAKxC,KAAL,CAAWyC,gBAF5B;AAAA;AAAA;AAJJ,aADJ;AAWH;;;0DAUiC;AAAA;;AAC9B;AACA,gBAAIC,qBAAqB,KAAK1C,KAAL,CAAWS,QAAX,CAAoBW,GAApB,CAAwB;AAAA,uBAAWN,QAAQG,WAAR,CAAoB,CAApB,CAAX;AAAA,aAAxB,CAAzB;;AAEA;AACAyB,iCAAqBA,mBAAmB9B,MAAnB,CAA0B,UAACwB,KAAD,EAAQO,KAAR,EAAeC,IAAf,EAAwB;AACnE,uBAAOA,KAAKC,OAAL,CAAaT,KAAb,MAAwBO,KAA/B;AACH,aAFoB,CAArB;;AAIA;AACAD,iCAAqBA,mBAAmBI,IAAnB,CAAwB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACnD,oBAAID,IAAIC,CAAR,EAAW;AACP,2BAAO,CAAC,CAAR;AACH;AACD,oBAAID,IAAIC,CAAR,EAAW;AACP,2BAAO,CAAP;AACH;AACD,uBAAO,CAAP;AACH,aARoB,CAArB;;AAUA,gBAAIC,uBAAuB,EAA3B;;AAEA;AACAP,+BAAmBQ,OAAnB,CAA2B,mBAAW;AAClC,oBAAIzC,WAAW,EAAf;AACAwC,qCAAqBE,IAArB,CAA0B;AACtBC,6BAAUA,OADY;AAEtB3C,8BAAWA;AAFW,iBAA1B;;AAKA,uBAAKT,KAAL,CAAWS,QAAX,CAAoByC,OAApB,CAA4B,mBAAW;AACnC,wBAAMG,iBAAiBvC,QAAQG,WAAR,CAAoB,CAApB,CAAvB;;AAEA,wBAAIoC,mBAAmBD,OAAvB,EAAgC;AAC5B3C,iCAAS0C,IAAT,CAAcrC,OAAd;AACH;AACJ,iBAND;AAQH,aAfD;;AAiBA,mBAAOmC,oBAAP;AACH;;;iCAEQ;AAAA;;AACL,gBAAI,KAAKjD,KAAL,CAAWS,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,uBAAO,sDAAP;AACH;;AAED,gBAAI,KAAKT,KAAL,CAAWS,QAAX,CAAoB6C,MAApB,KAA+B,CAAnC,EAAsC;AAClC,uBAAO,KAAKf,UAAL,EAAP;AACH;;AAED,gBAAI,KAAKvC,KAAL,CAAWuB,WAAX,IAA0B,KAAKvB,KAAL,CAAWuD,QAAX,CAAoBD,MAApB,KAA+B,CAA7D,EAAgE;AAC5D,uBAAOjB,iBAAiBmB,cAAjB,EAAP;AACH;;AAED,gBAAMd,qBAAqB,KAAKJ,+BAAL,EAA3B;;AAEA,gBAAMmB,WAAWf,mBAAmBtB,GAAnB,CAAuB,UAACsC,iBAAD,EAAoBf,KAApB,EAA8B;;AAElE,oBAAMlC,WAAWiD,kBAAkBjD,QAAnC;;AAEA,oBAAIa,YAAY,KAAhB;;AAEA,oBAAI,OAAKtB,KAAL,CAAWuB,WAAf,EAA4B;AACxBD,gCAAY,IAAZ;;AAEAb,6BAASyC,OAAT,CAAiB,mBAAW;AACxB,4BAAI,OAAKlD,KAAL,CAAWuD,QAAX,CAAoBrC,QAApB,CAA6BJ,QAAQO,EAArC,CAAJ,EAA8C;AAC1CC,wCAAY,KAAZ;AACH;AACJ,qBAJD;AAKH;;AAED,uBAAO,8BAAC,cAAD,IAAgB,KAAKqB,KAArB;AACgB,+BAAWrB,SAD3B;AAEgB,iCAAa,OAAKtB,KAAL,CAAWuB,WAFxC;AAGgB,2BAAOmC,kBAAkBN,OAHzC;AAIgB,mCAAe,OAAKpD,KAAL,CAAW0B,aAJ1C;AAKgB,8BAAUgC,kBAAkBjD,QAL5C;AAMgB,8BAAU,OAAKT,KAAL,CAAWuD,QANrC;AAOgB,sCAAkB,OAAKvD,KAAL,CAAW2B,gBAP7C,GAAP;AAQH,aAxBgB,CAAjB;;AA2BA,mBACI;AAAA;AAAA,kBAAK,WAAU,WAAf;AACK8B;AADL,aADJ;AAKH;;;yCAlGuB;AACpB,mBACI;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACI;AAAA;AAAA;AAAA;AAAA;AADJ,aADJ;AAKH;;;;;;IA+FCE,c;;;AACF,4BAAY3D,KAAZ,EAAmB;AAAA;;AAAA,+HACTA,KADS;AAElB;;;;iCAEQ;AAAA;;AAEL,gBAAM4D,OAAO,KAAK5D,KAAL,CAAWS,QAAX,CAAoBW,GAApB,CAAwB,mBAAW;AAC5C,oBAAIyC,WAAW,KAAf;;AAEA,oBAAI,OAAK7D,KAAL,CAAW0B,aAAX,KAA6B,IAAjC,EAAuC;AACnCmC,+BAAW,OAAK7D,KAAL,CAAW0B,aAAX,CAAyBL,EAAzB,CAA4ByC,QAA5B,OAA2ChD,QAAQO,EAAR,CAAWyC,QAAX,EAAtD;AACH;;AAED,oBAAMnC,mBAAmB,SAAnBA,gBAAmB;AAAA,2BAAM,OAAK3B,KAAL,CAAW2B,gBAAX,CAA4Bb,OAA5B,CAAN;AAAA,iBAAzB;;AAEA,oBAAIQ,YAAY,KAAhB;AACA,oBAAI,OAAKtB,KAAL,CAAWuB,WAAf,EAA4B;AACxBD,gCAAY,CAAC,OAAKtB,KAAL,CAAWuD,QAAX,CAAoBrC,QAApB,CAA6BJ,QAAQO,EAArC,CAAb;AACH;;AAED,uBACI;AAAA;AAAA,sBAAY,gBAAZ;AACY,mCAAWC,SADvB;AAEY,iCAASK,gBAFrB;AAGY,gCAAQkC,QAHpB;AAIY,6BAAK/C,QAAQO,EAJzB;AAKI;AAAA;AAAA,0BAAO,WAAU,SAAjB;AAA4BP,gCAAQK;AAApC,qBALJ;AAMI;AAAA;AAAA;AAAIL,gCAAQG;AAAZ,qBANJ;AAAA;AAMmCH,4BAAQC,UAN3C;AAAA;AAMwDD,4BAAQE;AANhE,iBADJ;AAUH,aAxBY,CAAb;;AA0BA,mBACI;AAAA;AAAA,kBAAS,WAAW,KAAKhB,KAAL,CAAWsB,SAA/B;AACI;AAAA;AAAA;AAAe,yBAAKtB,KAAL,CAAW+D;AAA1B,iBADJ;AAEI;AAAA;AAAA;AACKH;AADL;AAFJ,aADJ;AAQH;;;;;;kBAGU7D,W","file":"student_list.js","sourcesContent":["import React, { Component } from \"react\";\nimport LoadingSpinner from \"../../components/loading\";\n\nimport {\n    Input,\n    Button,\n} from \"reactstrap\";\n\nimport {\n    Section,\n    SectionTitle,\n    SectionTable,\n    SectionRow,\n} from \"../../components/section\";\nimport TabBar from \"../../components/tab_bar\";\nimport {\n    CollapseButton,\n    CollapseContent,\n    ExpandContent,\n} from \"../../components/collapse_content\";\n\n\nclass StudentList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchKeyword : null,\n        };\n\n        this.toggleCollapse = this.toggleCollapse.bind(this);\n        this.setSearchKeyword = this.setSearchKeyword.bind(this);\n        this.getFilteredStudents = this.getFilteredStudents.bind(this);\n    }\n\n\n    setSearchKeyword(searchString) {\n        //If the string is empty, that means the user isn't searching at all\n        const searchKeyword = searchString === \"\" ? null : searchString;\n        this.setState({\n            searchKeyword : searchKeyword,\n        });\n    }\n\n    getFilteredStudents() {\n        if (this.props.students === null || this.state.searchKeyword === null) {\n            return null;\n        }\n\n        const searchKeyword = this.state.searchKeyword.toLowerCase();\n\n        const filteredStudents = this.props.students.filter(student => {\n            const fullName = `${student.first_name} ${student.middle_name} ${student.family_name}`.toLowerCase();\n            return fullName.includes(searchKeyword) || student.id_number.includes(searchKeyword);\n        });\n\n        return filteredStudents.map(student => student.id);\n    }\n\n    toggleCollapse() {\n        this.setState({\n            collapsed : !this.state.collapsed,\n        });\n    };\n\n    render() {\n        const isSearching = this.state.searchKeyword !== null;\n\n        let className = \"sidebar h-100 collapsible \";\n        if (this.state.collapsed) {\n            className += \"collapsed\";\n        }\n\n\n        return (\n            <div className={className}\n                 id=\"student-list\">\n                <ExpandContent className=\"d-flex flex-column h-100\">\n                    <StudentListHead setSearchKeyword={this.setSearchKeyword}\n                                     toggleCollapse={this.toggleCollapse}\n                                     activeTab={this.props.activeTab}/>\n                    <StudentListTable students={this.props.students}\n                                      filtered={this.getFilteredStudents()}\n                                      activeStudent={this.props.activeStudent}\n                                      setActiveStudent={this.props.setActiveStudent}\n                                      currentStudentCategory={this.props.activeTab.name}\n                                      isSearching={isSearching}/>\n                    <TabBar tabs={this.props.tabs}\n                            activeTab={this.props.activeTab}\n                            setActiveTab={this.props.setActiveTab}/>\n                </ExpandContent>\n\n                <CollapseContent title=\"Students\"\n                                 toggle={this.toggleCollapse}/>\n            </div>\n        );\n    }\n}\n\nclass StudentListHead extends Component {\n    constructor(props) {\n        super(props);\n        this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    }\n\n    onSearchInputChange(event) {\n        const searchInput = event.target.value;\n        this.props.setSearchKeyword(searchInput);\n    }\n\n    render() {\n        return (\n            <div className=\"page-head\">\n                <div className=\"page-head-controls\">\n                    <CollapseButton toggleCollapse={this.props.toggleCollapse}/>\n                </div>\n                <h4 className=\"page-head-title\">{this.props.activeTab.name} Students</h4>\n                <Input type=\"search\"\n                       placeholder=\"Search\"\n                       className=\"search-input\"\n                       onChange={this.onSearchInputChange}/>\n            </div>\n        );\n    }\n}\n\nclass StudentListTable extends Component {\n    constructor(props) {\n        super(props);\n        this.getStudentsByFamilyNameInitials = this.getStudentsByFamilyNameInitials.bind(this);\n        this.emptyState = this.emptyState.bind(this);\n    }\n\n    // DO not make this static\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h4>There are no {this.props.currentStudentCategory} students.</h4>\n                <p>When added, {this.props.currentStudentCategory} students will show up here.</p>\n                {this.props.currentStudentCategory === \"Inbound\" &&\n                <Button outline\n                        color=\"success\"\n                        onClick={this.props.toggleAddStudent}>Add a Student</Button>\n                }\n            </div>\n        );\n    }\n\n    static noResultsState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>No results found</h3>\n            </div>\n        );\n    }\n\n    getStudentsByFamilyNameInitials() {\n        //Get first letter\n        let familyNameInitials = this.props.students.map(student => student.family_name[0]);\n\n        //Get uniques only\n        familyNameInitials = familyNameInitials.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n\n        // Sort alphabetically\n        familyNameInitials = familyNameInitials.sort((a, b) => {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let categorizedByInitial = [];\n\n        // Categorize by family name initial\n        familyNameInitials.forEach(initial => {\n            let students = [];\n            categorizedByInitial.push({\n                initial : initial,\n                students : students,\n            });\n\n            this.props.students.forEach(student => {\n                const studentInitial = student.family_name[0];\n\n                if (studentInitial === initial) {\n                    students.push(student);\n                }\n            });\n\n        });\n\n        return categorizedByInitial;\n    }\n\n    render() {\n        if (this.props.students === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.props.students.length === 0) {\n            return this.emptyState();\n        }\n\n        if (this.props.isSearching && this.props.filtered.length === 0) {\n            return StudentListTable.noResultsState();\n        }\n\n        const familyNameInitials = this.getStudentsByFamilyNameInitials();\n\n        const sections = familyNameInitials.map((familyNameInitial, index) => {\n\n            const students = familyNameInitial.students;\n\n            let collapsed = false;\n\n            if (this.props.isSearching) {\n                collapsed = true;\n\n                students.forEach(student => {\n                    if (this.props.filtered.includes(student.id)) {\n                        collapsed = false;\n                    }\n                });\n            }\n\n            return <StudentSection key={index}\n                                   collapsed={collapsed}\n                                   isSearching={this.props.isSearching}\n                                   title={familyNameInitial.initial}\n                                   activeStudent={this.props.activeStudent}\n                                   students={familyNameInitial.students}\n                                   filtered={this.props.filtered}\n                                   setActiveStudent={this.props.setActiveStudent}/>;\n        });\n\n\n        return (\n            <div className=\"page-body\">\n                {sections}\n            </div>\n        );\n    }\n}\n\nclass StudentSection extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        const rows = this.props.students.map(student => {\n            let isActive = false;\n\n            if (this.props.activeStudent !== null) {\n                isActive = this.props.activeStudent.id.toString() === student.id.toString();\n            }\n\n            const setActiveStudent = () => this.props.setActiveStudent(student);\n\n            let collapsed = false;\n            if (this.props.isSearching) {\n                collapsed = !this.props.filtered.includes(student.id);\n            }\n\n            return (\n                <SectionRow selectable\n                            collapsed={collapsed}\n                            onClick={setActiveStudent}\n                            active={isActive}\n                            key={student.id}>\n                    <small className=\"d-block\">{student.id_number}</small>\n                    <b>{student.family_name}</b>, {student.first_name} {student.middle_name}\n                </SectionRow>\n            );\n        });\n\n        return (\n            <Section collapsed={this.props.collapsed}>\n                <SectionTitle>{this.props.title}</SectionTitle>\n                <SectionTable>\n                    {rows}\n                </SectionTable>\n            </Section>\n        );\n    }\n}\n\nexport default StudentList;"]}