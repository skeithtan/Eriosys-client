{"version":3,"sources":["../../../../../js/tabs/Home/tabs/memorandums.js"],"names":["fetchInstitutions","onResult","query","then","makeCardInfo","memorandumType","institution","memorandum","name","id","type","dateEffective","date_effective","dateExpiration","date_expiration","makeCardsFromInstitution","institutions","cards","forEach","latest_mou","push","latest_moa","sort","a","b","diff","Memorandums","props","state","activeCard","refreshCards","bind","setActiveCard","result","setState","length","emptyState","map","card","isActive","MemorandumCard","format","expirationToNow","fromNow","now","dateExpirationMoment","monthsBeforeExpiration","hasExpired","urgent","expirationClass","cardClass","active","onClick"],"mappings":"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","file":"memorandums.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport moment from \"moment\";\nimport {\n    Card,\n} from \"reactstrap\";\nimport LoadingSpinner from \"../../../loading\";\nimport {\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\n\n\nfunction fetchInstitutions(onResult) {\n    graphql.query(`\n                    {\n                      institutions {\n                        id\n                        name\n                            latest_mou {\n                                id\n                                date_expiration\n                            }\n                            latest_moa {\n                                id\n                                date_expiration\n                            }\n                      }\n                    }\n        `).then(onResult);\n}\n\nfunction makeCardInfo(memorandumType, institution, memorandum) {\n    return {\n        institution : {\n            name : institution.name,\n            id : institution.id,\n        },\n        memorandum : {\n            id : memorandum.id,\n            type : memorandumType,\n            dateEffective : moment(memorandum.date_effective),\n            dateExpiration : moment(memorandum.date_expiration),\n        },\n    };\n}\n\nfunction makeCardsFromInstitution(institutions) {\n    let cards = [];\n\n\n    institutions.forEach(institution => {\n        if (institution.latest_mou !== null && institution.latest_mou.date_expiration !== null) {\n            cards.push(makeCardInfo(\"Understanding\", institution, institution.latest_mou));\n        }\n\n        if (institution.latest_moa !== null && institution.latest_moa.date_expiration !== null) {\n            cards.push(makeCardInfo(\"Agreement\", institution, institution.latest_moa));\n        }\n    });\n\n\n    cards.sort((a, b) => {\n        return a.memorandum.dateExpiration.diff(b.memorandum.dateExpiration);\n    });\n\n    return cards;\n}\n\nclass Memorandums extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cards : null,\n            activeCard : null,\n        };\n\n        this.refreshCards = this.refreshCards.bind(this);\n        this.setActiveCard = this.setActiveCard.bind(this);\n\n        fetchInstitutions(result => {\n            const institutions = result.institutions;\n            this.setState({\n                cards : makeCardsFromInstitution(institutions),\n            });\n        });\n    }\n\n    static emptyState() {\n        return (\n            <h5>There are no memorandums found with an expiration date</h5>\n        );\n    }\n\n    refreshCards() {\n        this.setState({\n            cards : null //clear first\n        });\n\n        fetchInstitutions(result => {\n            const institutions = result.institutions;\n            this.setState({\n                cards : makeCardsFromInstitution(institutions),\n            });\n        });\n    }\n\n    setActiveCard(id) {\n        if (this.state.activeCard === id) {\n            this.setState({\n                activeCard : null //Deselect when already selected\n            });\n\n            return;\n        }\n\n        this.setState({\n            activeCard : id,\n        });\n\n    }\n\n    render() {\n        if (this.state.cards === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.state.cards.length === 0) {\n            return Memorandums.emptyState();\n        }\n\n        const cards = this.state.cards.map(card => {\n            const id = card.memorandum.id;\n            const isActive = this.state.activeCard === id;\n            const setActiveCard = () => this.setActiveCard(id);\n            return <MemorandumCard key={id} card={card} onClick={setActiveCard} active={isActive}/>;\n        });\n\n        return (\n            <div className=\"d-flex flex-column align-items-center page-body p-4\">\n                {cards}\n            </div>\n        );\n    }\n}\n\nclass MemorandumCard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const dateExpiration = this.props.card.memorandum.dateExpiration.format(\"LL\");\n        const expirationToNow = this.props.card.memorandum.dateExpiration.fromNow();\n\n        const now = moment();\n        const dateExpirationMoment = this.props.card.memorandum.dateExpiration;\n        const monthsBeforeExpiration = dateExpirationMoment.diff(now, \"months\");\n        const hasExpired = dateExpirationMoment.diff(now, \"days\") <= 0;\n\n        const urgent = monthsBeforeExpiration <= 6;\n\n        let expirationClass = \"text-white \";\n        if (urgent) {\n            expirationClass += \"bg-danger\";\n        } else {\n            expirationClass += \"bg-dlsu-lighter\";\n        }\n\n        let cardClass = \"home-card rounded \";\n        if (this.props.active) {\n            cardClass += \"active\";\n        }\n\n        return (\n            <div className={cardClass} onClick={this.props.onClick} ref={(card) => this.card = card}>\n                <SectionRow className={expirationClass}>\n                    <SectionRowContent large>{hasExpired ? \"Expired \" : \"Expires\"} {expirationToNow}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Institution Name</SectionRowTitle>\n                    <SectionRowContent large>{this.props.card.institution.name}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Memorandum Type</SectionRowTitle>\n                    <SectionRowContent large>{this.props.card.memorandum.type}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Date of Expiration</SectionRowTitle>\n                    <SectionRowContent large>{dateExpiration}</SectionRowContent>\n                </SectionRow>\n            </div>\n        );\n    }\n}\n\nexport default Memorandums;"]}