{"version":3,"sources":["../../../../../js/tabs/Home/tabs/memorandums.js"],"names":["fetchInstitutions","onResponse","query","makeCardInfo","memorandumType","institution","memorandum","name","id","type","dateEffective","date_effective","dateExpiration","date_expiration","makeCardsFromInstitution","institutions","cards","forEach","latest_mou","push","latest_moa","sort","a","b","diff","Memorandums","props","state","activeCard","response","data","setState","setActiveCard","bind","index","length","emptyState","map","card","isActive","MemorandumCard","format","expirationToNow","fromNow","now","dateExpirationMoment","monthsBeforeExpiration","hasExpired","urgent","expirationClass","cardClass","active","onClick"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AAKA;;AAKA;;;;;;;;;;;;AAGA,SAASA,iBAAT,CAA2BC,UAA3B,EAAuC;AACnC,2BAAQ;AACJC,sYADI;AAeJD,oBAAaA;AAfT,KAAR;AAiBH;;AAED,SAASE,YAAT,CAAsBC,cAAtB,EAAsCC,WAAtC,EAAmDC,UAAnD,EAA+D;AAC3D,WAAO;AACHD,qBAAc;AACVE,kBAAOF,YAAYE,IADT;AAEVC,gBAAKH,YAAYG;AAFP,SADX;AAKHF,oBAAa;AACTG,kBAAOL,cADE;AAETM,2BAAgB,sBAAOJ,WAAWK,cAAlB,CAFP;AAGTC,4BAAiB,sBAAON,WAAWO,eAAlB;AAHR;AALV,KAAP;AAWH;;AAED,SAASC,wBAAT,CAAkCC,YAAlC,EAAgD;AAC5C,QAAIC,QAAQ,EAAZ;;AAGAD,iBAAaE,OAAb,CAAqB,uBAAe;AAChC,YAAIZ,YAAYa,UAAZ,KAA2B,IAA3B,IAAmCb,YAAYa,UAAZ,CAAuBL,eAAvB,KAA2C,IAAlF,EAAwF;AACpFG,kBAAMG,IAAN,CAAWhB,aAAa,eAAb,EAA8BE,WAA9B,EAA2CA,YAAYa,UAAvD,CAAX;AACH;;AAED,YAAIb,YAAYe,UAAZ,KAA2B,IAA3B,IAAmCf,YAAYe,UAAZ,CAAuBP,eAAvB,KAA2C,IAAlF,EAAwF;AACpFG,kBAAMG,IAAN,CAAWhB,aAAa,WAAb,EAA0BE,WAA1B,EAAuCA,YAAYe,UAAnD,CAAX;AACH;AACJ,KARD;;AAWAJ,UAAMK,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjB,eAAOD,EAAEhB,UAAF,CAAaM,cAAb,CAA4BY,IAA5B,CAAiCD,EAAEjB,UAAF,CAAaM,cAA9C,CAAP;AACH,KAFD;;AAIA,WAAOI,KAAP;AACH;;IAEKS,W;;;AAEF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTX,mBAAQ,IADC;AAETY,wBAAa;AAFJ,SAAb;;AAKA5B,0BAAkB,oBAAY;AAC1B,gBAAMe,eAAec,SAASC,IAAT,CAAcf,YAAnC;AACA,kBAAKgB,QAAL,CAAc;AACVf,uBAAQF,yBAAyBC,YAAzB;AADE,aAAd;AAGH,SALD;;AAOA,cAAKiB,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,OAArB;AAfe;AAgBlB;;;;sCAQaC,K,EAAO;AACjB,gBAAI,KAAKP,KAAL,CAAWC,UAAX,KAA0BM,KAA9B,EAAqC;AACjC,qBAAKH,QAAL,CAAc;AACVH,gCAAa,IADH,CACQ;AADR,iBAAd;;AAIA;AACH;;AAED,iBAAKG,QAAL,CAAc;AACVH,4BAAaM;AADH,aAAd;AAGH;;;iCAEQ;AAAA;;AAEL,gBAAI,KAAKP,KAAL,CAAWX,KAAX,KAAqB,IAAzB,EAA+B;AAC3B,uBAAO,sDAAP;AACH;;AAED,gBAAI,KAAKW,KAAL,CAAWX,KAAX,CAAiBmB,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,uBAAOV,YAAYW,UAAZ,EAAP;AACH;;AAED,gBAAMpB,QAAQ,KAAKW,KAAL,CAAWX,KAAX,CAAiBqB,GAAjB,CAAqB,UAACC,IAAD,EAAOJ,KAAP,EAAiB;AAChD,oBAAMK,WAAW,OAAKZ,KAAL,CAAWC,UAAX,KAA0BM,KAA3C;AACA,oBAAMF,gBAAgB,SAAhBA,aAAgB;AAAA,2BAAM,OAAKA,aAAL,CAAmBE,KAAnB,CAAN;AAAA,iBAAtB;;AAEA,uBAAO,8BAAC,cAAD,IAAgB,KAAKA,KAArB,EAA4B,MAAMI,IAAlC,EAAwC,SAASN,aAAjD,EAAgE,QAAQO,QAAxE,GAAP;AACH,aALa,CAAd;;AAOA,mBACI;AAAA;AAAA,kBAAK,WAAU,qDAAf;AACKvB;AADL,aADJ;AAKH;;;qCA1CmB;AAChB,mBACI;AAAA;AAAA;AAAA;AAAA,aADJ;AAGH;;;;;;IAyCCwB,c;;;AACF,4BAAYd,KAAZ,EAAmB;AAAA;;AAAA,+HACTA,KADS;AAElB;;;;iCAEQ;AACL,gBAAMhB,gBAAgB,KAAKgB,KAAL,CAAWY,IAAX,CAAgBhC,UAAhB,CAA2BI,aAA3B,CAAyC+B,MAAzC,CAAgD,IAAhD,CAAtB;AACA,gBAAM7B,iBAAiB,KAAKc,KAAL,CAAWY,IAAX,CAAgBhC,UAAhB,CAA2BM,cAA3B,CAA0C6B,MAA1C,CAAiD,IAAjD,CAAvB;AACA,gBAAMC,kBAAkB,KAAKhB,KAAL,CAAWY,IAAX,CAAgBhC,UAAhB,CAA2BM,cAA3B,CAA0C+B,OAA1C,EAAxB;;AAGA,gBAAMC,MAAM,uBAAZ;AACA,gBAAMC,uBAAuB,KAAKnB,KAAL,CAAWY,IAAX,CAAgBhC,UAAhB,CAA2BM,cAAxD;AACA,gBAAMkC,yBAAyBD,qBAAqBrB,IAArB,CAA0BoB,GAA1B,EAA+B,QAA/B,CAA/B;AACA,gBAAMG,aAAaF,qBAAqBrB,IAArB,CAA0BoB,GAA1B,EAA+B,MAA/B,KAA0C,CAA7D;;AAEA,gBAAMI,SAASF,0BAA0B,CAAzC;;AAEA,gBAAIG,kBAAkB,aAAtB;AACA,gBAAID,MAAJ,EAAY;AACRC,mCAAmB,WAAnB;AACH,aAFD,MAEO;AACHA,mCAAmB,iBAAnB;AACH;;AAED,gBAAIC,YAAY,oBAAhB;AACA,gBAAI,KAAKxB,KAAL,CAAWyB,MAAf,EAAuB;AACnBD,6BAAa,QAAb;AACH;;AAED,mBACI;AAAA;AAAA,kBAAM,WAAWA,SAAjB,EAA4B,SAAS,KAAKxB,KAAL,CAAW0B,OAAhD;AACI;AAAA;AAAA,sBAAY,WAAWH,eAAvB;AACI;AAAA;AAAA,0BAAmB,WAAnB;AAA0BF,qCAAa,UAAb,GAA0B,SAApD;AAAA;AAAgEL;AAAhE;AADJ,iBADJ;AAII;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA,0BAAmB,WAAnB;AAA0B,6BAAKhB,KAAL,CAAWY,IAAX,CAAgBjC,WAAhB,CAA4BE;AAAtD;AAFJ,iBAJJ;AAQI;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA,0BAAmB,WAAnB;AAA0B,6BAAKmB,KAAL,CAAWY,IAAX,CAAgBhC,UAAhB,CAA2BG;AAArD;AAFJ,iBARJ;AAYI;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA,0BAAmB,WAAnB;AAA0BG;AAA1B;AAFJ;AAZJ,aADJ;AAmBH;;;;;;kBAGUa,W","file":"memorandums.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport moment from \"moment\";\n\nimport {\n    Card,\n    CardBody,\n} from \"reactstrap\";\n\nimport {\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\nimport LoadingSpinner from \"../../../loading\";\n\n\nfunction fetchInstitutions(onResponse) {\n    graphql({\n        query : `\n                {\n                  institutions {\n                    id\n                    name\n                        latest_mou {\n                            date_expiration\n                        }\n                        latest_moa {\n                            date_expiration\n                        }\n                  }\n                }\n        `,\n        onResponse : onResponse,\n    });\n}\n\nfunction makeCardInfo(memorandumType, institution, memorandum) {\n    return {\n        institution : {\n            name : institution.name,\n            id : institution.id,\n        },\n        memorandum : {\n            type : memorandumType,\n            dateEffective : moment(memorandum.date_effective),\n            dateExpiration : moment(memorandum.date_expiration),\n        },\n    };\n}\n\nfunction makeCardsFromInstitution(institutions) {\n    let cards = [];\n\n\n    institutions.forEach(institution => {\n        if (institution.latest_mou !== null && institution.latest_mou.date_expiration !== null) {\n            cards.push(makeCardInfo(\"Understanding\", institution, institution.latest_mou));\n        }\n\n        if (institution.latest_moa !== null && institution.latest_moa.date_expiration !== null) {\n            cards.push(makeCardInfo(\"Agreement\", institution, institution.latest_moa));\n        }\n    });\n\n\n    cards.sort((a, b) => {\n        return a.memorandum.dateExpiration.diff(b.memorandum.dateExpiration);\n    });\n\n    return cards;\n}\n\nclass Memorandums extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cards : null,\n            activeCard : null,\n        };\n\n        fetchInstitutions(response => {\n            const institutions = response.data.institutions;\n            this.setState({\n                cards : makeCardsFromInstitution(institutions),\n            });\n        });\n\n        this.setActiveCard = this.setActiveCard.bind(this);\n    }\n\n    static emptyState() {\n        return (\n            <h5>There are no memorandums found with an expiration date</h5>\n        );\n    }\n\n    setActiveCard(index) {\n        if (this.state.activeCard === index) {\n            this.setState({\n                activeCard : null //Deselect when already selected\n            });\n\n            return;\n        }\n\n        this.setState({\n            activeCard : index,\n        });\n    }\n\n    render() {\n\n        if (this.state.cards === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.state.cards.length === 0) {\n            return Memorandums.emptyState();\n        }\n\n        const cards = this.state.cards.map((card, index) => {\n            const isActive = this.state.activeCard === index;\n            const setActiveCard = () => this.setActiveCard(index);\n\n            return <MemorandumCard key={index} card={card} onClick={setActiveCard} active={isActive}/>;\n        });\n\n        return (\n            <div className=\"d-flex flex-column align-items-center page-body p-4\">\n                {cards}\n            </div>\n        );\n    }\n}\n\nclass MemorandumCard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const dateEffective = this.props.card.memorandum.dateEffective.format(\"LL\");\n        const dateExpiration = this.props.card.memorandum.dateExpiration.format(\"LL\");\n        const expirationToNow = this.props.card.memorandum.dateExpiration.fromNow();\n\n\n        const now = moment();\n        const dateExpirationMoment = this.props.card.memorandum.dateExpiration;\n        const monthsBeforeExpiration = dateExpirationMoment.diff(now, \"months\");\n        const hasExpired = dateExpirationMoment.diff(now, \"days\") <= 0;\n\n        const urgent = monthsBeforeExpiration <= 6;\n\n        let expirationClass = \"text-white \";\n        if (urgent) {\n            expirationClass += \"bg-danger\";\n        } else {\n            expirationClass += \"bg-dlsu-lighter\";\n        }\n\n        let cardClass = \"home-card rounded \";\n        if (this.props.active) {\n            cardClass += \"active\";\n        }\n\n        return (\n            <Card className={cardClass} onClick={this.props.onClick}>\n                <SectionRow className={expirationClass}>\n                    <SectionRowContent large>{hasExpired ? \"Expired \" : \"Expires\"} {expirationToNow}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Institution Name</SectionRowTitle>\n                    <SectionRowContent large>{this.props.card.institution.name}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Memorandum Type</SectionRowTitle>\n                    <SectionRowContent large>{this.props.card.memorandum.type}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Date of Expiration</SectionRowTitle>\n                    <SectionRowContent large>{dateExpiration}</SectionRowContent>\n                </SectionRow>\n            </Card>\n        );\n    }\n}\n\nexport default Memorandums;"]}