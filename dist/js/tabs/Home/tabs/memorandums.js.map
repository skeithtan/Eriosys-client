{"version":3,"sources":["../../../../../js/tabs/Home/tabs/memorandums.js"],"names":["fetchInstitutions","onResult","query","then","fetchMemorandumDetails","id","memorandumIsFetched","memorandum","category","undefined","makeCardInfo","memorandumType","institution","name","type","dateEffective","date_effective","dateExpiration","date_expiration","makeCardsFromInstitution","institutions","cards","forEach","latest_mou","push","latest_moa","sort","a","b","diff","Memorandums","props","state","activeCard","refreshCards","bind","setActiveCard","result","setState","length","emptyState","map","card","isActive","MemorandumCard","format","expirationToNow","fromNow","now","dateExpirationMoment","monthsBeforeExpiration","hasExpired","urgent","expirationClass","cardClass","active","collapseContent","onClick","MemorandumCardCollapseContent","stateMemorandum","memorandum_file","college_initiator","linkages","collegeInitiator","colleges","linkage","index","linkageString"],"mappings":"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","file":"memorandums.js","sourcesContent":["import React, { Component } from \"react\";\nimport graphql from \"../../../graphql\";\nimport moment from \"moment\";\nimport LoadingSpinner from \"../../../components/loading\";\nimport {\n    SectionRow,\n    SectionRowContent,\n    SectionRowTitle,\n} from \"../../../components/section\";\nimport {\n    Button,\n    Collapse,\n} from \"reactstrap\";\nimport settings from \"../../../settings\";\n\n\nfunction fetchInstitutions(onResult) {\n    graphql.query(`\n    {\n      institutions {\n        id\n        name\n            latest_mou {\n                id\n                date_expiration\n            }\n            latest_moa {\n                id\n                date_expiration\n            }\n      }\n    }\n    `).then(onResult);\n}\n\nfunction fetchMemorandumDetails(id, onResult) {\n    graphql.query(`\n    {\n      memorandum(id: ${id}) {\n        id\n        category\n        memorandum_file\n        date_effective\n        date_expiration\n        college_initiator\n        linkages\n      }\n    }\n    `).then(onResult);\n}\n\nfunction memorandumIsFetched(memorandum) {\n    return memorandum.category !== undefined;\n}\n\nfunction makeCardInfo(memorandumType, institution, memorandum) {\n    return {\n        institution : {\n            name : institution.name,\n            id : institution.id,\n        },\n        memorandum : {\n            id : memorandum.id,\n            type : memorandumType,\n            dateEffective : moment(memorandum.date_effective),\n            dateExpiration : moment(memorandum.date_expiration),\n        },\n    };\n}\n\nfunction makeCardsFromInstitution(institutions) {\n    let cards = [];\n\n\n    institutions.forEach(institution => {\n        if (institution.latest_mou !== null && institution.latest_mou.date_expiration !== null) {\n            cards.push(makeCardInfo(\"Understanding\", institution, institution.latest_mou));\n        }\n\n        if (institution.latest_moa !== null && institution.latest_moa.date_expiration !== null) {\n            cards.push(makeCardInfo(\"Agreement\", institution, institution.latest_moa));\n        }\n    });\n\n\n    cards.sort((a, b) => {\n        return a.memorandum.dateExpiration.diff(b.memorandum.dateExpiration);\n    });\n\n    return cards;\n}\n\nclass Memorandums extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cards : null,\n            activeCard : null,\n        };\n\n        this.refreshCards = this.refreshCards.bind(this);\n        this.setActiveCard = this.setActiveCard.bind(this);\n\n        fetchInstitutions(result => {\n            const institutions = result.institutions;\n            this.setState({\n                cards : makeCardsFromInstitution(institutions),\n            });\n        });\n    }\n\n    static emptyState() {\n        return (\n            <h5>There are no memorandums found with an expiration date</h5>\n        );\n    }\n\n    refreshCards() {\n        this.setState({\n            cards : null //clear first\n        });\n\n        fetchInstitutions(result => {\n            const institutions = result.institutions;\n            this.setState({\n                cards : makeCardsFromInstitution(institutions),\n            });\n        });\n    }\n\n    setActiveCard(id) {\n        if (this.state.activeCard === id) {\n            this.setState({\n                activeCard : null //Deselect when already selected\n            });\n\n            return;\n        }\n\n        this.setState({\n            activeCard : id,\n        });\n\n    }\n\n    render() {\n        if (this.state.cards === null) {\n            return <LoadingSpinner/>;\n        }\n\n        if (this.state.cards.length === 0) {\n            return Memorandums.emptyState();\n        }\n\n        const cards = this.state.cards.map(card => {\n            const id = card.memorandum.id;\n            const isActive = this.state.activeCard === id;\n            const setActiveCard = () => this.setActiveCard(id);\n            return <MemorandumCard key={id} card={card} onClick={setActiveCard} active={isActive}/>;\n        });\n\n        return (\n            <div className=\"d-flex flex-column align-items-center page-body p-4\">\n                {cards}\n            </div>\n        );\n    }\n}\n\nclass MemorandumCard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const dateExpiration = this.props.card.memorandum.dateExpiration.format(\"LL\");\n        const expirationToNow = this.props.card.memorandum.dateExpiration.fromNow();\n\n        const now = moment();\n        const dateExpirationMoment = this.props.card.memorandum.dateExpiration;\n        const monthsBeforeExpiration = dateExpirationMoment.diff(now, \"months\");\n        const hasExpired = dateExpirationMoment.diff(now, \"days\") <= 0;\n\n        const urgent = monthsBeforeExpiration <= 6;\n\n        let expirationClass = \"text-white \";\n        if (urgent) {\n            expirationClass += \"bg-danger\";\n        } else {\n            expirationClass += \"bg-dlsu-lighter\";\n        }\n\n        let cardClass = \"home-card rounded \";\n        if (this.props.active) {\n            cardClass += \"active\";\n        }\n\n        let collapseContent = null;\n\n        if (memorandumIsFetched(this.props.card.memorandum) || this.props.active) {\n            //Have we fetched it yet? This way we only mount those that have been fetched\n            //or if it hasn't been fetched but is active.\n            collapseContent =\n                <div>\n                    <MemorandumCardCollapseContent memorandum={this.props.card.memorandum}/>\n                </div>;\n        }\n\n\n        return (\n            <div className={cardClass} onClick={this.props.onClick} ref={(card) => this.card = card}>\n                <SectionRow className={expirationClass}>\n                    <SectionRowContent large>{hasExpired ? \"Expired \" : \"Expires\"} {expirationToNow}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Institution Name</SectionRowTitle>\n                    <SectionRowContent large>{this.props.card.institution.name}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Memorandum Type</SectionRowTitle>\n                    <SectionRowContent large>{this.props.card.memorandum.type}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Date of Expiration</SectionRowTitle>\n                    <SectionRowContent large>{dateExpiration}</SectionRowContent>\n                </SectionRow>\n                <Collapse isOpen={this.props.active}>\n                    {collapseContent}\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nclass MemorandumCardCollapseContent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            memorandum : props.memorandum,\n        };\n\n        fetchMemorandumDetails(props.memorandum.id, result => {\n            let memorandum = result.memorandum;\n            let stateMemorandum = this.state.memorandum;\n\n            // Store fetched information in the instance\n            stateMemorandum.category = memorandum.category;\n            stateMemorandum.memorandum_file = memorandum.memorandum_file;\n            stateMemorandum.date_effective = memorandum.date_effective;\n            stateMemorandum.college_initiator = memorandum.college_initiator;\n            stateMemorandum.linkages = memorandum.linkages;\n        });\n    }\n\n    render() {\n        const memorandum = this.state.memorandum;\n\n        if (!memorandumIsFetched(memorandum)) {\n            return (\n                <div className=\"card-details\">\n                    <LoadingSpinner noText/>\n                </div>\n            );\n        }\n\n\n        const dateEffective = moment(memorandum.date_effective).format(\"LL\");\n\n        let collegeInitiator = \"No college initiator\";\n        if (memorandum.college_initiator !== null) {\n            collegeInitiator = settings.colleges[memorandum.college_initiator];\n        }\n\n        let linkages = \"No linkages\";\n        if (memorandum.linkages.length > 0) {\n            linkages = \"\";\n\n            memorandum.linkages.forEach((linkage, index) => {\n                const linkageString = settings.linkages[linkage];\n                if (index === memorandum.linkages.length - 1) {\n                    linkages += linkageString;\n                } else {\n                    linkages += linkageString + \", \";\n                }\n            });\n        }\n\n        return (\n            <div className=\"card-details fetched\">\n                <SectionRow>\n                    <SectionRowTitle>Date Effective</SectionRowTitle>\n                    <SectionRowContent large>{dateEffective}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>College Initiator</SectionRowTitle>\n                    <SectionRowContent large>{collegeInitiator}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <SectionRowTitle>Linkages</SectionRowTitle>\n                    <SectionRowContent large>{linkages}</SectionRowContent>\n                </SectionRow>\n                <SectionRow>\n                    <Button outline size=\"sm\" color=\"success\" className=\"mr-2\">View memorandum document</Button>\n                    <Button outline size=\"sm\" color=\"success\">Renew Memorandum</Button>\n                </SectionRow>\n            </div>\n        );\n\n    }\n}\n\nexport default Memorandums;"]}