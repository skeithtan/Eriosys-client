{"version":3,"sources":["../../../js/reports/student_statistics_country.js"],"names":["$","makeReportQuery","year","term","get","url","serverURL","beforeSend","data","InternationalStudentStatisticsByCountry","CountryStudentStatisticsReport","props","state","countries","error","fetchReport","bind","setState","done","fail","toString","parseInt","CountryStudentStatisticsTable","totalGradSchool","totalUnderGradSchool","grandTotal","forEach","gradSchool","country","inbound_graduate_students","underGradSchool","inbound_undergrad_students","countryTotal","rows","map","index","CountryStudentStatisticsRow","percentage","toFixed"],"mappings":"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","file":"student_statistics_country.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    EndOfReportIndicator,\n    GenericYearTermReport,\n    ReportHead,\n    ReportTitleContainer,\n} from \"../components/reports\";\nimport * as $ from \"jquery\";\nimport settings from \"../settings\";\nimport authorizeXHR from \"../authorization\";\nimport ErrorState from \"../components/error_state\";\nimport LoadingSpinner from \"../components/loading\";\nimport { Table } from \"reactstrap\";\n\n\nfunction makeReportQuery(year, term) {\n    return $.get({\n        url : `${settings.serverURL}/reports/general-statistics-reports`,\n        beforeSend : authorizeXHR,\n        data : {\n            \"filter\" : \"country\",\n            \"academic-year\" : year,\n            \"term\" : term,\n        },\n    });\n}\n\nclass InternationalStudentStatisticsByCountry extends GenericYearTermReport {\n    report(year, term) {\n        return <CountryStudentStatisticsReport year={year}\n                                               term={term}/>;\n    }\n}\n\nclass CountryStudentStatisticsReport extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            countries : null,\n            error : null,\n        };\n\n        this.fetchReport = this.fetchReport.bind(this);\n        this.fetchReport(this.props.year, this.props.term);\n    }\n\n    fetchReport(year, term) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeReportQuery(year, term)\n            .done(countries => this.setState({\n                countries : countries,\n            }))\n            .fail(() => this.setState({\n                error : \"AJAX Error at fetchReport()\",\n            }));\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState({\n            countries : null,\n        });\n\n        this.fetchReport(props.year, props.term);\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.fetchReport(this.props.year, this.props.term)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        if (this.state.countries === null) {\n            return <LoadingSpinner/>;\n        }\n\n        const year = parseInt(this.props.year);\n\n        return (\n            <div className=\"report-page\">\n                <ReportHead/>\n                <ReportTitleContainer>\n                    <h4>Distribution of International Students (IS) by Country</h4>\n                    <h5>{`Academic Year ${year} - ${year + 1} Term ${this.props.term}`}</h5>\n                </ReportTitleContainer>\n                <CountryStudentStatisticsTable countries={this.state.countries}/>\n                <EndOfReportIndicator/>\n            </div>\n        );\n    }\n}\n\nclass CountryStudentStatisticsTable extends Component {\n    render() {\n        let totalGradSchool = 0;\n        let totalUnderGradSchool = 0;\n        let grandTotal = 0;\n\n        this.props.countries.forEach(country => {\n            const gradSchool = country.inbound_graduate_students;\n            const underGradSchool = country.inbound_undergrad_students;\n            const countryTotal = gradSchool + underGradSchool;\n\n            totalGradSchool += gradSchool;\n            totalUnderGradSchool += underGradSchool;\n            grandTotal += countryTotal;\n        });\n\n        const rows = this.props.countries.map((country, index) =>\n            <CountryStudentStatisticsRow key={index}\n                                         country={country}\n                                         grandTotal={grandTotal}/>,\n        );\n\n        return (\n            <Table>\n                <thead>\n                <tr className=\"text-center\">\n                    <th>Country</th>\n                    <th>Graduate Students</th>\n                    <th>Undergraduate Students</th>\n                    <th>Total Students</th>\n                    <th>Percentage to Total IS</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n                <tfoot className=\"text-right\">\n                <tr>\n                    <th>Total</th>\n                    <th className=\"numeric\">{totalGradSchool}</th>\n                    <th className=\"numeric\">{totalUnderGradSchool}</th>\n                    <th className=\"numeric\">{grandTotal}</th>\n                    <th className=\"numeric\">100%</th>\n                </tr>\n                </tfoot>\n            </Table>\n        );\n    }\n}\n\nclass CountryStudentStatisticsRow extends Component {\n    render() {\n        const gradSchool = this.props.country.inbound_graduate_students;\n        const underGradSchool = this.props.country.inbound_undergrad_students;\n        const countryTotal = gradSchool + underGradSchool;\n\n        let percentage = 0;\n\n        if (this.props.grandTotal !== 0) {\n            percentage = (countryTotal * 100 / this.props.grandTotal).toFixed(1);\n        }\n\n        return (\n            <tr>\n                <td>{this.props.country.country}</td>\n                <td className=\"numeric text-right\">{gradSchool}</td>\n                <td className=\"numeric text-right\">{underGradSchool}</td>\n                <td className=\"numeric text-right\">{countryTotal}</td>\n                <td className=\"numeric text-right\">{percentage}%</td>\n            </tr>\n        );\n    }\n}\n\nexport default InternationalStudentStatisticsByCountry;"]}