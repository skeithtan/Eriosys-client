{"version":3,"sources":["../../../js/reports/distribution_per_country.js"],"names":["makeReportQuery","year","term","get","url","serverURL","beforeSend","data","DistributionPerCountry","StudentDistributionReport","props","state","countries","error","fetchReport","bind","setState","done","fail","toString","parseInt","StudentDistributionTable","rows","map","country","index","totalInboundUndergrad","totalInboundGrad","totalOutboundUndergrad","totalOutboundGrad","forEach","inboundUndergrad","inbound_undergrad_students","inboundGrad","inbound_graduate_students","outboundUndergrad","outbound_undergrad_students","outboundGrad","outbound_graduate_students","StudentDistributionRow"],"mappings":"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","file":"distribution_per_country.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    EndOfReportIndicator,\n    GenericYearTermReport,\n    ReportHead,\n    ReportTitleContainer,\n} from \"../components/reports\";\nimport authorizeXHR from \"../authorization\";\nimport $ from \"jquery\";\nimport ErrorState from \"../components/error_state\";\nimport LoadingSpinner from \"../components/loading\";\nimport { Table } from \"reactstrap\";\nimport settings from \"../settings\";\n\n\nfunction makeReportQuery(year, term) {\n    return $.get({\n        url : `${settings.serverURL}/reports/general-statistics-reports`,\n        beforeSend : authorizeXHR,\n        data : {\n            \"filter\" : \"country\",\n            \"academic-year\" : year,\n            \"term\" : term,\n        },\n    });\n}\n\nclass DistributionPerCountry extends GenericYearTermReport {\n    report(year, term) {\n        return <StudentDistributionReport year={year}\n                                          term={term}/>;\n    }\n}\n\nclass StudentDistributionReport extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            countries : null,\n            error : null,\n        };\n\n        this.fetchReport = this.fetchReport.bind(this);\n\n        this.fetchReport(this.props.year, this.props.term);\n    }\n\n    fetchReport(year, term) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        makeReportQuery(year, term)\n            .done(countries => this.setState({\n                countries : countries,\n            }))\n            .fail(() => this.setState({\n                error : \"AJAX Error at fetchReport()\",\n            }));\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState({\n            countries : null,\n        });\n\n        this.fetchReport(props.year, props.term);\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.fetchReport(this.props.year, this.props.term)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        if (this.state.countries === null) {\n            return <LoadingSpinner/>;\n        }\n\n        const year = parseInt(this.props.year);\n\n        return (\n            <div className=\"report-page\">\n                <ReportHead/>\n                <ReportTitleContainer>\n                    <h4>Term End Distribution Report By Country</h4>\n                    <h5>{`Academic Year ${year} - ${year + 1} Term ${this.props.term}`}</h5>\n                </ReportTitleContainer>\n                <StudentDistributionTable countries={this.state.countries}/>\n                <EndOfReportIndicator/>\n            </div>\n        );\n    }\n}\n\nclass StudentDistributionTable extends Component {\n    render() {\n        const rows = this.props.countries.map((country, index) =>\n            <StudentDistributionRow country={country}\n                                    key={index}/>,\n        );\n\n        let totalInboundUndergrad = 0;\n        let totalInboundGrad = 0;\n        let totalOutboundUndergrad = 0;\n        let totalOutboundGrad = 0;\n\n        this.props.countries.forEach(country => {\n            const inboundUndergrad = country.inbound_undergrad_students;\n            const inboundGrad = country.inbound_graduate_students;\n            const outboundUndergrad = country.outbound_undergrad_students;\n            const outboundGrad = country.outbound_graduate_students;\n\n\n            totalInboundUndergrad += inboundUndergrad;\n            totalInboundGrad += inboundGrad;\n            totalOutboundUndergrad += outboundUndergrad;\n            totalOutboundGrad += outboundGrad;\n        });\n\n        return (\n            <Table>\n                <thead>\n                <tr className=\"text-center\">\n                    <th>Institution</th>\n                    <th>Inbound Undergraduate</th>\n                    <th>Inbound Graduate</th>\n                    <th>Outbound Undergraduate</th>\n                    <th>Outbound Graduate</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n                <tfoot className=\"text-right\">\n                <tr>\n                    <th>Total</th>\n                    <th className=\"numeric\">{totalInboundUndergrad}</th>\n                    <th className=\"numeric\">{totalInboundGrad}</th>\n                    <th className=\"numeric\">{totalOutboundUndergrad}</th>\n                    <th className=\"numeric\">{totalOutboundGrad}</th>\n                </tr>\n                </tfoot>\n            </Table>\n        );\n    }\n}\n\nclass StudentDistributionRow extends Component {\n    render() {\n        const country = this.props.country;\n\n        const inboundUndergrad = country.inbound_undergrad_students;\n        const inboundGrad = country.inbound_graduate_students;\n        const outboundUndergrad = country.outbound_undergrad_students;\n        const outboundGrad = country.outbound_graduate_students;\n\n        return (\n            <tr>\n                <td>{this.props.country.country}</td>\n                <td className=\"numeric text-right\">{inboundUndergrad}</td>\n                <td className=\"numeric text-right\">{inboundGrad}</td>\n                <td className=\"numeric text-right\">{outboundUndergrad}</td>\n                <td className=\"numeric text-right\">{outboundGrad}</td>\n            </tr>\n        );\n    }\n}\n\nexport default DistributionPerCountry;"]}