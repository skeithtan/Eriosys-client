{"version":3,"sources":["../../../js/settings/requirements.js"],"names":["tabs","name","image","activeImage","makeRequirementsQuery","isInbound","query","Requirements","props","state","activeTab","addRequirementIsShowing","requirements","fetchRequirements","bind","refreshRequirements","toggleAddRequirement","setActiveTab","setState","error","undefined","then","inbound_requirements","outbound_requirements","catch","tab","inbound","toString","RequirementsHead","RequirementFormModal","form","submitRequirement","url","serverURL","dismissToast","title","message","post","beforeSend","data","done","success","onSuccess","fail","console","log","response","toggle","characterLimit","value","formHasErrors","fieldErrors","isOpen","event","target","RequirementsBody","emptyState","deleteRequirement","requirementId","ajax","method","refresh","length","rows","map","onDeleteButtonClick","confirm","requirement","id","RequirementRow","default"],"mappings":"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","file":"requirements.js","sourcesContent":["import React, { Component } from \"react\";\nimport TabBar from \"../components/tab_bar\";\nimport graphql from \"../graphql\";\nimport ErrorState from \"../components/error_state\";\nimport LoadingSpinner from \"../components/loading\";\nimport {\n    Section,\n    SectionRow,\n    SectionRowContent,\n    SectionTable,\n} from \"../components/section\";\nimport {\n    Button,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n} from \"reactstrap\";\nimport validateForm from \"../form_validator\";\nimport settings from \"../settings\";\nimport authorizeXHR from \"../authorization\";\nimport { makeInfoToast } from \"../dismissable_toast_maker\";\nimport iziToast from \"izitoast\";\nimport $ from \"jquery\";\n\n\nconst tabs = [\n    {\n        name : \"Inbound\",\n        image : \"../../images/inboundgrey.png\",\n        activeImage : \"../../images/inboundgreen.png\",\n    },\n    {\n        name : \"Outbound\",\n        image : \"../../images/airplanegrey.png\",\n        activeImage : \"../../images/airplanegreen.png\",\n    },\n];\n\nfunction makeRequirementsQuery(isInbound) {\n    return graphql.query(`\n    {\n        ${isInbound ? \"inbound_requirements\" : \"outbound_requirements\"} {\n            id\n            name\n        }\n    }\n    `);\n}\n\nclass Requirements extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab : tabs[0],\n            addRequirementIsShowing : false,\n            requirements : null,\n        };\n\n        this.fetchRequirements = this.fetchRequirements.bind(this);\n        this.refreshRequirements = this.refreshRequirements.bind(this);\n        this.toggleAddRequirement = this.toggleAddRequirement.bind(this);\n        this.setActiveTab = this.setActiveTab.bind(this);\n\n        this.fetchRequirements();\n    }\n\n    refreshRequirements() {\n        this.setState({\n            requirements : null,\n        });\n\n        this.fetchRequirements();\n    }\n\n    fetchRequirements(isInbound) {\n        if (this.state.error) {\n            this.setState({\n                error : null,\n            });\n        }\n\n        if (isInbound === undefined) {\n            isInbound = this.state.activeTab.name === \"Inbound\";\n        }\n\n        makeRequirementsQuery(isInbound)\n            .then(requirements => this.setState({\n                requirements : isInbound ? requirements.inbound_requirements : requirements.outbound_requirements,\n            }))\n            .catch(error => this.setState({\n                error : error,\n            }));\n    }\n\n    toggleAddRequirement() {\n        this.setState({\n            addRequirementIsShowing : !this.state.addRequirementIsShowing,\n        });\n    }\n\n    setActiveTab(tab) {\n        this.setState({\n            activeTab : tab,\n            requirements : null,\n        });\n\n        this.fetchRequirements(tab.name === \"Inbound\");\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <ErrorState onRetryButtonClick={() => this.fetchRequirements(this.props.inbound)}>\n                    {this.state.error.toString()}\n                </ErrorState>\n            );\n        }\n\n        if (this.state.requirements === null) {\n            return <LoadingSpinner/>;\n        }\n\n        return (\n            <div className=\"container-fluid d-flex flex-column p-0 h-100\">\n                <RequirementsHead inbound={this.state.activeTab.name === \"Inbound\"}\n                                  toggleAddRequirement={this.toggleAddRequirement}/>\n                <RequirementsBody requirements={this.state.requirements}\n                                  refresh={this.refreshRequirements}\n                                  toggleAddRequirement={this.toggleAddRequirement}\n                                  inbound={this.state.activeTab.name === \"Inbound\"}/>\n                <RequirementFormModal onSuccess={this.refreshRequirements}\n                                      inbound={this.state.activeTab.name === \"Inbound\"}\n                                      isOpen={this.state.addRequirementIsShowing}\n                                      toggle={this.toggleAddRequirement}/>\n                <TabBar setActiveTab={this.setActiveTab}\n                        activeTab={this.state.activeTab}\n                        tabs={tabs}/>\n            </div>\n        );\n    }\n}\n\nclass RequirementsHead extends Component {\n    render() {\n        return (\n            <div className=\"page-head pt-5 d-flex flex-row align-items-end\">\n                <div className=\"mr-auto\">\n                    <h4 className=\"page-head-title mb-0\">{this.props.inbound ? \"Inbound\" : \"Outbound\"} Application\n                        Requirements</h4>\n                </div>\n\n                <div>\n                    <Button outline\n                            color=\"success\"\n                            onClick={this.props.toggleAddRequirement}\n                            size=\"sm\">Add</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass RequirementFormModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            form : {\n                name : \"\",\n            },\n        };\n\n        this.submitRequirement = this.submitRequirement.bind(this);\n    }\n\n    submitRequirement() {\n        let url = `${settings.serverURL}/programs`;\n        url += this.props.inbound ? \"/inbound/requirements/\" : \"/outbound/requirements/\";\n\n        const dismissToast = makeInfoToast({\n            title : \"Submitting...\",\n            message : \"Adding requirement...\",\n        });\n\n        $.post({\n             url : url,\n             beforeSend : authorizeXHR,\n             data : this.state.form,\n         })\n         .done(() => {\n             dismissToast();\n             iziToast.success({\n                 title : \"Success\",\n                 message : \"Successfully added requirement\",\n             });\n             this.props.onSuccess();\n         })\n         .fail(response => {\n             dismissToast();\n             iziToast.error({\n                 title : \"Error\",\n                 message : \"Unable to add requirement\",\n             });\n             //TODO: iziToast\n             console.log(response);\n         });\n\n        this.props.toggle();\n    }\n\n    render() {\n        const { formHasErrors, fieldErrors } = validateForm([\n            {\n                name : \"Requirement\",\n                characterLimit : 64,\n                value : this.state.form.name,\n            },\n        ]);\n\n        return (\n            <Modal isOpen={this.props.isOpen}\n                   toggle={this.props.toggle}\n                   size=\"sm\">\n                <ModalHeader toggle={this.props.toggle}>\n                    <small className=\"mb-0\">Add a requirement</small>\n                </ModalHeader>\n                <ModalBody className=\"form\">\n                    <Form>\n                        <FormGroup>\n                            <Input placeholder=\"Requirement\"\n                                   valid={!formHasErrors}\n                                   value={this.state.form.name}\n                                   onChange={event => this.setState({\n                                       form : {\n                                           name : event.target.value,\n                                       },\n                                   })}>\n                            </Input>\n                            <FormFeedback>{fieldErrors[\"Requirement\"][0]}</FormFeedback>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button outline\n                            color=\"success\"\n                            onClick={this.submitRequirement}\n                            disabled={formHasErrors}>\n                        Add\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nclass RequirementsBody extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error : null,\n        };\n\n        this.emptyState = this.emptyState.bind(this);\n        this.deleteRequirement = this.deleteRequirement.bind(this);\n    }\n\n    emptyState() {\n        return (\n            <div className=\"loading-container\">\n                <h3>There are no requirements.</h3>\n                <Button outline\n                        onClick={this.props.toggleAddRequirement}\n                        color=\"success\">Add a requirement</Button>\n            </div>\n        );\n    }\n\n    deleteRequirement(requirementId) {\n        $.ajax({\n             method : \"DELETE\",\n             url : `${settings.serverURL}/programs/${this.props.inbound ? \"inbound\" : \"outbound\"}/requirements/${requirementId}/`,\n             beforeSend : authorizeXHR,\n         })\n         .done(() => {\n             this.props.refresh();\n         })\n         .fail(error => {\n             console.log(error);\n         });\n    }\n\n    render() {\n\n        if (this.props.requirements.length === 0) {\n            return this.emptyState();\n        }\n\n        const rows = this.props.requirements.map(requirement => {\n\n            const onDeleteButtonClick = () => {\n                if (!confirm(`Are you sure you want to remove the requirement \"${requirement.name}\"?`)) {\n                    return;\n                }\n\n                this.deleteRequirement(requirement.id);\n            };\n\n            return <RequirementRow key={requirement.id}\n                                   requirement={requirement}\n                                   onDeleteButtonClick={onDeleteButtonClick}/>;\n        });\n\n        return (\n            <div className=\"page-body\">\n                <Section>\n                    <SectionTable>\n                        {rows}\n                    </SectionTable>\n                </Section>\n            </div>\n        );\n    }\n}\n\nclass RequirementRow extends Component {\n    render() {\n        return (\n            <SectionRow className=\"d-flex flex-row\">\n                <SectionRowContent large\n                                   className=\"mr-auto\">{this.props.requirement.name}</SectionRowContent>\n                <Button outline\n                        size=\"sm\"\n                        onClick={this.props.onDeleteButtonClick}\n                        color=\"danger\">-</Button>\n            </SectionRow>\n        );\n    }\n}\n\nexport {\n    Requirements as default,\n};"]}