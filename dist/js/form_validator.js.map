{"version":3,"sources":["../../js/form_validator.js"],"names":["validateForm","formFields","fieldErrors","formErrors","formHasErrors","forEach","charFieldValidator","CharLimitFieldValidator","field","characterLimit","validators","optional","undefined","fieldIsNotEmptyValidator","FieldIsNotEmptyValidator","unshift","customValidators","concat","errors","name","validator","isValid","value","push","errorMessage","FieldValidator","fieldValue","fieldName","charLimit","length"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;AAC9B,QAAIC,cAAc,EAAlB;;AAEA,QAAIC,aAAa;AACbC,uBAAgB,KADH;AAEbF,qBAAcA;AAFD,KAAjB;;AAMAD,eAAWI,OAAX,CAAmB,iBAAS;AACxB,YAAMC,qBAAqB,IAAIC,uBAAJ,CAA4BC,MAAMC,cAAlC,CAA3B;;AAEA,YAAIC,aAAa,CAACJ,kBAAD,CAAjB;;AAEA,YAAIE,MAAMG,QAAN,KAAmBC,SAAnB,IAAgC,CAACJ,MAAMG,QAA3C,EAAqD;AACjD,gBAAME,2BAA2B,IAAIC,wBAAJ,EAAjC;AACA;AACAJ,uBAAWK,OAAX,CAAmBF,wBAAnB;AACH;;AAED,YAAIL,MAAMQ,gBAAN,KAA2BJ,SAA/B,EAA0C;AACtCF,yBAAaA,WAAWO,MAAX,CAAkBT,MAAMQ,gBAAxB,CAAb;AACH;;AAED,YAAIE,SAAS,EAAb;AACAhB,oBAAYM,MAAMW,IAAlB,IAA0BD,MAA1B;;AAEAR,mBAAWL,OAAX,CAAmB,qBAAa;AAC5B,gBAAI,CAACe,UAAUC,OAAV,CAAkBb,MAAMc,KAAxB,CAAL,EAAqC;AACjCnB,2BAAWC,aAAX,GAA2B,IAA3B;AACAc,uBAAOK,IAAP,CAAYH,UAAUI,YAAV,CAAuBhB,MAAMW,IAA7B,CAAZ;AACH;AACJ,SALD;AAMH,KAxBD;;AA0BA,WAAOhB,UAAP;AACH;;IAEKsB,c;;;;;;;gCACMC,U,EAAY;AAChB,mBAAO,IAAP;AACH;;;qCAEYC,S,EAAW;AACpB,mBAAUA,SAAV;AACH;;;;;;IAGCpB,uB;;;AACF,qCAAYqB,SAAZ,EAAuB;AAAA;;AAAA;;AAEnB,cAAKA,SAAL,GAAiBA,SAAjB;AAFmB;AAGtB;;;;gCAEOF,U,EAAY;AAChB,gBAAI,KAAKE,SAAL,KAAmB,IAAvB,EAA6B;AACzB,uBAAO,IAAP;AACH;;AAED,mBAAOF,WAAWG,MAAX,IAAqB,KAAKD,SAAjC;AACH;;;qCAEYD,S,EAAW;AACpB,mBAAUA,SAAV,2BAAyC,KAAKC,SAA9C;AACH;;;;EAhBiCH,c;;IAmBhCX,wB;;;;;;;;;;;gCACMY,U,EAAY;AAChB,mBAAOA,WAAWG,MAAX,GAAoB,CAA3B;AACH;;;qCAEYF,S,EAAW;AACpB,mBAAUA,SAAV;AACH;;;;EAPkCF,c;;kBAUxBzB,Y","file":"form_validator.js","sourcesContent":["// Returns errors from fields if there are errors. If not, null.\n// Takes an object that looks like this:\n// [\n//     {\n//         name : \"Name\",\n//         characterLimit : 64,\n//         value : 'Actual field value',\n//         optional : false,\n//         customValidators: [{\n//             isValid: (fieldValue) => !isNaN(parseInt(name)),\n//             errorMessage: name => `${name} must be a valid integer`\n//         }]\n//     },\n// ];\nfunction validateForm(formFields) {\n    let fieldErrors = {};\n\n    let formErrors = {\n        formHasErrors : false,\n        fieldErrors : fieldErrors,\n    };\n\n\n    formFields.forEach(field => {\n        const charFieldValidator = new CharLimitFieldValidator(field.characterLimit);\n\n        let validators = [charFieldValidator,];\n\n        if (field.optional === undefined || !field.optional) {\n            const fieldIsNotEmptyValidator = new FieldIsNotEmptyValidator();\n            // Insert at beginning of array\n            validators.unshift(fieldIsNotEmptyValidator);\n        }\n\n        if (field.customValidators !== undefined) {\n            validators = validators.concat(field.customValidators);\n        }\n\n        let errors = [];\n        fieldErrors[field.name] = errors;\n\n        validators.forEach(validator => {\n            if (!validator.isValid(field.value)) {\n                formErrors.formHasErrors = true;\n                errors.push(validator.errorMessage(field.name));\n            }\n        });\n    });\n\n    return formErrors;\n}\n\nclass FieldValidator {\n    isValid(fieldValue) {\n        return true;\n    }\n\n    errorMessage(fieldName) {\n        return `${fieldName} has errors.`;\n    }\n}\n\nclass CharLimitFieldValidator extends FieldValidator {\n    constructor(charLimit) {\n        super();\n        this.charLimit = charLimit;\n    }\n\n    isValid(fieldValue) {\n        if (this.charLimit === null) {\n            return true;\n        }\n\n        return fieldValue.length <= this.charLimit;\n    }\n\n    errorMessage(fieldName) {\n        return `${fieldName} should not exceed ${this.charLimit} characters.`;\n    }\n}\n\nclass FieldIsNotEmptyValidator extends FieldValidator {\n    isValid(fieldValue) {\n        return fieldValue.length > 0;\n    }\n\n    errorMessage(fieldName) {\n        return `${fieldName} is required.`;\n    }\n}\n\nexport default validateForm;"]}