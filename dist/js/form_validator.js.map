{"version":3,"sources":["../../js/form_validator.js"],"names":["validateForm","formFields","fieldErrors","formErrors","formHasErrors","forEach","charFieldValidator","CharLimitFieldValidator","field","characterLimit","fieldIsNotEmptyValidator","FieldIsNotEmptyValidator","validators","customValidators","undefined","concat","errors","name","validator","isValid","value","push","errorMessage","FieldValidator","fieldValue","fieldName","charLimit","length"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;AAC9B,QAAIC,cAAc,EAAlB;;AAEA,QAAIC,aAAa;AACbC,uBAAgB,KADH;AAEbF,qBAAcA;AAFD,KAAjB;;AAMAD,eAAWI,OAAX,CAAmB,iBAAS;AACxB,YAAMC,qBAAqB,IAAIC,uBAAJ,CAA4BC,MAAMC,cAAlC,CAA3B;AACA,YAAMC,2BAA2B,IAAIC,wBAAJ,EAAjC;;AAEA,YAAIC,aAAa,CAACF,wBAAD,EAA2BJ,kBAA3B,CAAjB;AACA,YAAIE,MAAMK,gBAAN,KAA2BC,SAA/B,EAA0C;AACtCF,yBAAaA,WAAWG,MAAX,CAAkBP,MAAMK,gBAAxB,CAAb;AACH;;AAED,YAAIG,SAAS,EAAb;AACAd,oBAAYM,MAAMS,IAAlB,IAA0BD,MAA1B;;AAEAJ,mBAAWP,OAAX,CAAmB,qBAAa;AAC5B,gBAAI,CAACa,UAAUC,OAAV,CAAkBX,MAAMY,KAAxB,CAAL,EAAqC;AACjCjB,2BAAWC,aAAX,GAA2B,IAA3B;AACAY,uBAAOK,IAAP,CAAYH,UAAUI,YAAV,CAAuBd,MAAMS,IAA7B,CAAZ;AACH;AACJ,SALD;AAMH,KAlBD;;AAoBA,WAAOd,UAAP;AACH;;IAEKoB,c;;;;;;;gCACMC,U,EAAY;AAChB,mBAAO,IAAP;AACH;;;qCAEYC,S,EAAW;AACpB,mBAAUA,SAAV;AACH;;;;;;IAGClB,uB;;;AACF,qCAAYmB,SAAZ,EAAuB;AAAA;;AAAA;;AAEnB,cAAKA,SAAL,GAAiBA,SAAjB;AAFmB;AAGtB;;;;gCAEOF,U,EAAY;AAChB,gBAAI,KAAKE,SAAL,KAAmB,IAAvB,EAA6B;AACzB,uBAAO,IAAP;AACH;;AAED,mBAAOF,WAAWG,MAAX,IAAqB,KAAKD,SAAjC;AACH;;;qCAEYD,S,EAAW;AACpB,mBAAUA,SAAV,2BAAyC,KAAKC,SAA9C;AACH;;;;EAhBiCH,c;;IAmBhCZ,wB;;;;;;;;;;;gCACMa,U,EAAY;AAChB,mBAAOA,WAAWG,MAAX,GAAoB,CAA3B;AACH;;;qCAEYF,S,EAAW;AACpB,mBAAUA,SAAV;AACH;;;;EAPkCF,c;;kBAUxBvB,Y","file":"form_validator.js","sourcesContent":["// Returns errors from fields if there are errors. If not, null.\n// Takes an object that looks like this:\n// [\n//     {\n//         name : \"Name\",\n//         characterLimit : 64,\n//         value : 'Actual field value',\n//         customValidators: [{\n//             isValid: (fieldValue) => !isNaN(parseInt(name)),\n//             errorMessage: name => `${name} must be a valid integer`\n//         }]\n//     },\n// ];\nfunction validateForm(formFields) {\n    let fieldErrors = {};\n\n    let formErrors = {\n        formHasErrors : false,\n        fieldErrors : fieldErrors,\n    };\n\n\n    formFields.forEach(field => {\n        const charFieldValidator = new CharLimitFieldValidator(field.characterLimit);\n        const fieldIsNotEmptyValidator = new FieldIsNotEmptyValidator();\n\n        let validators = [fieldIsNotEmptyValidator, charFieldValidator,];\n        if (field.customValidators !== undefined) {\n            validators = validators.concat(field.customValidators);\n        }\n\n        let errors = [];\n        fieldErrors[field.name] = errors;\n\n        validators.forEach(validator => {\n            if (!validator.isValid(field.value)) {\n                formErrors.formHasErrors = true;\n                errors.push(validator.errorMessage(field.name));\n            }\n        });\n    });\n\n    return formErrors;\n}\n\nclass FieldValidator {\n    isValid(fieldValue) {\n        return true;\n    }\n\n    errorMessage(fieldName) {\n        return `${fieldName} has errors.`;\n    }\n}\n\nclass CharLimitFieldValidator extends FieldValidator {\n    constructor(charLimit) {\n        super();\n        this.charLimit = charLimit;\n    }\n\n    isValid(fieldValue) {\n        if (this.charLimit === null) {\n            return true;\n        }\n\n        return fieldValue.length <= this.charLimit;\n    }\n\n    errorMessage(fieldName) {\n        return `${fieldName} should not exceed ${this.charLimit} characters.`;\n    }\n}\n\nclass FieldIsNotEmptyValidator extends FieldValidator {\n    isValid(fieldValue) {\n        return fieldValue.length > 0;\n    }\n\n    errorMessage(fieldName) {\n        return `${fieldName} is required.`;\n    }\n}\n\nexport default validateForm;"]}